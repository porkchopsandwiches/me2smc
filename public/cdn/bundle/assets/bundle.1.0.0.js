!function(e){function a(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,a),n.loaded=!0,n.exports}var t={};return a.m=e,a.c=t,a.p="/cdn/bundle/assets",a(0)}([function(e,a,t){"use strict";var o=t(1),n=t(2),s=t(3),i=t(4),r=t(5),l=t(6),d=t(7),u=t(8),p=t(9),m=t(10),c=t(11),h=t(12),v=t(14);t(16),void[o.name,n.name,s.name,i.name,r.name,l.name,d.name,u.name,p.name,m.name,c.name].join(","),_.extend(window,{Application:h.Application,Role:v.Role})},function(e,a){"use strict";a.name="modal",void function(){ko.bindingHandlers[a.name]={init:function(e,a,t,o,n){var s=$(e);s.modal({show:!1}),ko.utils.domNodeDisposal.addDisposeCallback(e,function(){s.modal("destroy")})},update:function(e,a,t,o,n){var s=a(),i=$(e);s?i.modal("show"):i.modal("hide")}}}()},function(e,a){"use strict";a.name="pick-teammate",void function(){ko.components.register(a.name,{viewModel:function(e){this.target=e.target,this.pool=ko.pureComputed(function(){var a=e.pool();return a&&a.unshift(void 0),a}),this.label=e.label,this.id=e.id},template:'\n        <div class="form-group">\n            <label data-bind="text: label, attr: {\'for\': id}"></label>\n            <select class="form-control" id="test" data-bind="attr: {\'id\': id}, options: pool, optionsText: function (teammate) { return teammate ? teammate.name : \'-- None --\'; }, value: target"></select>\n            </div>\n        '})}()},function(e,a){"use strict";a.name="teammate-list",void function(){ko.components.register(a.name,{viewModel:function(e){var a=this;this.pool=e.pool,this.label=e.label,this.rendered=ko.pureComputed(function(){return _.map(a.pool(),function(e){return e.name}).join(", ")})},template:'\n        <div class="form-group">\n            <label data-bind="text: label"></label>\n            <input class="form-control" type="text" data-bind="value: rendered" />\n        </div>\n        '})}()},function(e,a){"use strict";a.name="role-toggle",void function(){ko.components.register(a.name,{viewModel:function(e){var a=this;_.extend(this,e),this.glyphs={glyphicon:!0},this.glyphs["glyphicon-"+e.icon]=!0,this.available=ko.pureComputed(function(){return _.contains(e.pool(),e.teammate)}),this.ideal=e.ideal?e.ideal:ko.observable(!1),this.styles={"role-toggle":!0,ideal:this.ideal,selected:ko.pureComputed(function(){return e.teammate.hasRole(e.role)}),available:ko.pureComputed(function(){return a.available()})},this.styles[e.icon]=!0},template:'\n        <span data-bind="\n            css: styles,\n            click: function () {\n                if ($data.observable() === teammate) {\n                    $data.observable(undefined);\n                } else {\n                    $data.observable(teammate);\n                }\n            }">\n            <span data-bind="css: $data.glyphs" class="glyphicon"></span><sup data-bind="text: $data.supertext"></sup>\n        </span>\n        '})}()},function(e,a){"use strict";a.name="role-static",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e),this.glyphs={glyphicon:!0},this.glyphs["glyphicon-"+e.icon]=!0,this.classes={},this.classes[e.classes]=!0},template:'\n        <span data-bind="\n            if: $data.teammate.hasRole($data.role),\n            css: $data.classes\n            ">\n            <span data-bind="css: $data.glyphs" class="glyphicon"></span><sup data-bind="text: $data.supertext"></sup>\n        </span>\n        '})}()},function(e,a){"use strict";a.name="death-role-static",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e)},template:'\n        <!-- ko component: { name: \'role-static\', params: {\n            teammate: teammate,\n            role: role,\n            supertext: supertext,\n            icon: "alert",\n            classes: "text-danger"\n        } } --><!-- /ko -->\n        '})}()},function(e,a){"use strict";a.name="observable-toggle",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e),this.glyphs={glyphicon:!0},this.glyphs["glyphicon-"+e.icon]=!0,this.css={"observable-toggle":!0,selected:e.observable},this.css[e.icon]=!0},template:'\n        <span data-bind="\n            css: $data.css,\n            click: function () {\n                $data.observable(!$data.observable());\n            }">\n            <span data-bind="css: $data.glyphs" class="glyphicon"></span><sup data-bind="text: $data.supertext"></sup>\n        </span>\n        '})}()},function(e,a){"use strict";a.name="teammate-name",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e)},template:'\n        <p class="form-control-static" data-bind="with: teammate"><span data-bind="text: name"></span></p>\n        '})}()},function(e,a){"use strict";a.name="teammate-row",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e)},template:'\n        <tr data-bind="css: {\'text-muted\': !teammate.is_recruited() }">\n            <td>\n                <a href="#view-profile" data-bind="click: function () { modal_target(teammate); }">\n                    <span data-bind="text: teammate.name"></span>\n                </a>\n            </td>\n            <td>\n                <!-- ko component: { name: \'observable-toggle\', params: {\n                    observable: teammate.is_recruited,\n                    icon: "ok",\n                    supertext: ""\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind="if: teammate.is_recruited">\n                <!-- ko component: { name: \'observable-toggle\', params: {\n                    observable: teammate.is_loyal,\n                    icon: "heart",\n                    supertext: ""\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <span data-bind="if: teammate.is_loyal">\n                <!-- ko component: { name: \'observable-toggle\', params: {\n                    observable: teammate.is_upgraded,\n                    icon: "circle-arrow-up",\n                    supertext: ""\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_1,\n                    pool: logic.approach_squadmate_pool_1,\n                    role: Role.ApproachSquadmate1,\n                    icon: "user",\n                    supertext: "1"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_2,\n                    pool: logic.approach_squadmate_pool_2,\n                    role: Role.ApproachSquadmate2,\n                    icon: "user",\n                    supertext: "2"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.vents_specialist,\n                    pool: logic.vents_specialist_pool,\n                    ideal: teammate.is_good_vent_specialist,\n                    role: Role.VentsSpecialist,\n                    icon: "star",\n                    supertext: ""\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.vents_fireteam_leader,\n                    pool: logic.vents_fireteam_leader_pool,\n                    ideal: teammate.is_good_vent_fireteam_leader,\n                    role: Role.VentsFireteamLeader,\n                    icon: "fire",\n                    supertext: ""\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_1,\n                    pool: logic.vents_squadmate_pool_1,\n                    role: Role.VentsSquadmate1,\n                    icon: "user",\n                    supertext: "1"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_2,\n                    pool: logic.vents_squadmate_pool_2,\n                    role: Role.VentsSquadmate2,\n                    icon: "user",\n                    supertext: "2"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_specialist,\n                    pool: logic.long_walk_specialist_pool,\n                    ideal: teammate.is_good_long_walk_specialist,\n                    role: Role.LongWalkSpecialist,\n                    icon: "star",\n                    supertext: ""\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_fireteam_leader,\n                    pool: logic.long_walk_fireteam_leader_pool,\n                    ideal: teammate.is_good_long_walk_fireteam_leader,\n                    role: Role.LongWalkFireteamLeader,\n                    icon: "fire",\n                    supertext: ""\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_escort,\n                    pool: logic.long_walk_escort_pool,\n                    role: Role.LongWalkEscort,\n                    icon: "heart-empty",\n                    supertext: ""\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_1,\n                    pool: logic.long_walk_squadmate_pool_1,\n                    role: Role.LongWalkSquadmate1,\n                    icon: "user",\n                    supertext: "1"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_2,\n                    pool: logic.long_walk_squadmate_pool_2,\n                    role: Role.LongWalkSquadmate2,\n                    icon: "user",\n                    supertext: "2"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_1,\n                    pool: logic.boss_squadmate_pool_1,\n                    role: Role.BossSquadmate1,\n                    icon: "user",\n                    supertext: "1"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'role-toggle\', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_2,\n                    pool: logic.boss_squadmate_pool_2,\n                    role: Role.BossSquadmate2,\n                    icon: "user",\n                    supertext: "2"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind="\n                    if: teammate.survives\n                    ">\n                    <span class="glyphicon glyphicon-ok-circle text-success"></span>\n                </span>\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.ApproachShieldsDeath,\n                    supertext: "Shield"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.ApproachArmorDeath,\n                    supertext: "Armour"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.ApproachWeaponDeath,\n                    supertext: "Weapon"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.VentsDeath,\n                    supertext: "Vents"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkSquadmateDeath,\n                    supertext: "LW Squadmate"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkFireteamLeaderDeath,\n                    supertext: "LW Leader"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkEscortDeath,\n                    supertext: "Escort"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.BossSquadmateDeath,\n                    supertext: "Boss Squadmate"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: \'death-role-static\', params: {\n                    teammate: teammate,\n                    role: Role.BossHoldingTheLineDeath,\n                    supertext: "HTL"\n                } } --><!-- /ko -->\n            </td>\n        </tr>\n        '})}()},function(e,a){"use strict";a.name="yes-no",void function(){ko.components.register(a.name,{viewModel:function(e){_.extend(this,e),this.value=ko.observable(ko.unwrap(e.value))},template:"\n        <p class=\"form-control-static\" data-bind=\"text: value() ? 'Yes' : 'No'\"></p>\n        "})}()},function(e,a){"use strict";a.name="priority-rank",void function(){ko.components.register(a.name,{viewModel:function(e){this.value=ko.unwrap(e.value)},template:'\n        <p class="form-control-static">\n            <span data-bind="if: value !== undefined">#<span data-bind="text: value"></span></span>\n            <span data-bind="if: value === undefined"><span class="text-muted">N/A</span></span>\n        </p>\n        '})}()},function(e,a,t){"use strict";var o=t(13),n=t(15),s=function(){function e(){this.logic=new o.Logic(this),this.ui=new n.UI(this)}return e}();a.Application=s},function(e,a,t){"use strict";var o=t(14),n=t(20),s=function(){function e(e){var a=this;this.normandy_has_armour=ko.pureComputed({read:function(){return _.find(a.pool(),"upgrade_unlocks_armour").is_upgraded()},write:function(e){_.find(a.pool(),"upgrade_unlocks_armour").is_upgraded(e)}}),this.normandy_has_shields=ko.pureComputed({read:function(){return _.find(a.pool(),"upgrade_unlocks_shields").is_upgraded()},write:function(e){_.find(a.pool(),"upgrade_unlocks_shields").is_upgraded(e)}}),this.normandy_has_weapon=ko.pureComputed({read:function(){return _.find(a.pool(),"upgrade_unlocks_weapon").is_upgraded()},write:function(e){_.find(a.pool(),"upgrade_unlocks_weapon").is_upgraded(e)}}),this.mission_delay=ko.pureComputed({read:function(){return a._mission_delay},write:function(e){e>=o.NormandyDelayOptions.None&&e<=o.NormandyDelayOptions.Many&&(a._mission_delay=e)}}),this.pool=ko.observableArray([]),this.recruited=ko.pureComputed(function(){return _.filter(a.pool(),function(e){return e.is_recruited()})}),this.loyal=ko.pureComputed(function(){return _.filter(a.pool(),function(e){return e.is_loyal()})}),this.upgraded=ko.pureComputed(function(){return _.filter(a.pool(),function(e){return e.is_upgraded()})}),this.all_recruited=ko.pureComputed({read:function(){return _.all(a.pool(),function(e){return e.is_recruited()})},write:function(e){_.each(a.pool(),function(a){a.is_recruited(e)})}}),this.all_loyal=ko.pureComputed({read:function(){return _.all(a.recruited(),function(e){return e.is_loyal()})},write:function(e){_.each(a.recruited(),function(a){a.is_loyal(e)})}}),this.all_upgraded=ko.pureComputed({read:function(){return _.all(a.loyal(),function(e){return e.is_upgraded()})},write:function(e){_.each(a.loyal(),function(a){a.is_upgraded(e)})}}),this.approach_squadmate_1=ko.observable(void 0),this.approach_squadmate_2=ko.observable(void 0),this.approach_squadmate_pool_1=ko.pureComputed(function(){var e=a.recruited();return e.length>=8?_.without(e,a.approach_squadmate_2()):void 0}),this.approach_squadmate_pool_2=ko.pureComputed(function(){var e=a.recruited();return e.length>=8?_.without(e,a.approach_squadmate_1()):void 0}),this.bindToPool(this.approach_squadmate_1,this.approach_squadmate_pool_1),this.bindToPool(this.approach_squadmate_2,this.approach_squadmate_pool_2),this.approach_evaluatable=ko.pureComputed(function(){return!(!a.approach_squadmate_1()||!a.approach_squadmate_2()||void 0===a.normandy_has_armour()||void 0===a.normandy_has_weapon()||void 0===a.normandy_has_shields())}),this.approach_shields_death=ko.pureComputed(function(){if(a.approach_evaluatable()&&!a.normandy_has_shields()){var e=_.chain(a.recruited()).without(a.approach_squadmate_1(),a.approach_squadmate_2()).filter("shield_death_priority").sortBy("shield_death_priority").value();return _.last(e)}}),this.approach_armour_death=ko.pureComputed(function(){if(a.approach_evaluatable()&&!a.normandy_has_armour()){var e=_.chain(a.recruited()).without(a.approach_squadmate_1(),a.approach_squadmate_2(),a.approach_shields_death()).filter("armour_death_priority").sortBy("armour_death_priority").value();return _.last(e)}}),this.approach_weapon_death=ko.pureComputed(function(){if(a.approach_evaluatable()&&!a.normandy_has_weapon()){var e=_.chain(a.recruited()).without(a.approach_squadmate_1(),a.approach_squadmate_2(),a.approach_shields_death(),a.approach_armour_death()).filter("weapon_death_priority").sortBy("weapon_death_priority").value();return _.last(e)}}),this.approach_survivors=ko.pureComputed(function(){return a.approach_evaluatable()?_.without(a.recruited(),a.approach_shields_death(),a.approach_armour_death(),a.approach_weapon_death()):void 0}),this.vents_specialist=ko.observable(void 0),this.vents_fireteam_leader=ko.observable(void 0),this.vents_squadmate_1=ko.observable(void 0),this.vents_squadmate_2=ko.observable(void 0),this.vents_specialist_pool=ko.pureComputed(function(){var e=a.approach_survivors();return e?_.without(_.filter(e,"is_vent_candidate"),a.vents_fireteam_leader(),a.vents_squadmate_1(),a.vents_squadmate_2()):void 0}),this.vents_fireteam_leader_pool=ko.pureComputed(function(){var e=a.approach_survivors();return e?_.without(_.filter(e,"is_leader_candidate"),a.vents_specialist(),a.vents_squadmate_1(),a.vents_squadmate_2()):void 0}),this.vents_squadmate_pool_1=ko.pureComputed(function(){var e=a.approach_survivors();return e?_.without(e,a.vents_specialist(),a.vents_fireteam_leader(),a.vents_squadmate_2()):void 0}),this.vents_squadmate_pool_2=ko.pureComputed(function(){var e=a.approach_survivors();return e?_.without(e,a.vents_specialist(),a.vents_fireteam_leader(),a.vents_squadmate_1()):void 0}),this.bindToPool(this.vents_specialist,this.vents_specialist_pool),this.bindToPool(this.vents_fireteam_leader,this.vents_fireteam_leader_pool),this.bindToPool(this.vents_squadmate_1,this.vents_squadmate_pool_1),this.bindToPool(this.vents_squadmate_2,this.vents_squadmate_pool_2),this.vents_evaluatable=ko.pureComputed(function(){return!!(a.vents_specialist()&&a.vents_fireteam_leader()&&a.vents_squadmate_1()&&a.vents_squadmate_2())}),this.vents_death=ko.pureComputed(function(){if(a.vents_evaluatable()){var e=a.vents_specialist(),t=a.vents_fireteam_leader();if(!e.is_good_vent_specialist()||!t.is_good_vent_fireteam_leader())return e}}),this.vents_survivors=ko.pureComputed(function(){return a.vents_evaluatable()?_.without(a.approach_survivors(),a.vents_death()):void 0}),this.long_walk_specialist=ko.observable(void 0),this.long_walk_fireteam_leader=ko.observable(void 0),this.long_walk_escort=ko.observable(void 0),this.long_walk_squadmate_1=ko.observable(void 0),this.long_walk_squadmate_2=ko.observable(void 0),this.long_walk_specialist_pool=ko.pureComputed(function(){var e=a.vents_survivors();return e?_.without(_.filter(e,"is_bubble_candidate"),a.long_walk_fireteam_leader(),a.long_walk_escort(),a.long_walk_squadmate_1(),a.long_walk_squadmate_2()):void 0}),this.long_walk_fireteam_leader_pool=ko.pureComputed(function(){var e=a.vents_survivors();return e?_.without(_.filter(e,"is_leader_candidate"),a.long_walk_specialist(),a.long_walk_escort(),a.long_walk_squadmate_1(),a.long_walk_squadmate_2()):void 0}),this.long_walk_escort_pool=ko.pureComputed(function(){var e=a.vents_survivors();return e?_.without(_.filter(e,"is_escort_candidate"),a.long_walk_specialist(),a.long_walk_fireteam_leader(),a.long_walk_squadmate_1(),a.long_walk_squadmate_2()):void 0}),this.long_walk_squadmate_pool_1=ko.pureComputed(function(){var e=a.vents_survivors();return e?_.without(e,a.long_walk_specialist(),a.long_walk_fireteam_leader(),a.long_walk_escort(),a.long_walk_squadmate_2()):void 0}),this.long_walk_squadmate_pool_2=ko.pureComputed(function(){var e=a.vents_survivors();return e?_.without(e,a.long_walk_specialist(),a.long_walk_fireteam_leader(),a.long_walk_escort(),a.long_walk_squadmate_1()):void 0}),this.bindToPool(this.long_walk_specialist,this.long_walk_specialist_pool),this.bindToPool(this.long_walk_fireteam_leader,this.long_walk_fireteam_leader_pool),this.bindToPool(this.long_walk_escort,this.long_walk_escort_pool),this.bindToPool(this.long_walk_squadmate_1,this.long_walk_squadmate_pool_1),this.bindToPool(this.long_walk_squadmate_2,this.long_walk_squadmate_pool_2),this.long_walk_evaluatable=ko.pureComputed(function(){return!!(a.long_walk_specialist()&&a.long_walk_fireteam_leader()&&a.long_walk_squadmate_1()&&a.long_walk_squadmate_2())}),this.long_walk_escort_death=ko.pureComputed(function(){if(a.long_walk_evaluatable()){var e=a.long_walk_escort();if(e&&!e.is_good_escort())return e}}),this.long_walk_squadmate_death=ko.pureComputed(function(){if(a.long_walk_evaluatable()){var e=a.long_walk_specialist(),t=a.long_walk_squadmate_1(),o=a.long_walk_squadmate_2();if(!e.is_good_long_walk_specialist()){var n=_.sortBy([t,o],"long_walk_death_priority");return _.last(n)}}}),this.long_walk_fireteam_leader_death=ko.pureComputed(function(){if(a.long_walk_evaluatable()){var e=a.long_walk_fireteam_leader();if(!e.is_good_long_walk_fireteam_leader()){var t=_.without(a.vents_survivors(),a.long_walk_fireteam_leader(),a.long_walk_escort(),a.long_walk_specialist(),a.long_walk_squadmate_1(),a.long_walk_squadmate_2());if(0===t.length&&a.long_walk_squadmate_death())return;return e}}}),this.long_walk_survivors=ko.pureComputed(function(){var e=a.vents_survivors();return a.long_walk_evaluatable()?_.without(e,a.long_walk_escort_death(),a.long_walk_squadmate_death(),a.long_walk_fireteam_leader_death()):void 0}),this.boss_squadmate_1=ko.observable(void 0),this.boss_squadmate_2=ko.observable(void 0),this.boss_squadmate_pool_1=ko.pureComputed(function(){var e=a.long_walk_survivors();return e?_.without(e,a.long_walk_escort(),a.boss_squadmate_2()):void 0}),this.boss_squadmate_pool_2=ko.pureComputed(function(){var e=a.long_walk_survivors();return e?_.without(e,a.long_walk_escort(),a.boss_squadmate_1()):void 0}),this.bindToPool(this.boss_squadmate_1,this.boss_squadmate_pool_1),this.bindToPool(this.boss_squadmate_2,this.boss_squadmate_pool_2),this.boss_evaluatable=ko.pureComputed(function(){return!(!a.boss_squadmate_1()||!a.boss_squadmate_2())}),this.boss_squadmate_deaths=ko.pureComputed(function(){if(a.boss_evaluatable()){var e=[],t=a.boss_squadmate_1(),o=a.boss_squadmate_2();return t.is_good_boss_squadmate()||e.push(t),o.is_good_boss_squadmate()||e.push(o),e}}),this.boss_hold_the_line_candidates=ko.pureComputed(function(){var e=a.long_walk_survivors();return a.boss_evaluatable()?_.without(e,a.long_walk_escort(),a.boss_squadmate_1(),a.boss_squadmate_2()):void 0}),this.boss_hold_the_line_total=ko.pureComputed(function(){var e=a.boss_hold_the_line_candidates();return e?_.sum(_.map(e,function(e){return e.hold_the_line_score()})):void 0}),this.boss_hold_the_line_rating=ko.pureComputed(function(){var e=a.boss_hold_the_line_candidates(),t=a.boss_hold_the_line_total();return e?e.length>0?t/e.length:0:void 0}),this.boss_hold_the_line_death_count=ko.pureComputed(function(){var e=a.boss_hold_the_line_rating(),t=a.boss_hold_the_line_candidates();return void 0!==e?2>e?t.length>=5?e>=1.5?1:e>=.5?2:3:4===t.length?e>=1?1:e>=.5?2:e>0?3:4:3===t.length?e>=1?1:e>0?2:3:2===t.length?e>0?1:2:1:0:void 0}),this.boss_hold_the_line_deaths=ko.pureComputed(function(){var e=a.boss_hold_the_line_death_count(),t=a.boss_hold_the_line_candidates();return void 0!==e?0===e?[]:_.sortBy(t,function(e){return e.hold_the_line_death_priority+(e.is_loyal()?0:100)}).slice(-e):void 0}),this.boss_survivors=ko.pureComputed(function(){var e=a.long_walk_survivors();return a.boss_evaluatable()?_.without.apply(_,[e].concat(a.boss_hold_the_line_deaths(),a.boss_squadmate_deaths())):void 0}),this.summary_defence_reporter=ko.pureComputed(function(){var e=a.boss_hold_the_line_candidates();return e?_.last(_.sortBy(e,"defence_report_priority")):void 0}),this.summary_advocates_keeping_base=ko.pureComputed(function(){var e=a.boss_squadmate_1(),t=a.boss_squadmate_2();return e&&t?_.last(_.sortBy([e,t],"keep_base_priority")):void 0}),this.summary_advocates_destroying_base=ko.pureComputed(function(){var e=a.boss_squadmate_1(),t=a.boss_squadmate_2();return e&&t?_.last(_.sortBy([e,t],"destroy_base_priority")):void 0}),this.summary_shepard_lives=ko.pureComputed(function(){return a.boss_survivors().length>=2}),this.summary_catches_shepard=ko.pureComputed(function(){var e=a.boss_survivors(),t=a.boss_squadmate_1(),o=a.boss_squadmate_2(),n=a.summary_shepard_lives();return n&&e&&e.length?(e=_.sortBy(e,function(e){var a=e===t||e===o;return e.cutscene_rescue_priority+(a?100:0)}),_.last(e)):void 0}),this.pool([new n.Teammate(this,o.HenchmanIDs.Garrus,"Garrus Vakarian",!0,3,5,0,8,11,10,3,11,8,0,!1,!1,!0,!1,!0,!0,!1,!0,!1,!1,!0),new n.Teammate(this,o.HenchmanIDs.Grunt,"Grunt",!1,3,0,0,6,9,8,5,9,12,0,!1,!1,!1,!1,!0,!1,!1,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Jack,"Jack",!0,0,8,12,5,8,11,2,12,0,8,!1,!0,!1,!1,!0,!1,!0,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Jacob,"Jacob Taylor",!0,1,6,0,0,0,6,8,8,0,10,!1,!1,!0,!1,!0,!0,!0,!0,!0,!1,!1),new n.Teammate(this,o.HenchmanIDs.Kasumi,"Kasumi Goto",!1,0,9,0,12,0,3,10,4,0,9,!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Legion,"Legion",!1,1,3,0,11,0,9,4,10,9,0,!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Miranda,"Miranda Lawson",!0,1,7,0,0,0,-1,12,2,13,0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Mordin,"Mordin Solus",!0,0,11,0,0,0,5,7,6,10,0,!1,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Samara,"Samara",!1,1,4,0,4,7,7,6,7,0,12,!1,!0,!1,!1,!0,!1,!0,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Tali,"Tali'zorah",!1,0,10,0,10,0,4,9,5,0,11,!0,!1,!1,!1,!0,!0,!1,!0,!1,!0,!1),new n.Teammate(this,o.HenchmanIDs.Thane,"Thane",!1,1,2,0,9,12,12,1,13,0,13,!1,!1,!1,!1,!0,!0,!0,!0,!1,!1,!1),new n.Teammate(this,o.HenchmanIDs.Zaeed,"Zaeed Masani",!1,3,1,0,7,10,2,11,3,11,0,!1,!1,!1,!1,!0,!1,!1,!0,!1,!1,!1)]);var t=[this.approach_squadmate_1,this.approach_squadmate_2,this.vents_specialist,this.vents_fireteam_leader,this.vents_squadmate_1,this.vents_squadmate_2,this.long_walk_specialist,this.long_walk_fireteam_leader,this.long_walk_escort,this.long_walk_squadmate_1,this.long_walk_squadmate_2,this.boss_squadmate_1,this.boss_squadmate_2];this.serialised=ko.pureComputed({read:function(){var e=_.map(a.pool(),function(e){return((e.is_recruited()?1:0)+(e.is_loyal()?2:0)+(e.is_upgraded()?4:0)).toString(16)}).join("");return e+=_.map(t,function(e){var a=e();return(a?a.id:0).toString(16)}).join("")},write:function(e){for(var o=a.pool(),n=0,s=o.length;s>n;++n){var i=parseInt(e[n],16);o[n].is_recruited(!!(1&i)),o[n].is_loyal(!!(2&i)),o[n].is_upgraded(!!(4&i))}_.each(t,function(a,t){var n=parseInt(e[o.length+t],16);a(n>0?_.find(o,function(e){return e.id===n}):void 0)})}})}return e.prototype.bindToPool=function(e,a){a.subscribe(function(a){var t=e();a?t&&!_.contains(a,t)&&e(void 0):e(void 0)})},e}();a.Logic=s},function(e,a){"use strict";!function(e){e[e.Garrus=1]="Garrus",e[e.Grunt=2]="Grunt",e[e.Jack=3]="Jack",e[e.Jacob=4]="Jacob",e[e.Kasumi=5]="Kasumi",e[e.Legion=6]="Legion",e[e.Miranda=7]="Miranda",e[e.Mordin=8]="Mordin",e[e.Morinth=9]="Morinth",e[e.Samara=10]="Samara",e[e.Tali=11]="Tali",e[e.Thane=12]="Thane",e[e.Zaeed=13]="Zaeed"}(a.HenchmanIDs||(a.HenchmanIDs={}));a.HenchmanIDs;!function(e){e[e.None=0]="None",e[e.Few=1]="Few",e[e.Many=2]="Many"}(a.NormandyDelayOptions||(a.NormandyDelayOptions={}));a.NormandyDelayOptions;!function(e){e[e.ApproachSquadmate1=0]="ApproachSquadmate1",e[e.ApproachSquadmate2=1]="ApproachSquadmate2",e[e.ApproachShieldsDeath=2]="ApproachShieldsDeath",e[e.ApproachArmorDeath=3]="ApproachArmorDeath",e[e.ApproachWeaponDeath=4]="ApproachWeaponDeath",e[e.VentsSquadmate1=5]="VentsSquadmate1",e[e.VentsSquadmate2=6]="VentsSquadmate2",e[e.VentsSpecialist=7]="VentsSpecialist",e[e.VentsFireteamLeader=8]="VentsFireteamLeader",e[e.VentsDeath=9]="VentsDeath",e[e.LongWalkSpecialist=10]="LongWalkSpecialist",e[e.LongWalkFireteamLeader=11]="LongWalkFireteamLeader",e[e.LongWalkEscort=12]="LongWalkEscort",e[e.LongWalkSquadmate1=13]="LongWalkSquadmate1",e[e.LongWalkSquadmate2=14]="LongWalkSquadmate2",e[e.LongWalkSquadmateDeath=15]="LongWalkSquadmateDeath",e[e.LongWalkEscortDeath=16]="LongWalkEscortDeath",e[e.LongWalkFireteamLeaderDeath=17]="LongWalkFireteamLeaderDeath",e[e.BossSquadmate1=18]="BossSquadmate1",e[e.BossSquadmate2=19]="BossSquadmate2",e[e.BossHoldingTheLine=20]="BossHoldingTheLine",e[e.BossSquadmateDeath=21]="BossSquadmateDeath",e[e.BossHoldingTheLineDeath=22]="BossHoldingTheLineDeath"}(a.Role||(a.Role={}));a.Role;!function(e){e[e.AllSurvived=0]="AllSurvived",e[e.HalfSurvived=1]="HalfSurvived",e[e.AllDied=2]="AllDied"}(a.SummaryCrewSurvivalOptions||(a.SummaryCrewSurvivalOptions={}));a.SummaryCrewSurvivalOptions},function(e,a){"use strict";var t=function(){function e(e){this.app=e,this.teammate=ko.observable(void 0),this.share=ko.observable(!1),window.location.search.length>2&&this.app.logic.serialised(window.location.search.substr(1))}return e.prototype.showRankPopover=function(e,a,t){var o=$(e.target),n=$("<ol />").addClass("rank-popover-list");_.chain(this.app.logic.pool()).filter(function(e){return!!e[a]()}).sortBy(function(e){return e[a]()}).each(function(e){n.append($("<li />").append(e.name))}).value(),o.popover({trigger:"focus",title:t,html:!0,content:n}).on("hidden.bs.popover",function(){o.popover("destroy")}).popover("show")},e}();a.UI=t},function(e,a){},,,,function(e,a,t){"use strict";var o=t(14),n=function(){function e(e,a,t,n,s,i,r,l,d,u,p,m,c,h,v,k,g,b,f,w,y,q,R,S,T){var C=this;this.logic=e,this.id=a,this.name=t,this.is_essential=n,this.hold_the_line_baseline_score=s,this.hold_the_line_death_priority=i,this.armour_death_priority=r,this.shield_death_priority=l,this.weapon_death_priority=d,this.long_walk_death_priority=u,this.cutscene_rescue_priority=p,this.defence_report_priority=m,this.keep_base_priority=c,this.destroy_base_priority=h,
this.is_vent_ideal_candidate=v,this.is_bubble_ideal_candidate=k,this.is_leader_ideal_candidate=g,this.is_super_leader=b,this.is_escort_candidate=f,this.is_vent_candidate=w,this.is_bubble_candidate=y,this.is_leader_candidate=q,this.upgrade_unlocks_armour=R,this.upgrade_unlocks_shields=S,this.upgrade_unlocks_weapon=T,this.is_recruited=ko.observable(this.is_essential),this.is_loyal=ko.observable(!1),this.is_upgraded=ko.observable(!1),this.is_recruited.subscribe(function(e){e||(C.is_essential&&C.is_recruited(!0),C.is_loyal(!1),C.is_upgraded(!1))}),this.is_loyal.subscribe(function(e){e?C.is_recruited()||C.is_loyal(!1):C.is_upgraded(!1)}),this.is_upgraded.subscribe(function(e){e&&(C.is_loyal()||C.is_upgraded(!1))}),this.is_good_vent_specialist=ko.pureComputed(function(){return C.is_loyal()&&C.is_vent_ideal_candidate}),this.is_good_vent_fireteam_leader=ko.pureComputed(function(){return C.is_loyal()&&C.is_leader_ideal_candidate}),this.is_good_escort=ko.pureComputed(function(){return C.is_loyal()}),this.is_good_long_walk_specialist=ko.pureComputed(function(){return C.is_loyal()&&C.is_bubble_ideal_candidate}),this.is_good_long_walk_fireteam_leader=ko.pureComputed(function(){return C.is_leader_ideal_candidate&&(C.is_loyal()||C.is_super_leader)}),this.is_good_boss_squadmate=ko.pureComputed(function(){return C.is_loyal()}),this.hold_the_line_score=ko.pureComputed(function(){return C.hold_the_line_baseline_score+(C.is_loyal()?1:0)}),this.roles=ko.observableArray([]),this.syncRoleToObservable(e.approach_squadmate_1,o.Role.ApproachSquadmate1).syncRoleToObservable(e.approach_squadmate_2,o.Role.ApproachSquadmate2).syncRoleToObservable(e.approach_armour_death,o.Role.ApproachArmorDeath).syncRoleToObservable(e.approach_shields_death,o.Role.ApproachShieldsDeath).syncRoleToObservable(e.approach_weapon_death,o.Role.ApproachWeaponDeath).syncRoleToObservable(e.vents_specialist,o.Role.VentsSpecialist).syncRoleToObservable(e.vents_fireteam_leader,o.Role.VentsFireteamLeader).syncRoleToObservable(e.vents_squadmate_1,o.Role.VentsSquadmate1).syncRoleToObservable(e.vents_squadmate_2,o.Role.VentsSquadmate2).syncRoleToObservable(e.vents_death,o.Role.VentsDeath).syncRoleToObservable(e.long_walk_specialist,o.Role.LongWalkSpecialist).syncRoleToObservable(e.long_walk_fireteam_leader,o.Role.LongWalkFireteamLeader).syncRoleToObservable(e.long_walk_escort,o.Role.LongWalkEscort).syncRoleToObservable(e.long_walk_squadmate_1,o.Role.LongWalkSquadmate1).syncRoleToObservable(e.long_walk_squadmate_2,o.Role.LongWalkSquadmate2).syncRoleToObservable(e.long_walk_escort_death,o.Role.LongWalkEscortDeath).syncRoleToObservable(e.long_walk_squadmate_death,o.Role.LongWalkSquadmateDeath).syncRoleToObservable(e.long_walk_fireteam_leader_death,o.Role.LongWalkFireteamLeaderDeath).syncRoleToObservable(e.boss_squadmate_1,o.Role.BossSquadmate1).syncRoleToObservable(e.boss_squadmate_2,o.Role.BossSquadmate2).syncRoleToObservableSet(e.boss_squadmate_deaths,o.Role.BossSquadmateDeath).syncRoleToObservableSet(e.boss_hold_the_line_candidates,o.Role.BossHoldingTheLine).syncRoleToObservableSet(e.boss_hold_the_line_deaths,o.Role.BossHoldingTheLineDeath),this.survives=ko.pureComputed(function(){var a=e.boss_survivors();return a?_.contains(a,C):void 0}),this.armour_death_priority_rank=this.deriveRank("armour_death_priority"),this.shield_death_priority_rank=this.deriveRank("shield_death_priority"),this.weapon_death_priority_rank=this.deriveRank("weapon_death_priority"),this.long_walk_death_priority_rank=this.deriveRank("long_walk_death_priority"),this.cutscene_rescue_priority_rank=this.deriveRank("cutscene_rescue_priority"),this.defence_report_priority_rank=this.deriveRank("defence_report_priority"),this.keep_base_priority_rank=this.deriveRank("keep_base_priority"),this.destroy_base_priority_rank=this.deriveRank("destroy_base_priority"),this.hold_the_line_death_priority_rank=this.deriveRank("hold_the_line_death_priority")}return e.prototype.hasRole=function(e){return this.roles.indexOf(e)>-1},e.prototype.deriveRank=function(e){var a=this;return ko.pureComputed(function(){var t=a.logic.pool();return a[e]>0?t.length-_.indexOf(_.sortBy(t,e),a):void 0})},e.prototype.switchRole=function(e,a){a?this.hasRole(e)||this.roles.push(e):this.roles.remove(e)},e.prototype.syncRoleToObservable=function(e,a){var t=this;return e.subscribe(function(e){return t.switchRole(a,e&&e.id===t.id)}),this},e.prototype.syncRoleToObservableSet=function(e,a){var t=this;return e.subscribe(function(e){return t.switchRole(a,_.contains(e,t))}),this},e}();a.Teammate=n}]);
//# sourceMappingURL=bundle.1.0.0.js.map