{"version":3,"sources":["webpack:///bundle.1.0.0.js","webpack:///webpack/bootstrap d1e67b0324e3643ea906","webpack:///./source/typescript/app.ts","webpack:///./source/typescript/Knockout/Bindings/Modal.ts","webpack:///./source/typescript/Knockout/Components/PickTeammate.ts","webpack:///./source/typescript/Knockout/Components/TeammateList.ts","webpack:///./source/typescript/Knockout/Components/RoleToggle.ts","webpack:///./source/typescript/Knockout/Components/RoleStatic.ts","webpack:///./source/typescript/Knockout/Components/DeathRoleStatic.ts","webpack:///./source/typescript/Knockout/Components/ObservableToggle.ts","webpack:///./source/typescript/Knockout/Components/TeammateName.ts","webpack:///./source/typescript/Knockout/Components/TeammateRow.ts","webpack:///./source/typescript/Knockout/Components/YesNo.ts","webpack:///./source/typescript/Knockout/Components/PriorityRank.ts","webpack:///./source/typescript/App/Application.ts","webpack:///./source/typescript/App/ME2/Logic.ts","webpack:///./source/typescript/App/constants.ts","webpack:///./source/typescript/App/ME2/UI.ts","webpack:///./source/typescript/App/ME2/Teammate.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Modal_1","PickTeammate_1","TeammateList_1","RoleToggle_1","RoleStatic_1","DeathRoleStatic_1","ObservableToggle_1","TeammateName_1","TeammateRow_1","YesNo_1","PriorityRank_1","Application_1","constants_1","name","join","_","extend","window","Application","Role","ko","bindingHandlers","init","element","value_accessor","all_bindings_accessor","data","context","$element","$","modal","show","utils","domNodeDisposal","addDisposeCallback","update","value","components","register","viewModel","params","this","target","pool","pureComputed","candidates","unshift","undefined","label","template","_this","rendered","map","teammate","glyphs","glyphicon","icon","available","contains","ideal","observable","styles","role-toggle","selected","hasRole","role","classes","css","observable-toggle","unwrap","Logic_1","UI_1","logic","Logic","ui","UI","Teammate_1","app","normandy_has_armour","read","find","is_upgraded","write","has_armour","normandy_has_shields","has_shields","normandy_has_weapon","has_weapon","mission_delay","_mission_delay","NormandyDelayOptions","None","Many","observableArray","recruited","filter","is_recruited","loyal","is_loyal","upgraded","all_recruited","all","each","all_loyal","all_upgraded","approach_squadmate_1","approach_squadmate_2","approach_squadmate_pool_1","length","without","approach_squadmate_pool_2","bindToPool","approach_evaluatable","approach_shields_death","chain","sortBy","last","approach_armour_death","approach_weapon_death","approach_survivors","vents_specialist","vents_fireteam_leader","vents_squadmate_1","vents_squadmate_2","vents_specialist_pool","vents_fireteam_leader_pool","vents_squadmate_pool_1","vents_squadmate_pool_2","vents_evaluatable","vents_death","specialist","leader","is_good_vent_specialist","is_good_vent_fireteam_leader","vents_survivors","long_walk_specialist","long_walk_fireteam_leader","long_walk_escort","long_walk_squadmate_1","long_walk_squadmate_2","long_walk_specialist_pool","long_walk_fireteam_leader_pool","long_walk_escort_pool","long_walk_squadmate_pool_1","long_walk_squadmate_pool_2","long_walk_evaluatable","long_walk_escort_death","escort","is_good_escort","long_walk_squadmate_death","squadmate_1","squadmate_2","is_good_long_walk_specialist","long_walk_fireteam_leader_death","is_good_long_walk_fireteam_leader","long_walk_fireteam_followers","long_walk_survivors","boss_squadmate_1","boss_squadmate_2","boss_squadmate_pool_1","boss_squadmate_pool_2","boss_evaluatable","boss_squadmate_deaths","deaths","is_good_boss_squadmate","push","boss_hold_the_line_candidates","boss_hold_the_line_total","sum","hold_the_line_score","boss_hold_the_line_rating","total","boss_hold_the_line_death_count","rating","boss_hold_the_line_deaths","death_count","hold_the_line_death_priority","slice","boss_survivors","apply","concat","summary_defence_reporter","summary_advocates_keeping_base","s1","s2","summary_advocates_destroying_base","summary_shepard_lives","summary_catches_shepard","was_squadmate","cutscene_rescue_priority","Teammate","HenchmanIDs","Garrus","Grunt","Jack","Jacob","Kasumi","Legion","Miranda","Mordin","Samara","Tali","Thane","Zaeed","serialisables","serialised","toString","i","l","flags","parseInt","index","prototype","subscribe","SummaryCrewSurvivalOptions","share","location","search","substr","showRankPopover","event","field","title","$target","$content","addClass","append","popover","trigger","html","content","on","is_essential","hold_the_line_baseline_score","armour_death_priority","shield_death_priority","weapon_death_priority","long_walk_death_priority","defence_report_priority","keep_base_priority","destroy_base_priority","is_vent_ideal_candidate","is_bubble_ideal_candidate","is_leader_ideal_candidate","is_super_leader","is_escort_candidate","is_vent_candidate","is_bubble_candidate","is_leader_candidate","upgrade_unlocks_armour","upgrade_unlocks_shields","upgrade_unlocks_weapon","roles","syncRoleToObservable","ApproachSquadmate1","ApproachSquadmate2","ApproachArmorDeath","ApproachShieldsDeath","ApproachWeaponDeath","VentsSpecialist","VentsFireteamLeader","VentsSquadmate1","VentsSquadmate2","VentsDeath","LongWalkSpecialist","LongWalkFireteamLeader","LongWalkEscort","LongWalkSquadmate1","LongWalkSquadmate2","LongWalkEscortDeath","LongWalkSquadmateDeath","LongWalkFireteamLeaderDeath","BossSquadmate1","BossSquadmate2","syncRoleToObservableSet","BossSquadmateDeath","BossHoldingTheLine","BossHoldingTheLineDeath","survives","armour_death_priority_rank","deriveRank","shield_death_priority_rank","weapon_death_priority_rank","long_walk_death_priority_rank","cutscene_rescue_priority_rank","defence_report_priority_rank","keep_base_priority_rank","destroy_base_priority_rank","hold_the_line_death_priority_rank","indexOf","switchRole","condition","remove","teammates"],"mappings":"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","file":"bundle.1.0.0.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/cdn/bundle/assets\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Modal_1 = __webpack_require__(1);\n\tvar PickTeammate_1 = __webpack_require__(2);\n\tvar TeammateList_1 = __webpack_require__(3);\n\tvar RoleToggle_1 = __webpack_require__(4);\n\tvar RoleStatic_1 = __webpack_require__(5);\n\tvar DeathRoleStatic_1 = __webpack_require__(6);\n\tvar ObservableToggle_1 = __webpack_require__(7);\n\tvar TeammateName_1 = __webpack_require__(8);\n\tvar TeammateRow_1 = __webpack_require__(9);\n\tvar YesNo_1 = __webpack_require__(10);\n\tvar PriorityRank_1 = __webpack_require__(11);\n\tvar Application_1 = __webpack_require__(12);\n\tvar constants_1 = __webpack_require__(14);\n\t__webpack_require__(16);\n\tvoid ([\n\t    Modal_1.name,\n\t    PickTeammate_1.name,\n\t    TeammateList_1.name,\n\t    RoleToggle_1.name,\n\t    RoleStatic_1.name,\n\t    DeathRoleStatic_1.name,\n\t    ObservableToggle_1.name,\n\t    TeammateName_1.name,\n\t    TeammateRow_1.name,\n\t    YesNo_1.name,\n\t    PriorityRank_1.name\n\t].join(\",\"));\n\t_.extend(window, {\n\t    Application: Application_1.Application,\n\t    Role: constants_1.Role\n\t});\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"modal\";\n\tvoid ((function () {\n\t    ko.bindingHandlers[exports.name] = {\n\t        init: function (element, value_accessor, all_bindings_accessor, data, context) {\n\t            var $element = $(element);\n\t            $element.modal({\n\t                show: false\n\t            });\n\t            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n\t                $element.modal(\"destroy\");\n\t            });\n\t        },\n\t        update: function (element, value_accessor, all_bindings_accessor, data, context) {\n\t            var value = value_accessor();\n\t            var $element = $(element);\n\t            if (value) {\n\t                $element.modal(\"show\");\n\t            }\n\t            else {\n\t                $element.modal(\"hide\");\n\t            }\n\t        }\n\t    };\n\t})());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"pick-teammate\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            this.target = params.target;\n\t            this.pool = ko.pureComputed(function () {\n\t                var candidates = params.pool();\n\t                if (candidates) {\n\t                    candidates.unshift(undefined);\n\t                }\n\t                return candidates;\n\t            });\n\t            this.label = params.label;\n\t            this.id = params.id;\n\t        },\n\t        template: \"\\n        <div class=\\\"form-group\\\">\\n            <label data-bind=\\\"text: label, attr: {'for': id}\\\"></label>\\n            <select class=\\\"form-control\\\" id=\\\"test\\\" data-bind=\\\"attr: {'id': id}, options: pool, optionsText: function (teammate) { return teammate ? teammate.name : '-- None --'; }, value: target\\\"></select>\\n            </div>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-list\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            var _this = this;\n\t            this.pool = params.pool;\n\t            this.label = params.label;\n\t            this.rendered = ko.pureComputed(function () {\n\t                return _.map(_this.pool(), function (teammate) {\n\t                    return teammate.name;\n\t                }).join(\", \");\n\t            });\n\t        },\n\t        template: \"\\n        <div class=\\\"form-group\\\">\\n            <label data-bind=\\\"text: label\\\"></label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" data-bind=\\\"value: rendered\\\" />\\n        </div>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"role-toggle\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            var _this = this;\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t            this.available = ko.pureComputed(function () {\n\t                return _.contains(params.pool(), params.teammate);\n\t            });\n\t            this.ideal = params.ideal ? params.ideal : ko.observable(false);\n\t            this.styles = {\n\t                \"role-toggle\": true,\n\t                \"ideal\": this.ideal,\n\t                \"selected\": ko.pureComputed(function () { return params.teammate.hasRole(params.role); }),\n\t                \"available\": ko.pureComputed(function () { return _this.available(); })\n\t            };\n\t            this.styles[params.icon] = true;\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            css: styles,\\n            click: function () {\\n                if ($data.observable() === teammate) {\\n                    $data.observable(undefined);\\n                } else {\\n                    $data.observable(teammate);\\n                }\\n            }\\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"role-static\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t            this.classes = {};\n\t            this.classes[params.classes] = true;\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            if: $data.teammate.hasRole($data.role),\\n            css: $data.classes\\n            \\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"death-role-static\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <!-- ko component: { name: 'role-static', params: {\\n            teammate: teammate,\\n            role: role,\\n            supertext: supertext,\\n            icon: \\\"alert\\\",\\n            classes: \\\"text-danger\\\"\\n        } } --><!-- /ko -->\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"observable-toggle\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t            this.css = {\n\t                \"observable-toggle\": true,\n\t                \"selected\": params.observable\n\t            };\n\t            this.css[params.icon] = true;\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            css: $data.css,\\n            click: function () {\\n                $data.observable(!$data.observable());\\n            }\\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-name\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\" data-bind=\\\"with: teammate\\\"><span data-bind=\\\"text: name\\\"></span></p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-row\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <tr data-bind=\\\"css: {'text-muted': !teammate.is_recruited() }\\\">\\n            <td>\\n                <a href=\\\"#view-profile\\\" data-bind=\\\"click: function () { modal_target(teammate); }\\\">\\n                    <span data-bind=\\\"text: teammate.name\\\"></span>\\n                </a>\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_recruited,\\n                    icon: \\\"ok\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <span data-bind=\\\"if: teammate.is_recruited\\\">\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_loyal,\\n                    icon: \\\"heart\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                </span>\\n            </td>\\n            <td>\\n                <span data-bind=\\\"if: teammate.is_loyal\\\">\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_upgraded,\\n                    icon: \\\"circle-arrow-up\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                </span>\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.approach_squadmate_1,\\n                    pool: logic.approach_squadmate_pool_1,\\n                    role: Role.ApproachSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.approach_squadmate_2,\\n                    pool: logic.approach_squadmate_pool_2,\\n                    role: Role.ApproachSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_specialist,\\n                    pool: logic.vents_specialist_pool,\\n                    ideal: teammate.is_good_vent_specialist,\\n                    role: Role.VentsSpecialist,\\n                    icon: \\\"star\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_fireteam_leader,\\n                    pool: logic.vents_fireteam_leader_pool,\\n                    ideal: teammate.is_good_vent_fireteam_leader,\\n                    role: Role.VentsFireteamLeader,\\n                    icon: \\\"fire\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_squadmate_1,\\n                    pool: logic.vents_squadmate_pool_1,\\n                    role: Role.VentsSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_squadmate_2,\\n                    pool: logic.vents_squadmate_pool_2,\\n                    role: Role.VentsSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_specialist,\\n                    pool: logic.long_walk_specialist_pool,\\n                    ideal: teammate.is_good_long_walk_specialist,\\n                    role: Role.LongWalkSpecialist,\\n                    icon: \\\"star\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_fireteam_leader,\\n                    pool: logic.long_walk_fireteam_leader_pool,\\n                    ideal: teammate.is_good_long_walk_fireteam_leader,\\n                    role: Role.LongWalkFireteamLeader,\\n                    icon: \\\"fire\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_escort,\\n                    pool: logic.long_walk_escort_pool,\\n                    role: Role.LongWalkEscort,\\n                    icon: \\\"heart-empty\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_squadmate_1,\\n                    pool: logic.long_walk_squadmate_pool_1,\\n                    role: Role.LongWalkSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_squadmate_2,\\n                    pool: logic.long_walk_squadmate_pool_2,\\n                    role: Role.LongWalkSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.boss_squadmate_1,\\n                    pool: logic.boss_squadmate_pool_1,\\n                    role: Role.BossSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.boss_squadmate_2,\\n                    pool: logic.boss_squadmate_pool_2,\\n                    role: Role.BossSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <span data-bind=\\\"\\n                    if: teammate.survives\\n                    \\\">\\n                    <span class=\\\"glyphicon glyphicon-ok-circle text-success\\\"></span>\\n                </span>\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachShieldsDeath,\\n                    supertext: \\\"Shield\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachArmorDeath,\\n                    supertext: \\\"Armour\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachWeaponDeath,\\n                    supertext: \\\"Weapon\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.VentsDeath,\\n                    supertext: \\\"Vents\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkSquadmateDeath,\\n                    supertext: \\\"LW Squadmate\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkFireteamLeaderDeath,\\n                    supertext: \\\"LW Leader\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkEscortDeath,\\n                    supertext: \\\"Escort\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.BossSquadmateDeath,\\n                    supertext: \\\"Boss Squadmate\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.BossHoldingTheLineDeath,\\n                    supertext: \\\"HTL\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n        </tr>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"yes-no\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.value = ko.observable(ko.unwrap(params.value));\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\" data-bind=\\\"text: value() ? 'Yes' : 'No'\\\"></p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"priority-rank\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            this.value = ko.unwrap(params.value);\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\">\\n            <span data-bind=\\\"if: value !== undefined\\\">#<span data-bind=\\\"text: value\\\"></span></span>\\n            <span data-bind=\\\"if: value === undefined\\\"><span class=\\\"text-muted\\\">N/A</span></span>\\n        </p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Logic_1 = __webpack_require__(13);\n\tvar UI_1 = __webpack_require__(15);\n\tvar Application = (function () {\n\t    function Application() {\n\t        this.logic = new Logic_1.Logic(this);\n\t        this.ui = new UI_1.UI(this);\n\t    }\n\t    return Application;\n\t}());\n\texports.Application = Application;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar constants_1 = __webpack_require__(14);\n\tvar Teammate_1 = __webpack_require__(20);\n\tvar Logic = (function () {\n\t    function Logic(app) {\n\t        var _this = this;\n\t        this.normandy_has_armour = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_armour\").is_upgraded();\n\t            },\n\t            write: function (has_armour) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_armour\").is_upgraded(has_armour);\n\t            }\n\t        });\n\t        this.normandy_has_shields = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_shields\").is_upgraded();\n\t            },\n\t            write: function (has_shields) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_shields\").is_upgraded(has_shields);\n\t            }\n\t        });\n\t        this.normandy_has_weapon = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_weapon\").is_upgraded();\n\t            },\n\t            write: function (has_weapon) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_weapon\").is_upgraded(has_weapon);\n\t            }\n\t        });\n\t        this.mission_delay = ko.pureComputed({\n\t            read: function () {\n\t                return _this._mission_delay;\n\t            },\n\t            write: function (mission_delay) {\n\t                if (mission_delay >= constants_1.NormandyDelayOptions.None && mission_delay <= constants_1.NormandyDelayOptions.Many) {\n\t                    _this._mission_delay = mission_delay;\n\t                }\n\t            }\n\t        });\n\t        this.pool = ko.observableArray([]);\n\t        this.recruited = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_recruited();\n\t            });\n\t        });\n\t        this.loyal = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_loyal();\n\t            });\n\t        });\n\t        this.upgraded = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_upgraded();\n\t            });\n\t        });\n\t        this.all_recruited = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.pool(), function (teammate) {\n\t                    return teammate.is_recruited();\n\t                });\n\t            },\n\t            write: function (all_recruited) {\n\t                _.each(_this.pool(), function (teammate) {\n\t                    teammate.is_recruited(all_recruited);\n\t                });\n\t            }\n\t        });\n\t        this.all_loyal = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.recruited(), function (teammate) {\n\t                    return teammate.is_loyal();\n\t                });\n\t            },\n\t            write: function (all_loyal) {\n\t                _.each(_this.recruited(), function (teammate) {\n\t                    teammate.is_loyal(all_loyal);\n\t                });\n\t            }\n\t        });\n\t        this.all_upgraded = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.loyal(), function (teammate) {\n\t                    return teammate.is_upgraded();\n\t                });\n\t            },\n\t            write: function (all_upgraded) {\n\t                _.each(_this.loyal(), function (teammate) {\n\t                    teammate.is_upgraded(all_upgraded);\n\t                });\n\t            }\n\t        });\n\t        this.approach_squadmate_1 = ko.observable(undefined);\n\t        this.approach_squadmate_2 = ko.observable(undefined);\n\t        this.approach_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.recruited();\n\t            if (candidates.length >= 8) {\n\t                return _.without(candidates, _this.approach_squadmate_2());\n\t            }\n\t        });\n\t        this.approach_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.recruited();\n\t            if (candidates.length >= 8) {\n\t                return _.without(candidates, _this.approach_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.approach_squadmate_1, this.approach_squadmate_pool_1);\n\t        this.bindToPool(this.approach_squadmate_2, this.approach_squadmate_pool_2);\n\t        this.approach_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.approach_squadmate_1() && _this.approach_squadmate_2() && _this.normandy_has_armour() !== undefined && _this.normandy_has_weapon() !== undefined && _this.normandy_has_shields() !== undefined);\n\t        });\n\t        this.approach_shields_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_shields()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2()).filter(\"shield_death_priority\").sortBy(\"shield_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_armour_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_armour()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2(), _this.approach_shields_death()).filter(\"armour_death_priority\").sortBy(\"armour_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_weapon_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_weapon()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2(), _this.approach_shields_death(), _this.approach_armour_death()).filter(\"weapon_death_priority\").sortBy(\"weapon_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_survivors = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable()) {\n\t                return _.without(_this.recruited(), _this.approach_shields_death(), _this.approach_armour_death(), _this.approach_weapon_death());\n\t            }\n\t        });\n\t        this.vents_specialist = ko.observable(undefined);\n\t        this.vents_fireteam_leader = ko.observable(undefined);\n\t        this.vents_squadmate_1 = ko.observable(undefined);\n\t        this.vents_squadmate_2 = ko.observable(undefined);\n\t        this.vents_specialist_pool = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_vent_candidate\"), _this.vents_fireteam_leader(), _this.vents_squadmate_1(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_fireteam_leader_pool = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_leader_candidate\"), _this.vents_specialist(), _this.vents_squadmate_1(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.vents_specialist(), _this.vents_fireteam_leader(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.vents_specialist(), _this.vents_fireteam_leader(), _this.vents_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.vents_specialist, this.vents_specialist_pool);\n\t        this.bindToPool(this.vents_fireteam_leader, this.vents_fireteam_leader_pool);\n\t        this.bindToPool(this.vents_squadmate_1, this.vents_squadmate_pool_1);\n\t        this.bindToPool(this.vents_squadmate_2, this.vents_squadmate_pool_2);\n\t        this.vents_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.vents_specialist() && _this.vents_fireteam_leader() && _this.vents_squadmate_1() && _this.vents_squadmate_2());\n\t        });\n\t        this.vents_death = ko.pureComputed(function () {\n\t            if (_this.vents_evaluatable()) {\n\t                var specialist = _this.vents_specialist();\n\t                var leader = _this.vents_fireteam_leader();\n\t                if (!specialist.is_good_vent_specialist() || !leader.is_good_vent_fireteam_leader()) {\n\t                    return specialist;\n\t                }\n\t            }\n\t        });\n\t        this.vents_survivors = ko.pureComputed(function () {\n\t            if (_this.vents_evaluatable()) {\n\t                return _.without(_this.approach_survivors(), _this.vents_death());\n\t            }\n\t        });\n\t        this.long_walk_specialist = ko.observable(undefined);\n\t        this.long_walk_fireteam_leader = ko.observable(undefined);\n\t        this.long_walk_escort = ko.observable(undefined);\n\t        this.long_walk_squadmate_1 = ko.observable(undefined);\n\t        this.long_walk_squadmate_2 = ko.observable(undefined);\n\t        this.long_walk_specialist_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_bubble_candidate\"), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_fireteam_leader_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_leader_candidate\"), _this.long_walk_specialist(), _this.long_walk_escort(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_escort_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_escort_candidate\"), _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.long_walk_specialist, this.long_walk_specialist_pool);\n\t        this.bindToPool(this.long_walk_fireteam_leader, this.long_walk_fireteam_leader_pool);\n\t        this.bindToPool(this.long_walk_escort, this.long_walk_escort_pool);\n\t        this.bindToPool(this.long_walk_squadmate_1, this.long_walk_squadmate_pool_1);\n\t        this.bindToPool(this.long_walk_squadmate_2, this.long_walk_squadmate_pool_2);\n\t        this.long_walk_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.long_walk_specialist() && _this.long_walk_fireteam_leader() && _this.long_walk_squadmate_1() && _this.long_walk_squadmate_2());\n\t        });\n\t        this.long_walk_escort_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var escort = _this.long_walk_escort();\n\t                if (escort && !escort.is_good_escort()) {\n\t                    return escort;\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_squadmate_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var specialist = _this.long_walk_specialist();\n\t                var squadmate_1 = _this.long_walk_squadmate_1();\n\t                var squadmate_2 = _this.long_walk_squadmate_2();\n\t                if (!specialist.is_good_long_walk_specialist()) {\n\t                    var candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n\t                    return _.last(candidates);\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_fireteam_leader_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var leader = _this.long_walk_fireteam_leader();\n\t                if (!leader.is_good_long_walk_fireteam_leader()) {\n\t                    var long_walk_fireteam_followers = _.without(_this.vents_survivors(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_specialist(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t                    if (long_walk_fireteam_followers.length === 0 && !!_this.long_walk_squadmate_death()) {\n\t                        return undefined;\n\t                    }\n\t                    return leader;\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_survivors = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (_this.long_walk_evaluatable()) {\n\t                return _.without(candidates, _this.long_walk_escort_death(), _this.long_walk_squadmate_death(), _this.long_walk_fireteam_leader_death());\n\t            }\n\t        });\n\t        this.boss_squadmate_1 = ko.observable(undefined);\n\t        this.boss_squadmate_2 = ko.observable(undefined);\n\t        this.boss_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_2());\n\t            }\n\t        });\n\t        this.boss_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.boss_squadmate_1, this.boss_squadmate_pool_1);\n\t        this.bindToPool(this.boss_squadmate_2, this.boss_squadmate_pool_2);\n\t        this.boss_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.boss_squadmate_1() && _this.boss_squadmate_2());\n\t        });\n\t        this.boss_squadmate_deaths = ko.pureComputed(function () {\n\t            if (_this.boss_evaluatable()) {\n\t                var deaths = [];\n\t                var squadmate_1 = _this.boss_squadmate_1();\n\t                var squadmate_2 = _this.boss_squadmate_2();\n\t                if (!squadmate_1.is_good_boss_squadmate()) {\n\t                    deaths.push(squadmate_1);\n\t                }\n\t                if (!squadmate_2.is_good_boss_squadmate()) {\n\t                    deaths.push(squadmate_2);\n\t                }\n\t                return deaths;\n\t            }\n\t        });\n\t        this.boss_hold_the_line_candidates = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (_this.boss_evaluatable()) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_1(), _this.boss_squadmate_2());\n\t            }\n\t        });\n\t        this.boss_hold_the_line_total = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (candidates) {\n\t                return _.sum(_.map(candidates, function (teammate) { return teammate.hold_the_line_score(); }));\n\t            }\n\t        });\n\t        this.boss_hold_the_line_rating = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            var total = _this.boss_hold_the_line_total();\n\t            if (candidates) {\n\t                if (candidates.length > 0) {\n\t                    return total / candidates.length;\n\t                }\n\t                else {\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t        this.boss_hold_the_line_death_count = ko.pureComputed(function () {\n\t            var rating = _this.boss_hold_the_line_rating();\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (rating !== undefined) {\n\t                if (rating < 2.0) {\n\t                    if (candidates.length >= 5) {\n\t                        if (rating >= 1.5) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating >= 0.5) {\n\t                            return 2;\n\t                        }\n\t                        else {\n\t                            return 3;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 4) {\n\t                        if (rating >= 1.0) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating >= 0.5) {\n\t                            return 2;\n\t                        }\n\t                        else if (rating > 0) {\n\t                            return 3;\n\t                        }\n\t                        else {\n\t                            return 4;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 3) {\n\t                        if (rating >= 1) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating > 0) {\n\t                            return 2;\n\t                        }\n\t                        else {\n\t                            return 3;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 2) {\n\t                        if (rating > 0) {\n\t                            return 1;\n\t                        }\n\t                        else {\n\t                            return 2;\n\t                        }\n\t                    }\n\t                    else {\n\t                        return 1;\n\t                    }\n\t                }\n\t                else {\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t        this.boss_hold_the_line_deaths = ko.pureComputed(function () {\n\t            var death_count = _this.boss_hold_the_line_death_count();\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (death_count !== undefined) {\n\t                if (death_count === 0) {\n\t                    return [];\n\t                }\n\t                else {\n\t                    return _.sortBy(candidates, function (teammate) {\n\t                        return teammate.hold_the_line_death_priority + (!teammate.is_loyal() ? 100 : 0);\n\t                    }).slice(-death_count);\n\t                }\n\t            }\n\t        });\n\t        this.boss_survivors = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (_this.boss_evaluatable()) {\n\t                return _.without.apply(_, [candidates].concat(_this.boss_hold_the_line_deaths(), _this.boss_squadmate_deaths()));\n\t            }\n\t        });\n\t        this.summary_defence_reporter = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (candidates) {\n\t                return _.last(_.sortBy(candidates, \"defence_report_priority\"));\n\t            }\n\t        });\n\t        this.summary_advocates_keeping_base = ko.pureComputed(function () {\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (s1 && s2) {\n\t                return _.last(_.sortBy([s1, s2], \"keep_base_priority\"));\n\t            }\n\t        });\n\t        this.summary_advocates_destroying_base = ko.pureComputed(function () {\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (s1 && s2) {\n\t                return _.last(_.sortBy([s1, s2], \"destroy_base_priority\"));\n\t            }\n\t        });\n\t        this.summary_shepard_lives = ko.pureComputed(function () {\n\t            return _this.boss_survivors().length > 2;\n\t        });\n\t        this.summary_catches_shepard = ko.pureComputed(function () {\n\t            var candidates = _this.boss_survivors();\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (candidates && candidates.length) {\n\t                candidates = _.sortBy(candidates, function (teammate) {\n\t                    var was_squadmate = teammate === s1 || teammate === s2;\n\t                    return teammate.cutscene_rescue_priority + (was_squadmate ? 100 : 0);\n\t                });\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.pool([\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Garrus, \"Garrus Vakarian\", true, 3, 5, 0, 8, 11, 10, 3, 11, 8, 0, false, false, true, false, true, true, false, true, false, false, true),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Grunt, \"Grunt\", false, 3, 0, 0, 6, 9, 8, 5, 9, 12, 0, false, false, false, false, true, false, false, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Jack, \"Jack\", true, 0, 8, 12, 5, 8, 11, 2, 12, 0, 8, false, true, false, false, true, false, true, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Jacob, \"Jacob Taylor\", true, 1, 6, 0, 0, 0, 6, 8, 8, 0, 10, false, false, true, false, true, true, true, true, true, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Kasumi, \"Kasumi Goto\", false, 0, 9, 0, 12, 0, 3, 10, 4, 0, 9, true, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Legion, \"Legion\", false, 1, 3, 0, 11, 0, 9, 4, 10, 9, 0, true, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Miranda, \"Miranda Lawson\", true, 1, 7, 0, 0, 0, -1, 12, 2, 13, 0, false, false, true, true, false, false, true, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Mordin, \"Mordin Solus\", true, 0, 11, 0, 0, 0, 5, 7, 6, 10, 0, false, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Samara, \"Samara\", false, 1, 4, 0, 4, 7, 7, 6, 7, 0, 12, false, true, false, false, true, false, true, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Tali, \"Tali'zorah\", false, 0, 10, 0, 10, 0, 4, 9, 5, 0, 11, true, false, false, false, true, true, false, true, false, true, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Thane, \"Thane\", false, 1, 2, 0, 9, 12, 12, 1, 13, 0, 13, false, false, false, false, true, true, true, true, false, false, false),\n\t            new Teammate_1.Teammate(this, constants_1.HenchmanIDs.Zaeed, \"Zaeed Masani\", false, 3, 1, 0, 7, 10, 2, 11, 3, 11, 0, false, false, false, false, true, false, false, true, false, false, false)\n\t        ]);\n\t        var serialisables = [\n\t            this.approach_squadmate_1,\n\t            this.approach_squadmate_2,\n\t            this.vents_specialist,\n\t            this.vents_fireteam_leader,\n\t            this.vents_squadmate_1,\n\t            this.vents_squadmate_2,\n\t            this.long_walk_specialist,\n\t            this.long_walk_fireteam_leader,\n\t            this.long_walk_escort,\n\t            this.long_walk_squadmate_1,\n\t            this.long_walk_squadmate_2,\n\t            this.boss_squadmate_1,\n\t            this.boss_squadmate_2\n\t        ];\n\t        this.serialised = ko.pureComputed({\n\t            read: function () {\n\t                var serialised = _.map(_this.pool(), function (teammate) {\n\t                    return ((teammate.is_recruited() ? 1 : 0)\n\t                        + (teammate.is_loyal() ? 2 : 0)\n\t                        + (teammate.is_upgraded() ? 4 : 0)).toString(16);\n\t                }).join(\"\");\n\t                serialised += _.map(serialisables, function (observable) {\n\t                    var teammate = observable();\n\t                    return (teammate ? teammate.id : 0).toString(16);\n\t                }).join(\"\");\n\t                return serialised;\n\t            },\n\t            write: function (serialised) {\n\t                var pool = _this.pool();\n\t                for (var i = 0, l = pool.length; i < l; ++i) {\n\t                    var flags = parseInt(serialised[i], 16);\n\t                    pool[i].is_recruited(!!(flags & 1));\n\t                    pool[i].is_loyal(!!(flags & 2));\n\t                    pool[i].is_upgraded(!!(flags & 4));\n\t                }\n\t                _.each(serialisables, function (observable, index) {\n\t                    var id = parseInt(serialised[pool.length + index], 16);\n\t                    if (id > 0) {\n\t                        observable(_.find(pool, function (teammate) {\n\t                            return teammate.id === id;\n\t                        }));\n\t                    }\n\t                    else {\n\t                        observable(undefined);\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    }\n\t    Logic.prototype.bindToPool = function (observable, pool) {\n\t        pool.subscribe(function (candidates) {\n\t            var teammate = observable();\n\t            if (!candidates) {\n\t                observable(undefined);\n\t            }\n\t            else if (teammate && !_.contains(candidates, teammate)) {\n\t                observable(undefined);\n\t            }\n\t        });\n\t    };\n\t    return Logic;\n\t}());\n\texports.Logic = Logic;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (HenchmanIDs) {\n\t    HenchmanIDs[HenchmanIDs[\"Garrus\"] = 1] = \"Garrus\";\n\t    HenchmanIDs[HenchmanIDs[\"Grunt\"] = 2] = \"Grunt\";\n\t    HenchmanIDs[HenchmanIDs[\"Jack\"] = 3] = \"Jack\";\n\t    HenchmanIDs[HenchmanIDs[\"Jacob\"] = 4] = \"Jacob\";\n\t    HenchmanIDs[HenchmanIDs[\"Kasumi\"] = 5] = \"Kasumi\";\n\t    HenchmanIDs[HenchmanIDs[\"Legion\"] = 6] = \"Legion\";\n\t    HenchmanIDs[HenchmanIDs[\"Miranda\"] = 7] = \"Miranda\";\n\t    HenchmanIDs[HenchmanIDs[\"Mordin\"] = 8] = \"Mordin\";\n\t    HenchmanIDs[HenchmanIDs[\"Morinth\"] = 9] = \"Morinth\";\n\t    HenchmanIDs[HenchmanIDs[\"Samara\"] = 10] = \"Samara\";\n\t    HenchmanIDs[HenchmanIDs[\"Tali\"] = 11] = \"Tali\";\n\t    HenchmanIDs[HenchmanIDs[\"Thane\"] = 12] = \"Thane\";\n\t    HenchmanIDs[HenchmanIDs[\"Zaeed\"] = 13] = \"Zaeed\";\n\t})(exports.HenchmanIDs || (exports.HenchmanIDs = {}));\n\tvar HenchmanIDs = exports.HenchmanIDs;\n\t(function (NormandyDelayOptions) {\n\t    NormandyDelayOptions[NormandyDelayOptions[\"None\"] = 0] = \"None\";\n\t    NormandyDelayOptions[NormandyDelayOptions[\"Few\"] = 1] = \"Few\";\n\t    NormandyDelayOptions[NormandyDelayOptions[\"Many\"] = 2] = \"Many\";\n\t})(exports.NormandyDelayOptions || (exports.NormandyDelayOptions = {}));\n\tvar NormandyDelayOptions = exports.NormandyDelayOptions;\n\t(function (Role) {\n\t    Role[Role[\"ApproachSquadmate1\"] = 0] = \"ApproachSquadmate1\";\n\t    Role[Role[\"ApproachSquadmate2\"] = 1] = \"ApproachSquadmate2\";\n\t    Role[Role[\"ApproachShieldsDeath\"] = 2] = \"ApproachShieldsDeath\";\n\t    Role[Role[\"ApproachArmorDeath\"] = 3] = \"ApproachArmorDeath\";\n\t    Role[Role[\"ApproachWeaponDeath\"] = 4] = \"ApproachWeaponDeath\";\n\t    Role[Role[\"VentsSquadmate1\"] = 5] = \"VentsSquadmate1\";\n\t    Role[Role[\"VentsSquadmate2\"] = 6] = \"VentsSquadmate2\";\n\t    Role[Role[\"VentsSpecialist\"] = 7] = \"VentsSpecialist\";\n\t    Role[Role[\"VentsFireteamLeader\"] = 8] = \"VentsFireteamLeader\";\n\t    Role[Role[\"VentsDeath\"] = 9] = \"VentsDeath\";\n\t    Role[Role[\"LongWalkSpecialist\"] = 10] = \"LongWalkSpecialist\";\n\t    Role[Role[\"LongWalkFireteamLeader\"] = 11] = \"LongWalkFireteamLeader\";\n\t    Role[Role[\"LongWalkEscort\"] = 12] = \"LongWalkEscort\";\n\t    Role[Role[\"LongWalkSquadmate1\"] = 13] = \"LongWalkSquadmate1\";\n\t    Role[Role[\"LongWalkSquadmate2\"] = 14] = \"LongWalkSquadmate2\";\n\t    Role[Role[\"LongWalkSquadmateDeath\"] = 15] = \"LongWalkSquadmateDeath\";\n\t    Role[Role[\"LongWalkEscortDeath\"] = 16] = \"LongWalkEscortDeath\";\n\t    Role[Role[\"LongWalkFireteamLeaderDeath\"] = 17] = \"LongWalkFireteamLeaderDeath\";\n\t    Role[Role[\"BossSquadmate1\"] = 18] = \"BossSquadmate1\";\n\t    Role[Role[\"BossSquadmate2\"] = 19] = \"BossSquadmate2\";\n\t    Role[Role[\"BossHoldingTheLine\"] = 20] = \"BossHoldingTheLine\";\n\t    Role[Role[\"BossSquadmateDeath\"] = 21] = \"BossSquadmateDeath\";\n\t    Role[Role[\"BossHoldingTheLineDeath\"] = 22] = \"BossHoldingTheLineDeath\";\n\t})(exports.Role || (exports.Role = {}));\n\tvar Role = exports.Role;\n\t(function (SummaryCrewSurvivalOptions) {\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"AllSurvived\"] = 0] = \"AllSurvived\";\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"HalfSurvived\"] = 1] = \"HalfSurvived\";\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"AllDied\"] = 2] = \"AllDied\";\n\t})(exports.SummaryCrewSurvivalOptions || (exports.SummaryCrewSurvivalOptions = {}));\n\tvar SummaryCrewSurvivalOptions = exports.SummaryCrewSurvivalOptions;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar UI = (function () {\n\t    function UI(app) {\n\t        this.app = app;\n\t        this.teammate = ko.observable(undefined);\n\t        this.share = ko.observable(false);\n\t        if (window.location.search.length > 2) {\n\t            this.app.logic.serialised(window.location.search.substr(1));\n\t        }\n\t    }\n\t    UI.prototype.showRankPopover = function (event, field, title) {\n\t        var $target = $(event.target);\n\t        var $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n\t        _.chain(this.app.logic.pool()).filter(function (teammate) {\n\t            return !!teammate[field]();\n\t        }).sortBy(function (teammate) {\n\t            return teammate[field]();\n\t        }).each(function (teammate) {\n\t            $content.append($(\"<li />\")\n\t                .append(teammate.name));\n\t        }).value();\n\t        $target.popover({\n\t            trigger: \"focus\",\n\t            title: title,\n\t            html: true,\n\t            content: $content\n\t        })\n\t            .on(\"hidden.bs.popover\", function () {\n\t            $target.popover(\"destroy\");\n\t        })\n\t            .popover(\"show\");\n\t    };\n\t    return UI;\n\t}());\n\texports.UI = UI;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar constants_1 = __webpack_require__(14);\n\tvar Teammate = (function () {\n\t    function Teammate(logic, id, name, is_essential, hold_the_line_baseline_score, hold_the_line_death_priority, armour_death_priority, shield_death_priority, weapon_death_priority, long_walk_death_priority, cutscene_rescue_priority, defence_report_priority, keep_base_priority, destroy_base_priority, is_vent_ideal_candidate, is_bubble_ideal_candidate, is_leader_ideal_candidate, is_super_leader, is_escort_candidate, is_vent_candidate, is_bubble_candidate, is_leader_candidate, upgrade_unlocks_armour, upgrade_unlocks_shields, upgrade_unlocks_weapon) {\n\t        var _this = this;\n\t        this.logic = logic;\n\t        this.id = id;\n\t        this.name = name;\n\t        this.is_essential = is_essential;\n\t        this.hold_the_line_baseline_score = hold_the_line_baseline_score;\n\t        this.hold_the_line_death_priority = hold_the_line_death_priority;\n\t        this.armour_death_priority = armour_death_priority;\n\t        this.shield_death_priority = shield_death_priority;\n\t        this.weapon_death_priority = weapon_death_priority;\n\t        this.long_walk_death_priority = long_walk_death_priority;\n\t        this.cutscene_rescue_priority = cutscene_rescue_priority;\n\t        this.defence_report_priority = defence_report_priority;\n\t        this.keep_base_priority = keep_base_priority;\n\t        this.destroy_base_priority = destroy_base_priority;\n\t        this.is_vent_ideal_candidate = is_vent_ideal_candidate;\n\t        this.is_bubble_ideal_candidate = is_bubble_ideal_candidate;\n\t        this.is_leader_ideal_candidate = is_leader_ideal_candidate;\n\t        this.is_super_leader = is_super_leader;\n\t        this.is_escort_candidate = is_escort_candidate;\n\t        this.is_vent_candidate = is_vent_candidate;\n\t        this.is_bubble_candidate = is_bubble_candidate;\n\t        this.is_leader_candidate = is_leader_candidate;\n\t        this.upgrade_unlocks_armour = upgrade_unlocks_armour;\n\t        this.upgrade_unlocks_shields = upgrade_unlocks_shields;\n\t        this.upgrade_unlocks_weapon = upgrade_unlocks_weapon;\n\t        this.is_recruited = ko.observable(this.is_essential);\n\t        this.is_loyal = ko.observable(false);\n\t        this.is_upgraded = ko.observable(false);\n\t        this.is_recruited.subscribe(function (is_recruited) {\n\t            if (!is_recruited) {\n\t                if (_this.is_essential) {\n\t                    _this.is_recruited(true);\n\t                }\n\t                _this.is_loyal(false);\n\t                _this.is_upgraded(false);\n\t            }\n\t        });\n\t        this.is_loyal.subscribe(function (is_loyal) {\n\t            if (is_loyal) {\n\t                if (!_this.is_recruited()) {\n\t                    _this.is_loyal(false);\n\t                }\n\t            }\n\t            else {\n\t                _this.is_upgraded(false);\n\t            }\n\t        });\n\t        this.is_upgraded.subscribe(function (is_upgraded) {\n\t            if (is_upgraded) {\n\t                if (!_this.is_loyal()) {\n\t                    _this.is_upgraded(false);\n\t                }\n\t            }\n\t        });\n\t        this.is_good_vent_specialist = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_vent_ideal_candidate;\n\t        });\n\t        this.is_good_vent_fireteam_leader = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_leader_ideal_candidate;\n\t        });\n\t        this.is_good_escort = ko.pureComputed(function () {\n\t            return _this.is_loyal();\n\t        });\n\t        this.is_good_long_walk_specialist = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_bubble_ideal_candidate;\n\t        });\n\t        this.is_good_long_walk_fireteam_leader = ko.pureComputed(function () {\n\t            return _this.is_leader_ideal_candidate && (_this.is_loyal() || _this.is_super_leader);\n\t        });\n\t        this.is_good_boss_squadmate = ko.pureComputed(function () {\n\t            return _this.is_loyal();\n\t        });\n\t        this.hold_the_line_score = ko.pureComputed(function () {\n\t            return _this.hold_the_line_baseline_score + (_this.is_loyal() ? 1 : 0);\n\t        });\n\t        this.roles = ko.observableArray([]);\n\t        this\n\t            .syncRoleToObservable(logic.approach_squadmate_1, constants_1.Role.ApproachSquadmate1)\n\t            .syncRoleToObservable(logic.approach_squadmate_2, constants_1.Role.ApproachSquadmate2)\n\t            .syncRoleToObservable(logic.approach_armour_death, constants_1.Role.ApproachArmorDeath)\n\t            .syncRoleToObservable(logic.approach_shields_death, constants_1.Role.ApproachShieldsDeath)\n\t            .syncRoleToObservable(logic.approach_weapon_death, constants_1.Role.ApproachWeaponDeath)\n\t            .syncRoleToObservable(logic.vents_specialist, constants_1.Role.VentsSpecialist)\n\t            .syncRoleToObservable(logic.vents_fireteam_leader, constants_1.Role.VentsFireteamLeader)\n\t            .syncRoleToObservable(logic.vents_squadmate_1, constants_1.Role.VentsSquadmate1)\n\t            .syncRoleToObservable(logic.vents_squadmate_2, constants_1.Role.VentsSquadmate2)\n\t            .syncRoleToObservable(logic.vents_death, constants_1.Role.VentsDeath)\n\t            .syncRoleToObservable(logic.long_walk_specialist, constants_1.Role.LongWalkSpecialist)\n\t            .syncRoleToObservable(logic.long_walk_fireteam_leader, constants_1.Role.LongWalkFireteamLeader)\n\t            .syncRoleToObservable(logic.long_walk_escort, constants_1.Role.LongWalkEscort)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_1, constants_1.Role.LongWalkSquadmate1)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_2, constants_1.Role.LongWalkSquadmate2)\n\t            .syncRoleToObservable(logic.long_walk_escort_death, constants_1.Role.LongWalkEscortDeath)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_death, constants_1.Role.LongWalkSquadmateDeath)\n\t            .syncRoleToObservable(logic.long_walk_fireteam_leader_death, constants_1.Role.LongWalkFireteamLeaderDeath)\n\t            .syncRoleToObservable(logic.boss_squadmate_1, constants_1.Role.BossSquadmate1)\n\t            .syncRoleToObservable(logic.boss_squadmate_2, constants_1.Role.BossSquadmate2)\n\t            .syncRoleToObservableSet(logic.boss_squadmate_deaths, constants_1.Role.BossSquadmateDeath)\n\t            .syncRoleToObservableSet(logic.boss_hold_the_line_candidates, constants_1.Role.BossHoldingTheLine)\n\t            .syncRoleToObservableSet(logic.boss_hold_the_line_deaths, constants_1.Role.BossHoldingTheLineDeath);\n\t        this.survives = ko.pureComputed(function () {\n\t            var candidates = logic.boss_survivors();\n\t            if (candidates) {\n\t                return _.contains(candidates, _this);\n\t            }\n\t        });\n\t        this.armour_death_priority_rank = this.deriveRank(\"armour_death_priority\");\n\t        this.shield_death_priority_rank = this.deriveRank(\"shield_death_priority\");\n\t        this.weapon_death_priority_rank = this.deriveRank(\"weapon_death_priority\");\n\t        this.long_walk_death_priority_rank = this.deriveRank(\"long_walk_death_priority\");\n\t        this.cutscene_rescue_priority_rank = this.deriveRank(\"cutscene_rescue_priority\");\n\t        this.defence_report_priority_rank = this.deriveRank(\"defence_report_priority\");\n\t        this.keep_base_priority_rank = this.deriveRank(\"keep_base_priority\");\n\t        this.destroy_base_priority_rank = this.deriveRank(\"destroy_base_priority\");\n\t        this.hold_the_line_death_priority_rank = this.deriveRank(\"hold_the_line_death_priority\");\n\t    }\n\t    Teammate.prototype.hasRole = function (role) {\n\t        return this.roles.indexOf(role) > -1;\n\t    };\n\t    Teammate.prototype.deriveRank = function (field) {\n\t        var _this = this;\n\t        return ko.pureComputed(function () {\n\t            var pool = _this.logic.pool();\n\t            return _this[field] > 0 ? (pool.length - _.indexOf(_.sortBy(pool, field), _this)) : undefined;\n\t        });\n\t    };\n\t    Teammate.prototype.switchRole = function (role, condition) {\n\t        if (!condition) {\n\t            this.roles.remove(role);\n\t        }\n\t        else if (!this.hasRole(role)) {\n\t            this.roles.push(role);\n\t        }\n\t    };\n\t    Teammate.prototype.syncRoleToObservable = function (observable, role) {\n\t        var _this = this;\n\t        observable.subscribe(function (teammate) {\n\t            return _this.switchRole(role, teammate && (teammate.id === _this.id));\n\t        });\n\t        return this;\n\t    };\n\t    Teammate.prototype.syncRoleToObservableSet = function (observable, role) {\n\t        var _this = this;\n\t        observable.subscribe(function (teammates) {\n\t            return _this.switchRole(role, _.contains(teammates, _this));\n\t        });\n\t        return this;\n\t    };\n\t    return Teammate;\n\t}());\n\texports.Teammate = Teammate;\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.1.0.0.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/cdn/bundle/assets\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d1e67b0324e3643ea906\n **/","/* tslint:disable:no-require-imports */\n\nimport { name as Modal } from \"./Knockout/Bindings/Modal\";\nimport { name as PickTeammate } from \"./Knockout/Components/PickTeammate\";\nimport { name as TeammateList } from \"./Knockout/Components/TeammateList\";\nimport { name as RoleToggle } from \"./Knockout/Components/RoleToggle\";\nimport { name as RoleStatic } from \"./Knockout/Components/RoleStatic\";\nimport { name as DeathRoleStatic } from \"./Knockout/Components/DeathRoleStatic\";\nimport { name as ObservableToggle } from \"./Knockout/Components/ObservableToggle\";\nimport { name as TeammateName } from \"./Knockout/Components/TeammateName\";\nimport { name as TeammateRow } from \"./Knockout/Components/TeammateRow\";\nimport { name as YesNo } from \"./Knockout/Components/YesNo\";\nimport { name as PriorityRank } from \"./Knockout/Components/PriorityRank\";\nimport { Application } from \"./App/Application\";\nimport { Role } from \"./App/constants\";\n\n// Load the CSS\nrequire(\"../scss/app.scss\");\n\n// Force Knockout modules to be rendered in the output JS, even if we don't use them in the TypeScript\nvoid([\n    Modal,\n    PickTeammate,\n    TeammateList,\n    RoleToggle,\n    RoleStatic,\n    DeathRoleStatic,\n    ObservableToggle,\n    TeammateName,\n    TeammateRow,\n    YesNo,\n    PriorityRank\n].join(\",\"));\n\n// Make required TypeScript classes available to the HTML\n_.extend(window, {\n    Application,\n    Role\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/app.ts\n **/","export const name: string = \"modal\";\n\nvoid(((): void => {\n    ko.bindingHandlers[name] = {\n        init: (element: HTMLElement, value_accessor: KnockoutObservable<any>, all_bindings_accessor: KnockoutAllBindingsAccessor, data: any, context: any): any => {\n            const $element = $(element);\n\n            $element.modal({\n                show: false\n            });\n\n            ko.utils.domNodeDisposal.addDisposeCallback(element, () => {\n                $element.modal(\"destroy\");\n            });\n        },\n        update: (element: HTMLElement, value_accessor: KnockoutObservable<any>, all_bindings_accessor: KnockoutAllBindingsAccessor, data: any, context: any): void => {\n            const value = value_accessor();\n            const $element = $(element);\n\n            if (value) {\n                $element.modal(\"show\");\n            } else {\n                $element.modal(\"hide\");\n            }\n        }\n    };\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Bindings/Modal.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\n\nexport const name: string = \"pick-teammate\";\n\ninterface IParams {\n    target: KnockoutObservable<Teammate>;\n    pool: KnockoutComputed<Teammate[]>;\n    label?: string;\n    id?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.target = params.target;\n            this.pool = ko.pureComputed((): Teammate[] => {\n                const candidates = params.pool();\n                if (candidates) {\n                    candidates.unshift(undefined);\n                }\n                return candidates;\n            });\n            this.label = params.label;\n            this.id = params.id;\n        },\n        template: `\n        <div class=\"form-group\">\n            <label data-bind=\"text: label, attr: {'for': id}\"></label>\n            <select class=\"form-control\" id=\"test\" data-bind=\"attr: {'id': id}, options: pool, optionsText: function (teammate) { return teammate ? teammate.name : '-- None --'; }, value: target\"></select>\n            </div>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/PickTeammate.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\n\nexport const name: string = \"teammate-list\";\n\ninterface IParams {\n    pool: KnockoutComputed<Teammate[]>;\n    label?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.pool = params.pool;\n            this.label = params.label;\n            this.rendered = ko.pureComputed((): string => {\n                return _.map<Teammate, string>(this.pool(), (teammate: Teammate): string => {\n                    return teammate.name;\n                }).join(\", \");\n            });\n        },\n        template: `\n        <div class=\"form-group\">\n            <label data-bind=\"text: label\"></label>\n            <input class=\"form-control\" type=\"text\" data-bind=\"value: rendered\" />\n        </div>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateList.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\nimport { Role } from \"../../App/constants\";\n\nexport const name: string = \"role-toggle\";\n\ninterface IParams {\n    teammate: Teammate;\n    observable: KnockoutObservable<Teammate>;\n    ideal?: KnockoutObservable<boolean>;\n    pool: KnockoutObservable<Teammate[]>;\n    role: Role;\n    icon: string;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n            this.available = ko.pureComputed((): boolean => {\n                return _.contains(params.pool(), params.teammate);\n            });\n            this.ideal = params.ideal ? params.ideal : ko.observable(false);\n            this.styles = {\n                \"role-toggle\": true,\n                \"ideal\": this.ideal,\n                \"selected\": ko.pureComputed((): boolean => { return params.teammate.hasRole(params.role); }),\n                \"available\": ko.pureComputed((): boolean => { return this.available(); })\n            };\n            this.styles[params.icon] = true;\n        },\n        template: `\n        <span data-bind=\"\n            css: styles,\n            click: function () {\n                if ($data.observable() === teammate) {\n                    $data.observable(undefined);\n                } else {\n                    $data.observable(teammate);\n                }\n            }\">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/RoleToggle.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\nimport { Role } from \"../../App/constants\";\n\nexport const name: string = \"role-static\";\n\ninterface IParams {\n    teammate: Teammate;\n    role: Role;\n    supertext?: string;\n    icon: string;\n    classes?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n            this.classes = {};\n            this.classes[params.classes] = true;\n        },\n        template: `\n        <span data-bind=\"\n            if: $data.teammate.hasRole($data.role),\n            css: $data.classes\n            \">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/RoleStatic.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\nimport { Role } from \"../../App/constants\";\n\nexport const name: string = \"death-role-static\";\n\ninterface IParams {\n    teammate: Teammate;\n    role: Role;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <!-- ko component: { name: 'role-static', params: {\n            teammate: teammate,\n            role: role,\n            supertext: supertext,\n            icon: \"alert\",\n            classes: \"text-danger\"\n        } } --><!-- /ko -->\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/DeathRoleStatic.ts\n **/","export const name: string = \"observable-toggle\";\n\ninterface IParams {\n    observable: KnockoutObservable<boolean>;\n    icon: string;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n            this.css = {\n                \"observable-toggle\": true,\n                \"selected\": params.observable\n            };\n            this.css[params.icon] = true;\n        },\n        template: `\n        <span data-bind=\"\n            css: $data.css,\n            click: function () {\n                $data.observable(!$data.observable());\n            }\">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/ObservableToggle.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\n\nexport const name: string = \"teammate-name\";\n\ninterface IParams {\n    teammate: KnockoutObservable<Teammate>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <p class=\"form-control-static\" data-bind=\"with: teammate\"><span data-bind=\"text: name\"></span></p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateName.ts\n **/","import { Teammate } from \"../../App/ME2/Teammate\";\nimport { Logic } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"teammate-row\";\n\ninterface IParams {\n    teammate: Teammate;\n    logic: Logic;\n    modal_target: KnockoutObservable<Teammate>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <tr data-bind=\"css: {'text-muted': !teammate.is_recruited() }\">\n            <td>\n                <a href=\"#view-profile\" data-bind=\"click: function () { modal_target(teammate); }\">\n                    <span data-bind=\"text: teammate.name\"></span>\n                </a>\n            </td>\n            <td>\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_recruited,\n                    icon: \"ok\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind=\"if: teammate.is_recruited\">\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_loyal,\n                    icon: \"heart\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <span data-bind=\"if: teammate.is_loyal\">\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_upgraded,\n                    icon: \"circle-arrow-up\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_1,\n                    pool: logic.approach_squadmate_pool_1,\n                    role: Role.ApproachSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_2,\n                    pool: logic.approach_squadmate_pool_2,\n                    role: Role.ApproachSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_specialist,\n                    pool: logic.vents_specialist_pool,\n                    ideal: teammate.is_good_vent_specialist,\n                    role: Role.VentsSpecialist,\n                    icon: \"star\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_fireteam_leader,\n                    pool: logic.vents_fireteam_leader_pool,\n                    ideal: teammate.is_good_vent_fireteam_leader,\n                    role: Role.VentsFireteamLeader,\n                    icon: \"fire\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_1,\n                    pool: logic.vents_squadmate_pool_1,\n                    role: Role.VentsSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_2,\n                    pool: logic.vents_squadmate_pool_2,\n                    role: Role.VentsSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_specialist,\n                    pool: logic.long_walk_specialist_pool,\n                    ideal: teammate.is_good_long_walk_specialist,\n                    role: Role.LongWalkSpecialist,\n                    icon: \"star\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_fireteam_leader,\n                    pool: logic.long_walk_fireteam_leader_pool,\n                    ideal: teammate.is_good_long_walk_fireteam_leader,\n                    role: Role.LongWalkFireteamLeader,\n                    icon: \"fire\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_escort,\n                    pool: logic.long_walk_escort_pool,\n                    role: Role.LongWalkEscort,\n                    icon: \"heart-empty\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_1,\n                    pool: logic.long_walk_squadmate_pool_1,\n                    role: Role.LongWalkSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_2,\n                    pool: logic.long_walk_squadmate_pool_2,\n                    role: Role.LongWalkSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_1,\n                    pool: logic.boss_squadmate_pool_1,\n                    role: Role.BossSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_2,\n                    pool: logic.boss_squadmate_pool_2,\n                    role: Role.BossSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind=\"\n                    if: teammate.survives\n                    \">\n                    <span class=\"glyphicon glyphicon-ok-circle text-success\"></span>\n                </span>\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachShieldsDeath,\n                    supertext: \"Shield\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachArmorDeath,\n                    supertext: \"Armour\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachWeaponDeath,\n                    supertext: \"Weapon\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.VentsDeath,\n                    supertext: \"Vents\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkSquadmateDeath,\n                    supertext: \"LW Squadmate\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkFireteamLeaderDeath,\n                    supertext: \"LW Leader\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkEscortDeath,\n                    supertext: \"Escort\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.BossSquadmateDeath,\n                    supertext: \"Boss Squadmate\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.BossHoldingTheLineDeath,\n                    supertext: \"HTL\"\n                } } --><!-- /ko -->\n            </td>\n        </tr>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateRow.ts\n **/","export const name: string = \"yes-no\";\n\ninterface IParams {\n    value: KnockoutObservable<boolean> | boolean;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.value = ko.observable(ko.unwrap(params.value));\n        },\n        template: `\n        <p class=\"form-control-static\" data-bind=\"text: value() ? 'Yes' : 'No'\"></p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/YesNo.ts\n **/","export const name: string = \"priority-rank\";\n\ninterface IParams {\n    value: number | KnockoutObservable<number>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.value = ko.unwrap(params.value);\n        },\n        template: `\n        <p class=\"form-control-static\">\n            <span data-bind=\"if: value !== undefined\">#<span data-bind=\"text: value\"></span></span>\n            <span data-bind=\"if: value === undefined\"><span class=\\\"text-muted\\\">N/A</span></span>\n        </p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/PriorityRank.ts\n **/","import { Logic } from \"./ME2/Logic\";\nimport { UI } from \"./ME2/UI\";\n\nexport class Application {\n    public logic: Logic;\n    public ui: UI;\n\n    constructor () {\n        this.logic = new Logic(this);\n        this.ui = new UI(this);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/Application.ts\n **/","import { Application } from \"../Application\";\nimport { HenchmanIDs, NormandyDelayOptions } from \"../constants\";\nimport { Teammate } from \"./Teammate\";\n\nexport class Logic {\n    public pool: KnockoutObservableArray<Teammate>;\n\n    // Prep properties\n    public normandy_has_armour: KnockoutComputed<boolean>;\n    public normandy_has_shields: KnockoutComputed<boolean>;\n    public normandy_has_weapon: KnockoutComputed<boolean>;\n    public mission_delay: KnockoutComputed<number>;\n    public recruited: KnockoutComputed<Teammate[]>;\n    public loyal: KnockoutComputed<Teammate[]>;\n    public upgraded: KnockoutComputed<Teammate[]>;\n    public all_recruited: KnockoutComputed<boolean>;\n    public all_loyal: KnockoutComputed<boolean>;\n    public all_upgraded: KnockoutComputed<boolean>;\n\n    // Approach\n    public approach_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public approach_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public approach_squadmate_1: KnockoutObservable<Teammate>;\n    public approach_squadmate_2: KnockoutObservable<Teammate>;\n    public approach_evaluatable: KnockoutComputed<boolean>;\n    public approach_shields_death: KnockoutComputed<Teammate>;\n    public approach_armour_death: KnockoutComputed<Teammate>;\n    public approach_weapon_death: KnockoutComputed<Teammate>;\n    public approach_survivors: KnockoutComputed<Teammate[]>;\n\n    // Vents\n    public vents_specialist_pool: KnockoutComputed<Teammate[]>;\n    public vents_specialist: KnockoutObservable<Teammate>;\n    public vents_fireteam_leader_pool: KnockoutComputed<Teammate[]>;\n    public vents_fireteam_leader: KnockoutObservable<Teammate>;\n    public vents_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public vents_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public vents_squadmate_1: KnockoutObservable<Teammate>;\n    public vents_squadmate_2: KnockoutObservable<Teammate>;\n    public vents_evaluatable: KnockoutComputed<boolean>;\n    public vents_death: KnockoutComputed<Teammate>;\n    public vents_survivors: KnockoutComputed<Teammate[]>;\n\n    // Long Walk\n    public long_walk_specialist_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_specialist: KnockoutObservable<Teammate>;\n    public long_walk_fireteam_leader_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_fireteam_leader: KnockoutObservable<Teammate>;\n    public long_walk_escort_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_escort: KnockoutObservable<Teammate>;\n    public long_walk_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public long_walk_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public long_walk_squadmate_1: KnockoutObservable<Teammate>;\n    public long_walk_squadmate_2: KnockoutObservable<Teammate>;\n    public long_walk_evaluatable: KnockoutComputed<boolean>;\n    public long_walk_escort_death: KnockoutComputed<Teammate>;\n    public long_walk_squadmate_death: KnockoutComputed<Teammate>;\n    public long_walk_fireteam_leader_death: KnockoutComputed<Teammate>;\n    public long_walk_survivors: KnockoutComputed<Teammate[]>;\n\n    // Boss\n    public boss_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public boss_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public boss_squadmate_1: KnockoutObservable<Teammate>;\n    public boss_squadmate_2: KnockoutObservable<Teammate>;\n    public boss_evaluatable: KnockoutComputed<boolean>;\n    public boss_squadmate_deaths: KnockoutComputed<Teammate[]>;\n    public boss_hold_the_line_candidates: KnockoutComputed<Teammate[]>;\n    public boss_hold_the_line_total: KnockoutComputed<number>;\n    public boss_hold_the_line_rating: KnockoutComputed<number>;\n    public boss_hold_the_line_death_count: KnockoutComputed<number>;\n    public boss_hold_the_line_deaths: KnockoutComputed<Teammate[]>;\n    public boss_survivors: KnockoutComputed<Teammate[]>;\n\n    // Summary\n    public summary_defence_reporter: KnockoutComputed<Teammate>;\n    public summary_advocates_keeping_base: KnockoutComputed<Teammate>;\n    public summary_advocates_destroying_base: KnockoutComputed<Teammate>;\n    public summary_shepard_lives: KnockoutComputed<boolean>;\n    public summary_catches_shepard: KnockoutComputed<Teammate>;\n\n    // Serialisation\n    public serialised: KnockoutComputed<string>;\n\n    // Backing variables\n    private _mission_delay: number;\n\n    constructor (app: Application) {\n\n        // Prep\n        this.normandy_has_armour = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_armour\").is_upgraded();\n            },\n            write: (has_armour: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_armour\").is_upgraded(has_armour);\n            }\n        });\n        this.normandy_has_shields = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_shields\").is_upgraded();\n            },\n            write: (has_shields: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_shields\").is_upgraded(has_shields);\n            }\n        });\n        this.normandy_has_weapon = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_weapon\").is_upgraded();\n            },\n            write: (has_weapon: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_weapon\").is_upgraded(has_weapon);\n            }\n        });\n        this.mission_delay = ko.pureComputed({\n            read: (): number => {\n                return this._mission_delay;\n            },\n            write: (mission_delay: number): void => {\n                if (mission_delay >= NormandyDelayOptions.None && mission_delay <= NormandyDelayOptions.Many) {\n                    this._mission_delay = mission_delay;\n                }\n            }\n        });\n        this.pool = ko.observableArray([]);\n\n        this.recruited = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_recruited();\n            });\n        });\n        this.loyal = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_loyal();\n            });\n        });\n        this.upgraded = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_upgraded();\n            });\n        });\n\n        this.all_recruited = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.pool(), (teammate: Teammate): boolean => {\n                    return teammate.is_recruited();\n                });\n            },\n            write: (all_recruited: boolean): void => {\n                _.each(this.pool(), (teammate: Teammate): void => {\n                    teammate.is_recruited(all_recruited);\n                });\n            }\n        });\n        this.all_loyal = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.recruited(), (teammate: Teammate): boolean => {\n                    return teammate.is_loyal();\n                });\n            },\n            write: (all_loyal: boolean): void => {\n                _.each(this.recruited(), (teammate: Teammate): void => {\n                    teammate.is_loyal(all_loyal);\n                });\n            }\n        });\n        this.all_upgraded = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.loyal(), (teammate: Teammate): boolean => {\n                    return teammate.is_upgraded();\n                });\n            },\n            write: (all_upgraded: boolean): void => {\n                _.each(this.loyal(), (teammate: Teammate): void => {\n                    teammate.is_upgraded(all_upgraded);\n                });\n            }\n        });\n\n        // Approach\n        this.approach_squadmate_1 = ko.observable(undefined);\n        this.approach_squadmate_2 = ko.observable(undefined);\n        this.approach_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.recruited();\n            if (candidates.length >= 8) {\n                return _.without(candidates, this.approach_squadmate_2());\n            }\n        });\n        this.approach_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.recruited();\n            if (candidates.length >= 8) {\n                return _.without(candidates, this.approach_squadmate_1());\n            }\n        });\n        this.bindToPool(this.approach_squadmate_1, this.approach_squadmate_pool_1);\n        this.bindToPool(this.approach_squadmate_2, this.approach_squadmate_pool_2);\n        this.approach_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.approach_squadmate_1() && this.approach_squadmate_2() && this.normandy_has_armour() !== undefined && this.normandy_has_weapon() !== undefined && this.normandy_has_shields() !== undefined);\n        });\n        this.approach_shields_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_shields()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2()).filter(\"shield_death_priority\").sortBy(\"shield_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_armour_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_armour()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2(), this.approach_shields_death()).filter(\"armour_death_priority\").sortBy(\"armour_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_weapon_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_weapon()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2(), this.approach_shields_death(), this.approach_armour_death()).filter(\"weapon_death_priority\").sortBy(\"weapon_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_survivors = ko.pureComputed((): Teammate[] => {\n            if (this.approach_evaluatable()) {\n                return _.without(this.recruited(), this.approach_shields_death(), this.approach_armour_death(), this.approach_weapon_death());\n            }\n        });\n\n        // Vents\n        this.vents_specialist = ko.observable(undefined);\n        this.vents_fireteam_leader = ko.observable(undefined);\n        this.vents_squadmate_1 = ko.observable(undefined);\n        this.vents_squadmate_2 = ko.observable(undefined);\n        this.vents_specialist_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_vent_candidate\"), this.vents_fireteam_leader(), this.vents_squadmate_1(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_fireteam_leader_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_leader_candidate\"), this.vents_specialist(), this.vents_squadmate_1(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.vents_specialist(), this.vents_fireteam_leader(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.vents_specialist(), this.vents_fireteam_leader(), this.vents_squadmate_1());\n            }\n        });\n        this.bindToPool(this.vents_specialist, this.vents_specialist_pool);\n        this.bindToPool(this.vents_fireteam_leader, this.vents_fireteam_leader_pool);\n        this.bindToPool(this.vents_squadmate_1, this.vents_squadmate_pool_1);\n        this.bindToPool(this.vents_squadmate_2, this.vents_squadmate_pool_2);\n        this.vents_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.vents_specialist() && this.vents_fireteam_leader() && this.vents_squadmate_1() && this.vents_squadmate_2());\n        });\n        this.vents_death = ko.pureComputed((): Teammate => {\n            if (this.vents_evaluatable()) {\n                const specialist = this.vents_specialist();\n                const leader = this.vents_fireteam_leader();\n                if (!specialist.is_good_vent_specialist() || !leader.is_good_vent_fireteam_leader()) {\n                    return specialist;\n                }\n            }\n        });\n        this.vents_survivors = ko.pureComputed((): Teammate[] => {\n            if (this.vents_evaluatable()) {\n                return _.without(this.approach_survivors(), this.vents_death());\n            }\n        });\n\n        // Long Walk\n        this.long_walk_specialist = ko.observable(undefined);\n        this.long_walk_fireteam_leader = ko.observable(undefined);\n        this.long_walk_escort = ko.observable(undefined);\n        this.long_walk_squadmate_1 = ko.observable(undefined);\n        this.long_walk_squadmate_2 = ko.observable(undefined);\n        this.long_walk_specialist_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_bubble_candidate\"), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_fireteam_leader_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_leader_candidate\"), this.long_walk_specialist(), this.long_walk_escort(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_escort_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_escort_candidate\"), this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_1());\n            }\n        });\n        this.bindToPool(this.long_walk_specialist, this.long_walk_specialist_pool);\n        this.bindToPool(this.long_walk_fireteam_leader, this.long_walk_fireteam_leader_pool);\n        this.bindToPool(this.long_walk_escort, this.long_walk_escort_pool);\n        this.bindToPool(this.long_walk_squadmate_1, this.long_walk_squadmate_pool_1);\n        this.bindToPool(this.long_walk_squadmate_2, this.long_walk_squadmate_pool_2);\n        this.long_walk_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.long_walk_specialist() && this.long_walk_fireteam_leader() && this.long_walk_squadmate_1() && this.long_walk_squadmate_2());\n        });\n        this.long_walk_escort_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const escort = this.long_walk_escort();\n                if (escort && !escort.is_good_escort()) {\n                    return escort;\n                }\n            }\n        });\n        this.long_walk_squadmate_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const specialist = this.long_walk_specialist();\n                const squadmate_1 = this.long_walk_squadmate_1();\n                const squadmate_2 = this.long_walk_squadmate_2();\n                if (!specialist.is_good_long_walk_specialist()) {\n                    const candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n                    return _.last(candidates);\n                }\n            }\n        });\n        this.long_walk_fireteam_leader_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const leader = this.long_walk_fireteam_leader();\n                if (!leader.is_good_long_walk_fireteam_leader()) {\n\n                    // Even if they are a bad leader, they will survive if:\n                    // a) They are alone &\n                    // b) A squadmate died\n                    const long_walk_fireteam_followers = _.without(this.vents_survivors(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_specialist(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n                    if (long_walk_fireteam_followers.length === 0 && !!this.long_walk_squadmate_death()) {\n                        return undefined;\n                    }\n\n                    return leader;\n                }\n            }\n        });\n        this.long_walk_survivors = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (this.long_walk_evaluatable()) {\n                return _.without(candidates, this.long_walk_escort_death(), this.long_walk_squadmate_death(), this.long_walk_fireteam_leader_death());\n            }\n        });\n\n        // Boss\n        this.boss_squadmate_1 = ko.observable(undefined);\n        this.boss_squadmate_2 = ko.observable(undefined);\n        this.boss_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_escort(), this.boss_squadmate_2());\n            }\n        });\n        this.boss_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_escort(), this.boss_squadmate_1());\n            }\n        });\n        this.bindToPool(this.boss_squadmate_1, this.boss_squadmate_pool_1);\n        this.bindToPool(this.boss_squadmate_2, this.boss_squadmate_pool_2);\n        this.boss_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.boss_squadmate_1() && this.boss_squadmate_2());\n        });\n        this.boss_squadmate_deaths = ko.pureComputed((): Teammate[] => {\n            if (this.boss_evaluatable()) {\n                const deaths: Teammate[] = [];\n                const squadmate_1 = this.boss_squadmate_1();\n                const squadmate_2 = this.boss_squadmate_2();\n                if (!squadmate_1.is_good_boss_squadmate()) {\n                    deaths.push(squadmate_1);\n                }\n                if (!squadmate_2.is_good_boss_squadmate()) {\n                    deaths.push(squadmate_2);\n                }\n                return deaths;\n            }\n        });\n        this.boss_hold_the_line_candidates = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (this.boss_evaluatable()) {\n                return _.without(candidates, this.long_walk_escort(), this.boss_squadmate_1(), this.boss_squadmate_2());\n            }\n        });\n        this.boss_hold_the_line_total = ko.pureComputed((): number => {\n            const candidates = this.boss_hold_the_line_candidates();\n            if (candidates) {\n                return _.sum(_.map<Teammate, number>(candidates, (teammate: Teammate): number => { return teammate.hold_the_line_score(); }));\n            }\n        });\n        this.boss_hold_the_line_rating = ko.pureComputed((): number => {\n            const candidates = this.boss_hold_the_line_candidates();\n            const total = this.boss_hold_the_line_total();\n            if (candidates) {\n                if (candidates.length > 0) {\n                    return total / candidates.length;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        this.boss_hold_the_line_death_count = ko.pureComputed((): number => {\n            const rating = this.boss_hold_the_line_rating();\n            const candidates = this.boss_hold_the_line_candidates();\n            if (rating !== undefined) {\n                if (rating < 2.0) {\n                    if (candidates.length >= 5) {\n                        if (rating >= 1.5) {\n                            return 1;\n                        } else if (rating >= 0.5) {\n                            return 2;\n                        } else {\n                            return 3;\n                        }\n                    } else if (candidates.length === 4) {\n                        if (rating >= 1.0) {\n                            return 1;\n                        } else if (rating >= 0.5) {\n                            return 2;\n                        } else if (rating > 0) {\n                            return 3;\n                        } else {\n                            return 4;\n                        }\n                    } else if (candidates.length === 3) {\n                        if (rating >= 1) {\n                            return 1;\n                        } else if (rating > 0) {\n                            return 2;\n                        } else {\n                            return 3;\n                        }\n                    } else if (candidates.length === 2) {\n                        if (rating > 0) {\n                            return 1;\n                        } else {\n                            return 2;\n                        }\n                    } else {\n                        return 1;\n                    }\n                } else {\n                    return 0;\n                }\n            }\n        });\n        this.boss_hold_the_line_deaths = ko.pureComputed((): Teammate[] => {\n            const death_count = this.boss_hold_the_line_death_count();\n            const candidates = this.boss_hold_the_line_candidates();\n            if (death_count !== undefined) {\n                if (death_count === 0) {\n                    return [];\n                } else {\n                    return _.sortBy(candidates, (teammate: Teammate): number => {\n                        return teammate.hold_the_line_death_priority + (!teammate.is_loyal() ? 100 : 0); // Unloyal team members are prioritised over loyal ones\n                    }).slice(-death_count);\n\n                    //return _.sortBy(candidates, \"hold_the_line_death_priority\").slice(-death_count);\n                }\n            }\n        });\n        this.boss_survivors = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (this.boss_evaluatable()) {\n                return _.without(candidates, ...this.boss_hold_the_line_deaths(), ...this.boss_squadmate_deaths());\n            }\n        });\n\n        this.summary_defence_reporter = ko.pureComputed((): Teammate => {\n            const candidates = this.boss_hold_the_line_candidates();\n            if (candidates) {\n                //const candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n                return _.last(_.sortBy(candidates, \"defence_report_priority\"));\n            }\n        });\n\n        this.summary_advocates_keeping_base = ko.pureComputed((): Teammate => {\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (s1 && s2) {\n                return _.last(_.sortBy([s1, s2], \"keep_base_priority\"));\n            }\n        });\n\n        this.summary_advocates_destroying_base = ko.pureComputed((): Teammate => {\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (s1 && s2) {\n                return _.last(_.sortBy([s1, s2], \"destroy_base_priority\"));\n            }\n        });\n\n        this.summary_shepard_lives = ko.pureComputed((): boolean => {\n            return this.boss_survivors().length > 2;\n        });\n\n        this.summary_catches_shepard = ko.pureComputed((): Teammate => {\n            let candidates = this.boss_survivors();\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (candidates && candidates.length) {\n                candidates = _.sortBy(candidates, (teammate: Teammate): number => {\n                    const was_squadmate = teammate === s1 || teammate === s2;\n                    return teammate.cutscene_rescue_priority + (was_squadmate ? 100 : 0);\n                });\n                return _.last(candidates);\n            }\n        });\n\n        this.pool([\n            //                 ID                     Name                    Ess     HTL     HTLD    AD      SD      WD      LWD     CRP     DRP     KBP         DPB     Tech    Biotic      Leader      SLd     EC      VC      BC      LC    Armour   Shield  Weapon\n            new Teammate(this, HenchmanIDs.Garrus,    \"Garrus Vakarian\",      true,   3,      5,      0,      8,      11,     10,     3,      11,     8,          0,      false,  false,      true,       false,  true,   true,   false,  true, false,   false,  true),\n            new Teammate(this, HenchmanIDs.Grunt,     \"Grunt\",                false,  3,      0,      0,      6,      9,      8,      5,      9,      12,         0,      false,  false,      false,      false,  true,   false,  false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Jack,      \"Jack\",                 true,   0,      8,      12,     5,      8,      11,     2,      12,     0,          8,      false,  true,       false,      false,  true,   false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Jacob,     \"Jacob Taylor\",         true,   1,      6,      0,      0,      0,      6,      8,      8,      0,          10,     false,  false,      true,       false,  true,   true,   true,   true, true,    false,  false),\n            new Teammate(this, HenchmanIDs.Kasumi,    \"Kasumi Goto\",          false,  0,      9,      0,      12,     0,      3,      10,     4,      0,          9,      true,   false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Legion,    \"Legion\",               false,  1,      3,      0,      11,     0,      9,      4,      10,     9,          0,      true,   false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Miranda,   \"Miranda Lawson\",       true,   1,      7,      0,      0,      0,      -1,     12,     2,      13,         0,      false,  false,      true,       true,   false,  false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Mordin,    \"Mordin Solus\",         true,   0,      11,     0,      0,      0,      5,      7,      6,      10,         0,      false,  false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            //new Teammate(HenchmanIDs.Morinth,   \"Morinth\",            false,  1,      4,      0,      4,      7,      0,      5,      8,      0,          0,      false,  false,      false,      false,  true,   false,  true,   true),\n            new Teammate(this, HenchmanIDs.Samara,    \"Samara\",               false,  1,      4,      0,      4,      7,      7,      6,      7,      0,          12,     false,  true,       false,      false,  true,   false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Tali,      \"Tali'zorah\",           false,  0,      10,     0,      10,     0,      4,      9,      5,      0,          11,     true,   false,      false,      false,  true,   true,   false,  true, false,   true,   false),\n            new Teammate(this, HenchmanIDs.Thane,     \"Thane\",                false,  1,      2,      0,      9,      12,     12,     1,      13,     0,          13,     false,  false,      false,      false,  true,   true,   true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Zaeed,     \"Zaeed Masani\",         false,  3,      1,      0,      7,      10,     2,      11,     3,      11,         0,      false,  false,      false,      false,  true,   false,  false,  true, false,   false,  false)\n        ]);\n\n        const serialisables: KnockoutObservable<Teammate>[] = [\n            this.approach_squadmate_1,\n            this.approach_squadmate_2,\n            this.vents_specialist,\n            this.vents_fireteam_leader,\n            this.vents_squadmate_1,\n            this.vents_squadmate_2,\n            this.long_walk_specialist,\n            this.long_walk_fireteam_leader,\n            this.long_walk_escort,\n            this.long_walk_squadmate_1,\n            this.long_walk_squadmate_2,\n            this.boss_squadmate_1,\n            this.boss_squadmate_2\n        ];\n\n        this.serialised = ko.pureComputed({\n            read: (): string => {\n                let serialised: string = _.map(this.pool(), (teammate: Teammate): string => {\n                    return (\n                        (teammate.is_recruited() ? 1 : 0)\n                        + (teammate.is_loyal() ? 2 : 0)\n                        + (teammate.is_upgraded() ? 4 : 0)\n                    ).toString(16);\n                }).join(\"\");\n\n                serialised += _.map<KnockoutObservable<Teammate>, string>(serialisables, (observable: KnockoutObservable<Teammate>): string => {\n                    const teammate = observable();\n                    return (teammate ? teammate.id : 0).toString(16);\n                }).join(\"\");\n\n                return serialised;\n            },\n            write: (serialised: string): void => {\n                const pool = this.pool();\n                for (let i = 0, l = pool.length; i < l; ++i) {\n                    const flags = parseInt(serialised[i], 16);\n                    pool[i].is_recruited(!!(flags & 1));\n                    pool[i].is_loyal(!!(flags & 2));\n                    pool[i].is_upgraded(!!(flags & 4));\n                }\n\n                _.each(serialisables, (observable: KnockoutObservable<Teammate>, index: number): void => {\n                    const id = parseInt(serialised[pool.length + index], 16);\n                    if (id > 0) {\n                        observable(_.find(pool, (teammate: Teammate): boolean => {\n                            return teammate.id === id;\n                        }));\n                    } else {\n                        observable(undefined);\n                    }\n                });\n            }\n        });\n    }\n\n    private bindToPool (observable: KnockoutObservable<Teammate>, pool: KnockoutComputed<Teammate[]>): void {\n\n        // When the pool changes, ensure that the selected observable's value (if set) is still present in the new pool\n        pool.subscribe((candidates: Teammate[]): void => {\n            const teammate = observable();\n\n            // If candidate pool is not valid, nor is the observable\n            if (!candidates) {\n                observable(undefined);\n\n            // If pool IS valid, but does not contain the observable, observable is not valid\n            } else if (teammate && !_.contains(candidates, teammate)) {\n                observable(undefined);\n            }\n        });\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Logic.ts\n **/","export enum HenchmanIDs {\n    Garrus = 1,\n    Grunt = 2,\n    Jack = 3,\n    Jacob = 4,\n    Kasumi = 5,\n    Legion = 6,\n    Miranda = 7,\n    Mordin = 8,\n    Morinth = 9,\n    Samara = 10,\n    Tali = 11,\n    Thane = 12,\n    Zaeed = 13\n}\n\nexport enum NormandyDelayOptions {\n    None = 0,\n    Few = 1,\n    Many = 2\n}\n\nexport enum Role {\n    ApproachSquadmate1,\n    ApproachSquadmate2,\n    ApproachShieldsDeath,\n    ApproachArmorDeath,\n    ApproachWeaponDeath,\n    VentsSquadmate1,\n    VentsSquadmate2,\n    VentsSpecialist,\n    VentsFireteamLeader,\n    VentsDeath,\n    LongWalkSpecialist,\n    LongWalkFireteamLeader,\n    LongWalkEscort,\n    LongWalkSquadmate1,\n    LongWalkSquadmate2,\n    LongWalkSquadmateDeath,\n    LongWalkEscortDeath,\n    LongWalkFireteamLeaderDeath,\n    BossSquadmate1,\n    BossSquadmate2,\n    BossHoldingTheLine,\n    BossSquadmateDeath,\n    BossHoldingTheLineDeath\n}\n\nexport enum SummaryCrewSurvivalOptions {\n    AllSurvived,\n    HalfSurvived,\n    AllDied\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/constants.ts\n **/","import { Application } from \"../Application\";\nimport { Teammate } from \"./Teammate\";\n\nexport class UI {\n    public teammate: KnockoutObservable<Teammate>;\n    public share: KnockoutObservable<boolean>;\n    private app: Application;\n\n    constructor (app: Application) {\n        this.app = app;\n        this.teammate = ko.observable(undefined);\n        this.share = ko.observable(false);\n\n        if (window.location.search.length > 2) {\n            this.app.logic.serialised(window.location.search.substr(1));\n        }\n    }\n\n    public showRankPopover (event: Event, field: string, title: string): void {\n        const $target = $(event.target);\n        const $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n        _.chain(this.app.logic.pool()).filter((teammate: Teammate): boolean => {\n            return !!(<KnockoutObservable<number>>teammate[field]());\n        }).sortBy((teammate: Teammate): number => {\n            return (<KnockoutObservable<number>>teammate[field])();\n        }).each((teammate: Teammate) => {\n            $content.append(\n                $(\"<li />\")\n                .append(teammate.name)\n            );\n        }).value();\n\n        $target.popover({\n            trigger: \"focus\",\n            title: title,\n            html: true,\n            content: $content\n        })\n        .on(\"hidden.bs.popover\", () => {\n            $target.popover(\"destroy\");\n        })\n        .popover(\"show\");\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/UI.ts\n **/","import { Role, HenchmanIDs } from \"../constants\";\nimport { Logic } from \"./Logic\";\n\nexport class Teammate {\n\n    // Derivatives\n    public is_recruited: KnockoutObservable<boolean>;\n    public is_loyal: KnockoutObservable<boolean>;\n    public is_upgraded: KnockoutObservable<boolean>;\n    public is_good_vent_specialist: KnockoutComputed<boolean>;\n    public is_good_vent_fireteam_leader: KnockoutComputed<boolean>;\n    public is_good_escort: KnockoutComputed<boolean>;\n    public is_good_long_walk_specialist: KnockoutComputed<boolean>;\n    public is_good_long_walk_fireteam_leader: KnockoutComputed<boolean>;\n    public is_good_boss_squadmate: KnockoutComputed<boolean>;\n    public hold_the_line_score: KnockoutComputed<number>;\n    public survives: KnockoutComputed<boolean>;\n\n    public armour_death_priority_rank: KnockoutComputed<number>;\n    public shield_death_priority_rank: KnockoutComputed<number>;\n    public weapon_death_priority_rank: KnockoutComputed<number>;\n    public long_walk_death_priority_rank: KnockoutComputed<number>;\n    public cutscene_rescue_priority_rank: KnockoutComputed<number>;\n    public defence_report_priority_rank: KnockoutComputed<number>;\n    public keep_base_priority_rank: KnockoutComputed<number>;\n    public destroy_base_priority_rank: KnockoutComputed<number>;\n    public hold_the_line_death_priority_rank: KnockoutComputed<number>;\n\n    public roles: KnockoutObservableArray<Role>;\n\n    constructor (\n        private logic: Logic,\n        public id: HenchmanIDs,\n        public name: string,\n        public is_essential: boolean,\n        public hold_the_line_baseline_score: number,\n\n        // Priorities\n        public hold_the_line_death_priority: number,\n        public armour_death_priority: number,\n        public shield_death_priority: number,\n        public weapon_death_priority: number,\n        public long_walk_death_priority: number,\n        public cutscene_rescue_priority: number,\n        public defence_report_priority: number,\n        public keep_base_priority: number,\n        public destroy_base_priority: number,\n\n        // Flags\n        public is_vent_ideal_candidate: boolean,\n        public is_bubble_ideal_candidate: boolean,\n        public is_leader_ideal_candidate: boolean,\n        public is_super_leader: boolean,\n        public is_escort_candidate: boolean,\n        public is_vent_candidate: boolean,\n        public is_bubble_candidate: boolean,\n        public is_leader_candidate: boolean,\n\n        public upgrade_unlocks_armour: boolean,\n        public upgrade_unlocks_shields: boolean,\n        public upgrade_unlocks_weapon: boolean\n    ) {\n        this.is_recruited = ko.observable(this.is_essential);\n        this.is_loyal = ko.observable(false);\n        this.is_upgraded = ko.observable(false);\n\n        this.is_recruited.subscribe((is_recruited: boolean): void => {\n            if (!is_recruited) {\n                if (this.is_essential) {\n                    this.is_recruited(true);\n                }\n\n                this.is_loyal(false);\n                this.is_upgraded(false);\n            }\n        });\n\n        this.is_loyal.subscribe((is_loyal: boolean): void => {\n            if (is_loyal) {\n                if (!this.is_recruited()) {\n                    this.is_loyal(false);\n                }\n            } else {\n                this.is_upgraded(false);\n            }\n        });\n\n        this.is_upgraded.subscribe((is_upgraded: boolean): void => {\n            if (is_upgraded) {\n                if (!this.is_loyal()) {\n                    this.is_upgraded(false);\n                }\n            }\n        });\n\n        this.is_good_vent_specialist = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_vent_ideal_candidate;\n        });\n        this.is_good_vent_fireteam_leader = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_leader_ideal_candidate;\n        });\n        this.is_good_escort = ko.pureComputed((): boolean => {\n            return this.is_loyal();\n        });\n        this.is_good_long_walk_specialist = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_bubble_ideal_candidate;\n        });\n        this.is_good_long_walk_fireteam_leader = ko.pureComputed((): boolean => {\n            return this.is_leader_ideal_candidate && (this.is_loyal() || this.is_super_leader);\n        });\n        this.is_good_boss_squadmate = ko.pureComputed((): boolean => {\n            return this.is_loyal();\n        });\n\n        this.hold_the_line_score = ko.pureComputed((): number => {\n            return this.hold_the_line_baseline_score + (this.is_loyal() ? 1 : 0);\n        });\n\n        this.roles = ko.observableArray([]);\n\n        // Roles\n        this\n        .syncRoleToObservable(logic.approach_squadmate_1, Role.ApproachSquadmate1)\n        .syncRoleToObservable(logic.approach_squadmate_2, Role.ApproachSquadmate2)\n        .syncRoleToObservable(logic.approach_armour_death, Role.ApproachArmorDeath)\n        .syncRoleToObservable(logic.approach_shields_death, Role.ApproachShieldsDeath)\n        .syncRoleToObservable(logic.approach_weapon_death, Role.ApproachWeaponDeath)\n        .syncRoleToObservable(logic.vents_specialist, Role.VentsSpecialist)\n        .syncRoleToObservable(logic.vents_fireteam_leader, Role.VentsFireteamLeader)\n        .syncRoleToObservable(logic.vents_squadmate_1, Role.VentsSquadmate1)\n        .syncRoleToObservable(logic.vents_squadmate_2, Role.VentsSquadmate2)\n        .syncRoleToObservable(logic.vents_death, Role.VentsDeath)\n        .syncRoleToObservable(logic.long_walk_specialist, Role.LongWalkSpecialist)\n        .syncRoleToObservable(logic.long_walk_fireteam_leader, Role.LongWalkFireteamLeader)\n        .syncRoleToObservable(logic.long_walk_escort, Role.LongWalkEscort)\n        .syncRoleToObservable(logic.long_walk_squadmate_1, Role.LongWalkSquadmate1)\n        .syncRoleToObservable(logic.long_walk_squadmate_2, Role.LongWalkSquadmate2)\n        .syncRoleToObservable(logic.long_walk_escort_death, Role.LongWalkEscortDeath)\n        .syncRoleToObservable(logic.long_walk_squadmate_death, Role.LongWalkSquadmateDeath)\n        .syncRoleToObservable(logic.long_walk_fireteam_leader_death, Role.LongWalkFireteamLeaderDeath)\n        .syncRoleToObservable(logic.boss_squadmate_1, Role.BossSquadmate1)\n        .syncRoleToObservable(logic.boss_squadmate_2, Role.BossSquadmate2)\n        .syncRoleToObservableSet(logic.boss_squadmate_deaths, Role.BossSquadmateDeath)\n        .syncRoleToObservableSet(logic.boss_hold_the_line_candidates, Role.BossHoldingTheLine)\n        .syncRoleToObservableSet(logic.boss_hold_the_line_deaths, Role.BossHoldingTheLineDeath);\n\n        this.survives = ko.pureComputed((): boolean => {\n            const candidates = logic.boss_survivors();\n            if (candidates) {\n                return _.contains(candidates, this);\n            }\n        });\n\n        this.armour_death_priority_rank = this.deriveRank(\"armour_death_priority\");\n        this.shield_death_priority_rank = this.deriveRank(\"shield_death_priority\");\n        this.weapon_death_priority_rank = this.deriveRank(\"weapon_death_priority\");\n        this.long_walk_death_priority_rank = this.deriveRank(\"long_walk_death_priority\");\n        this.cutscene_rescue_priority_rank = this.deriveRank(\"cutscene_rescue_priority\");\n        this.defence_report_priority_rank = this.deriveRank(\"defence_report_priority\");\n        this.keep_base_priority_rank = this.deriveRank(\"keep_base_priority\");\n        this.destroy_base_priority_rank = this.deriveRank(\"destroy_base_priority\");\n        this.hold_the_line_death_priority_rank = this.deriveRank(\"hold_the_line_death_priority\");\n    }\n\n    public hasRole (role: Role): boolean {\n        return this.roles.indexOf(role) > -1;\n    }\n\n    private deriveRank (field: string): KnockoutComputed<number> {\n        return ko.pureComputed((): number => {\n            const pool = this.logic.pool();\n            return this[field] > 0 ? (pool.length - _.indexOf<Teammate>(_.sortBy(pool, field), this)) : undefined;\n        });\n    }\n\n    private switchRole (role: Role, condition: boolean): void {\n        if (!condition) {\n            this.roles.remove(role);\n        } else if (!this.hasRole(role)) {\n            this.roles.push(role);\n        }\n    }\n\n    private syncRoleToObservable (observable: KnockoutObservable<Teammate>, role: Role): Teammate {\n        observable.subscribe((teammate: Teammate): void => {\n            return this.switchRole(role, teammate && (teammate.id === this.id));\n        });\n        return this;\n    }\n\n    private syncRoleToObservableSet (observable: KnockoutObservable<Teammate[]>, role: Role): Teammate {\n        observable.subscribe((teammates: Teammate[]): void => {\n            return this.switchRole(role, _.contains(teammates, this));\n        });\n        return this;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Teammate.ts\n **/"],"sourceRoot":""}