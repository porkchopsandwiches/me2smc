{"version":3,"sources":["webpack:///bundle.1.0.0.js","webpack:///webpack/bootstrap 7db060bbfddf2a9faf6f","webpack:///./source/typescript/app.ts","webpack:///./source/typescript/Knockout/Bindings/Modal.ts","webpack:///./source/typescript/Knockout/ForcibleComputed.ts","webpack:///./source/typescript/App/Application.ts","webpack:///./source/typescript/App/ME2/Henchman.ts","webpack:///./source/typescript/App/ME2/Stages/Stager.ts","webpack:///./source/typescript/App/ME2/Stages/Setup.ts","webpack:///./source/typescript/App/ME2/Stages/Stage.ts","webpack:///./source/typescript/App/ME2/Teammate.ts","webpack:///./source/typescript/App/ME2/TeammateField.ts","webpack:///./source/typescript/App/ME2/TeammateDeathList.ts","webpack:///./source/typescript/App/constants.ts","webpack:///./source/typescript/App/ME2/Stages/Occulus.ts","webpack:///./source/typescript/App/ME2/Stages/Vents.ts","webpack:///./source/typescript/App/ME2/Stages/LongWalk.ts","webpack:///./source/typescript/App/ME2/Stages/Boss.ts","webpack:///./source/typescript/App/ME2/Stages/Summary.ts","webpack:///./source/typescript/App/ME2/State.ts","webpack:///./source/typescript/App/ME2/Normandy.ts","webpack:///./source/typescript/App/ME2/Teammates.ts","webpack:///./source/typescript/Utilities/ObjectArray.ts","webpack:///./source/typescript/App/ME2/Serialisation.ts","webpack:///./source/typescript/App/ME2/Logic.ts","webpack:///./source/typescript/Knockout/Components/PickTeammate.ts","webpack:///./source/typescript/Knockout/Components/TeammateList.ts","webpack:///./source/typescript/Knockout/Components/RoleToggle.ts","webpack:///./source/typescript/Knockout/Components/RoleStatic.ts","webpack:///./source/typescript/Knockout/Components/DeathRoleStatic.ts","webpack:///./source/typescript/Knockout/Components/ObservableToggle.ts","webpack:///./source/typescript/Knockout/Components/TeammateName.ts","webpack:///./source/typescript/Knockout/Components/TeammateRow.ts","webpack:///./source/typescript/Knockout/Components/YesNo.ts","webpack:///./source/typescript/Knockout/Components/PriorityRank.ts","webpack:///./source/typescript/App/ME2/UI.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Modal_1","ForcibleComputed_1","PickTeammate_1","TeammateList_1","RoleToggle_1","RoleStatic_1","DeathRoleStatic_1","ObservableToggle_1","TeammateName_1","TeammateRow_1","YesNo_1","PriorityRank_1","Application_1","constants_1","Constants","Logic_1","name","join","_","extend","window","Application","Role","StageIDs","TeammateRoles","ko","bindingHandlers","init","element","value_accessor","all_bindings_accessor","data","context","$element","$","modal","show","utils","domNodeDisposal","addDisposeCallback","update","value","func","options","trigger","observable","notify","target","computed","valueHasMutated","Henchman_1","Stager_1","State_1","Serialisation_1","UI_1","this","henchmen","Henchman","HenchmanIDs","Garrus","Grunt","Jack","Jacob","Kasumi","Legion","Miranda","Mordin","Samara","Tali","Thane","Zaeed","serialisation","Serialisation","henchman","undefined","state","State","share","stager","Stager","location","search","length","applySerialisedState","substr","logic","Logic","ui","UI","renderYesNo","renderRank","renderTeammateName","teammate","highlight","ideal_symbol","renderTeammateNameVentVenter","willBeEffectiveVentVenter","renderTeammateNameVentLeader","willBeEffectiveVentLeader","renderTeammateNameLongWalkBubbler","willBeEffectiveLongWalkBubbler","renderTeammateNameLongWalkLeader","willBeEffectiveLongWalkLeader","renderTeammateNameLongWalkEscort","willBeEffectiveLongWalkEscort","renderTeammateNameBossSquadmate","willSurviveBeingBossSquadmate","renderTeammateNameKeepBaseAdvocate","renderTeammateDeathCause","death_cause","TeammateDeathCauses","ArmourFailure","ShieldingFailure","CannonFailure","VentsBadLeader","VentsBadVenter","Escort","LongWalkBadBubbler","LongWalkBadLeader","Boss","HoldTheLine","renderCrewSurvival","crew_survival","SummaryCrewSurvivalOptions","AllDied","HalfSurvived","AllSurvived","renderHTLScore","score","toString","showArmourDeathRankPopover","event","showRankPopover","getHenchmenSortedByArmourDeathPriority","showShieldingDeathRankPopover","getHenchmenSortedByShieldingDeathPriority","showCannonDeathRankPopover","getHenchmenSortedByCannonDeathPriority","showLongWalkDeathRankPopover","getHenchmenSortedByLongWalkDeathPriority","showHTMLDeathRankPopover","getHenchmenSortedByHTLDeathPriority","showDefenceReportRankPopover","getHenchmenSortedByDefenceReportPriority","showKeepBaseAdvocateRankPopover","getHenchmenSortedByKeepBasePriority","showDestroyBaseAdvocateRankPopover","getHenchmenSortedByDestroyBasePriority","showCutsceneRescueRankPopover","getHenchmenSortedByCutsceneRescuePriority","getDelayCandidates","NormandyDelayOptions","None","Few","Many","renderDelayValue","$target","title","list","$content","addClass","each","list_henchman","append","popover","html","content","on","prototype","getHenchmen","getHenchman","find","predictedToBeDead","stage","is_evaluatable","evaluate","app","is_essential","htl_value","htl_death_priority","armour_death_priority","shielding_death_priority","cannon_death_priority","long_walk_death_priority","cutscene_rescue_priority","defence_report_priority","keep_base_priority","destroy_base_priority","is_tech_expert","is_biotic_expert","is_leader","is_super_leader","is_escort_candidate","is_vent_candidate","is_bubble_candidate","is_leader_candidate","getHenchmenSortedBy","filter","getHTLDeathPriorityRank","indexOf","getArmourDeathPriorityRank","getShieldingDeathPriorityRank","getCannonDeathPriorityRank","getLongWalkDeathPriorityRank","getCutsceneRescuePriorityRank","getDefenceReportPriorityRank","getKeepBasePriorityRank","getDestroyBasePriorityRank","field","sortBy","reverse","Setup_1","Occulus_1","Vents_1","LongWalk_1","Boss_1","Summary_1","freezes","stages","Setup","Occulus","Vents","LongWalk","Summary","subscribe","setup","can_go_back","getStage","initial_freeze","serialise","reset","back","pop","next","current_stage","isEvaluatable","freeze","evaluateAndApply","push","__extends","d","b","__","constructor","hasOwnProperty","Object","create","Stage_1","TeammateDeathList_1","_super","_this","label","all_recruited","pureComputed","read","getTeammates","is_recruited","write","owner","all_loyal","is_loyal","TeammateDeathList","teammates","Stage","Teammate_1","TeammateField_1","genericTeammateFieldFilter","is_dead","apply","configureFields","configs","fields","map","config","TeammateField","candidates","evaluateImmediate","forcibleComputed","fields_missing","optional","getField","getFieldObservable","getFieldCandidates","getFieldValue","state_teammate","withRole","role","first","selector_teammate","no_teammate","Teammate","roles","observableArray","death_stage_id","addRole","hasRole","removeRole","remove","hasAnyOfTheseRoles","_i","arguments","some","hasAllOfTheseRoles","every","getHoldTheLineScore","die","stage_id","siblings","candidate","other_field","unshift","getAll","death","add","SerialisedElements","SerialisedTeammateElements","OcculusSquadmate1","OcculusSquadmate2","death_list","dpt","whoAreRecruited","withoutAnyOfTheseRoles","normandy","has_shielding","whoAreAlive","sortByShieldingDeathPriority","last","has_armour","sortByArmourDeathPriority","has_thanix_cannon","sortByCannonDeathPriority","VentsSquadmate1","VentsSquadmate2","VentsVenter","VentsLeader","venter","leader","LongWalkBubbler","LongWalkLeader","LongWalkEscort","LongWalkSquadmate1","LongWalkSquadmate2","escort","bubbler","withAnyOfTheseRoles","sortByLongWalkDeathPriority","BossSquadmate1","BossSquadmate2","updateHTLRoles","squadmate_1","squadmate_2","HeldTheLine","whoDieHoldingTheLine","squadmates","shepard_lives","shepard_pulled_up_by","defence_reporter","keep_base_advocate","destroy_base_advocate","htl_total","htl_score","htl_candidates_count","htl_death_count","htl_teammates","getDefenceReporter","getShepardLives","getShepardCatcher","getKeepBaseAdvocate","getDestroyBaseAdvocate","getCrewSurvival","getHoldTheLineTotal","toFixed","getHoldTheLineDeathCount","getLivingTeammates","sort","sortByDefenceReportPriority","whoAdvocateKeepingTheBase","sortByKeepBasePriority","whoAdvocateDestroyingTheBase","sortByDestroyBasePriority","delay","Normandy_1","Teammates_1","Normandy","bootstrapTeammates","serialised","_teammates","Teammates","chain","has_armor","_delay","parseInt","isNaN","ObjectArray_1","elements","oa","ObjectArray","fromObjectArray","withoutRole","sortByHenchmanProperty","property","ascending","sortByIsRecruited","without","iterator","findByHenchman","findByHenchmanID","slice","start","end","scores","reduce","sum","pool_size","death_count","cloneElements","factory","values","lpad","value_str","Array","indexesToFlags","indexes","accumulator","index","Math","pow","flagsToIndexes","flags","flag","getRoleCount","keys","serialiseNormandy","serialiseTeammate","deserialise","matches","match","SerialisedRegex","deserialised","StageID","deserialiseNormandyElements","NormandyDelay","NormandyFlags","TeammatesRegex","serialised_teammate","deserialiseTeammate","Error","new_state","new_teammates","new_teammate","removeAll","role_offset","TeammateRegex","henchman_id","HenchmanID","DeathCause","DeathStageID","Roles","serialised_delay","serialised_flags","hold_the_line_baseline_score","hold_the_line_death_priority","shield_death_priority","weapon_death_priority","is_vent_ideal_candidate","is_bubble_ideal_candidate","is_leader_ideal_candidate","upgrade_unlocks_armour","upgrade_unlocks_shields","upgrade_unlocks_weapon","is_upgraded","is_good_vent_specialist","is_good_vent_fireteam_leader","is_good_escort","is_good_long_walk_specialist","is_good_long_walk_fireteam_leader","is_good_boss_squadmate","hold_the_line_score","syncRoleToObservable","approach_squadmate_1","ApproachSquadmate1","approach_squadmate_2","ApproachSquadmate2","approach_armour_death","ApproachArmorDeath","approach_shields_death","ApproachShieldsDeath","approach_weapon_death","ApproachWeaponDeath","vents_specialist","VentsSpecialist","vents_fireteam_leader","VentsFireteamLeader","vents_squadmate_1","vents_squadmate_2","vents_death","VentsDeath","long_walk_specialist","LongWalkSpecialist","long_walk_fireteam_leader","LongWalkFireteamLeader","long_walk_escort","long_walk_squadmate_1","long_walk_squadmate_2","long_walk_escort_death","LongWalkEscortDeath","long_walk_squadmate_death","LongWalkSquadmateDeath","long_walk_fireteam_leader_death","LongWalkFireteamLeaderDeath","boss_squadmate_1","boss_squadmate_2","syncRoleToObservableSet","boss_squadmate_deaths","BossSquadmateDeath","boss_hold_the_line_candidates","BossHoldingTheLine","boss_hold_the_line_deaths","BossHoldingTheLineDeath","survives","boss_survivors","contains","armour_death_priority_rank","deriveRank","shield_death_priority_rank","weapon_death_priority_rank","long_walk_death_priority_rank","cutscene_rescue_priority_rank","defence_report_priority_rank","keep_base_priority_rank","destroy_base_priority_rank","hold_the_line_death_priority_rank","pool","switchRole","condition","console","log","normandy_has_armour","normandy_has_shields","has_shields","normandy_has_weapon","has_weapon","mission_delay","recruited","loyal","upgraded","all","all_upgraded","approach_squadmate_pool_1","approach_squadmate_pool_2","bindToPool","approach_evaluatable","approach_survivors","vents_specialist_pool","vents_fireteam_leader_pool","vents_squadmate_pool_1","vents_squadmate_pool_2","vents_evaluatable","specialist","vents_survivors","long_walk_specialist_pool","long_walk_fireteam_leader_pool","long_walk_escort_pool","long_walk_squadmate_pool_1","long_walk_squadmate_pool_2","long_walk_evaluatable","long_walk_fireteam_followers","long_walk_survivors","boss_squadmate_pool_1","boss_squadmate_pool_2","boss_evaluatable","deaths","boss_hold_the_line_total","boss_hold_the_line_rating","total","boss_hold_the_line_death_count","rating","concat","summary_defence_reporter","summary_advocates_keeping_base","s1","s2","summary_advocates_destroying_base","summary_shepard_lives","summary_catches_shepard","was_squadmate","serialisables","i","l","components","register","viewModel","params","template","rendered","glyphs","glyphicon","icon","available","classes","unwrap"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,qBAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/B,YE5CD,IAAAW,GAAAX,EAA8B,GAC9BY,EAAAZ,EAAyC,GACzCa,EAAAb,EAAqC,IACrCc,EAAAd,EAAqC,IACrCe,EAAAf,EAAmC,IACnCgB,EAAAhB,EAAmC,IACnCiB,EAAAjB,EAAwC,IACxCkB,EAAAlB,EAAyC,IACzCmB,EAAAnB,EAAqC,IACrCoB,EAAApB,EAAoC,IACpCqB,EAAArB,EAA8B,IAC9BsB,EAAAtB,EAAqC,IACrCuB,EAAAvB,EAA4B,GAC5BwB,EAAAxB,EAAwC,IAC5ByB,EAASzB,EAAM,IAC3B0B,EAAA1B,EAAqB,GAGrBA,GAAQ,SAGJW,EAAAgB,KACAf,EAAAe,KACAd,EAAAc,KACAb,EAAAa,KACAZ,EAAAY,KACAX,EAAAW,KACAV,EAAAU,KACAT,EAAAS,KACAR,EAAAQ,KACAP,EAAAO,KACAN,EAAAM,KACAL,EAAAK,KACAF,GACFG,KAAK,KAEPC,EAAEC,OAAOC,QACLC,YAAAT,EAAAS,YACAC,KAAAP,EAAAO,KACAR,WACIS,SAAAV,EAAAU,SACAC,cAAAX,EAAAW,kBFgDF,SAAS/B,EAAQD,GAEtB,YG7FYA,GAAAwB,KAAe,YAEvB,YACDS,GAAGC,gBAAgBlC,EAAAwB,OACfW,KAAM,SAACC,EAAsBC,EAAyCC,EAAoDC,EAAWC,GACjI,GAAMC,GAAWC,EAAEN,EAEnBK,GAASE,OACLC,MAAM,IAGVX,GAAGY,MAAMC,gBAAgBC,mBAAmBX,EAAS,WACjDK,EAASE,MAAM,cAGvBK,OAAQ,SAACZ,EAAsBC,EAAyCC,EAAoDC,EAAWC,GACnI,GAAMS,GAAQZ,IACRI,EAAWC,EAAEN,EAEfa,GACAR,EAASE,MAAM,QAEfF,EAASE,MAAM,cHoGzB,SAAS1C,EAAQD,GAEtB,YI5HYA,GAAAwB,KAAe,uBAEvB,YACDS,GAAGjC,EAAAwB,MAAQ,SAAI0B,EAAeV,EAAeW,GACzC,GAAMC,GAAiCnB,GAAGoB,aAAgB1B,QAAQ2B,OAAO,WACnEC,EAA8BtB,GAAGuB,SAAS,WAE5C,MADAJ,KACOF,EAAK9C,KAAKoC,IAClB,KAAMW,EAMT,OAJAI,GAA0B,kBAAI,WAC1BH,EAAQK,mBAGyBF,OJiIvC,SAAStD,EAAQD,EAASH,GAE/B,YKjJD,IAAA6D,GAAA7D,EAAyB,GACzB8D,EAAA9D,EAAuB,GACvB+D,EAAA/D,EAAsB,IACtBgE,EAAAhE,EAA8B,IAE9B0B,EAAA1B,EAAsB,IACtBiE,EAAAjE,EAAmB,IACnBwB,EAAAxB,EAAmG,IAEnGgC,EAAA,WAmMI,QAAAA,KACIkC,KAAKC,UAED,GAAIN,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYC,OAAW,mBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIT,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYE,MAAW,SAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIV,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYG,KAAW,QAAwB,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIX,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYI,MAAW,gBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIZ,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYK,OAAW,eAAwB,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIb,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYM,OAAW,UAAwB,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAId,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYO,QAAW,kBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIf,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYQ,OAAW,gBAAwB,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAE/N,GAAIhB,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYS,OAAW,UAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIjB,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYU,KAAW,cAAwB,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAIlB,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYW,MAAW,SAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAC/N,GAAInB,GAAAO,SAASF,KAAO1C,EAAA6C,YAAYY,MAAW,gBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,IAGnOf,KAAKgB,cAAgB,GAAIlB,GAAAmB,cAAcjB,MACvCA,KAAKkB,SAAWhD,GAAGoB,WAAqB6B,QACxCnB,KAAKoB,MAAQ,GAAIvB,GAAAwB,MAAMrB,MACvBA,KAAKsB,MAAQpD,GAAGoB,WAAmB6B,QACnCnB,KAAKuB,OAAS,GAAI3B,GAAA4B,OAAOxB,MAGrBnC,OAAO4D,SAASC,OAAOC,OAAS,GAChC3B,KAAKoB,MAAMQ,qBAAqB/D,OAAO4D,SAASC,OAAOG,OAAO,IAGlE7B,KAAK8B,MAAQ,GAAItE,GAAAuE,MAAM/B,MACvBA,KAAKgC,GAAK,GAAIjC,GAAAkC,GAAGjC,MAoBzB,MA1OkBlC,GAAAoE,YAAd,SAA2BhD,GACvB,MAAOA,GAAQ,MAAQ,MAGbpB,EAAAqE,WAAd,SAA0BjD,GACtB,MAAciC,UAAVjC,EACO,KAAOA,EAAQ,GAEf,uCAIDpB,EAAAsE,mBAAd,SAAkCC,EAAoBC,GAClD,MADkD,UAAAA,OAAA,GAC9CD,EACOA,EAASnB,SAASzD,MAAQ6E,EAAY,IAAMxE,EAAYyE,aAAe,IAEvE,OAIDzE,EAAA0E,6BAAd,SAA4CH,GACxC,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASI,8BAG/C3E,EAAA4E,6BAAd,SAA4CL,GACxC,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASM,8BAG/C7E,EAAA8E,kCAAd,SAAiDP,GAC7C,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASQ,mCAG/C/E,EAAAgF,iCAAd,SAAgDT,GAC5C,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASU,kCAG/CjF,EAAAkF,iCAAd,SAAgDX,GAC5C,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASY,kCAG/CnF,EAAAoF,gCAAd,SAA+Cb,GAC3C,MAAOvE,GAAYsE,mBAAmBC,EAAUA,EAASc,kCAG/CrF,EAAAsF,mCAAd,SAAkDf,GAC9C,MAAOvE,GAAYsE,mBAAmBC,EAAUA,GAAYA,EAASnB,SAAS/E,KAAOmB,EAAA6C,YAAYO,UAGvF5C,EAAAuF,yBAAd,SAAwCC,GACpC,OAAQA,GACJ,IAAKhG,GAAAiG,oBAAoBC,cACrB,MAAO,8BACX,KAAKlG,GAAAiG,oBAAoBE,iBACrB,MAAO,iCACX,KAAKnG,GAAAiG,oBAAoBG,cACrB,MAAO,4BACX,KAAKpG,GAAAiG,oBAAoBI,eACrB,MAAO,kBACX,KAAKrG,GAAAiG,oBAAoBK,eACrB,MAAO,kBACX,KAAKtG,GAAAiG,oBAAoBM,OACrB,MAAO,iBACX,KAAKvG,GAAAiG,oBAAoBO,mBACrB,MAAO,uBACX,KAAKxG,GAAAiG,oBAAoBQ,kBACrB,MAAO,sBACX,KAAKzG,GAAAiG,oBAAoBS,KACrB,MAAO,yBACX,KAAK1G,GAAAiG,oBAAoBU,YACrB,MAAO,yBACX,SACI,MAAO3G,GAAAiG,oBAAoBD,KAIzBxF,EAAAoG,mBAAd,SAAkCC,GAC9B,OAAQA,GACJ,IAAK7G,GAAA8G,2BAA2BC,QAC5B,MAAO,UACX,KAAK/G,GAAA8G,2BAA2BE,aAC5B,MAAO,eACX,KAAKhH,GAAA8G,2BAA2BG,YAC5B,MAAO,cACX,SACI,MAAOjH,GAAA8G,2BAA2BD,KAIhCrG,EAAA0G,eAAd,SAA8BC,GAC1B,OAAQA,GACJ,IAAK,GACD,MAAO,GACX,KAAK,GACD,MAAO,GACX,KAAK,GACD,MAAO,GACX,KAAK,GACD,MAAO,GACX,KAAK,GACD,MAAO,GACX,SACI,MAAOA,GAAMC,SAAS,MAKpB5G,EAAA6G,2BAAd,SAA0CzD,EAAoB0D,GAC1D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,gBAAiB0B,EAAUA,EAAS4D,2CAG9EhH,EAAAiH,8BAAd,SAA6C7D,EAAoB0D,GAC7D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,mBAAoB0B,EAAUA,EAAS8D,8CAGjFlH,EAAAmH,2BAAd,SAA0C/D,EAAoB0D,GAC1D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,gBAAiB0B,EAAUA,EAASgE,2CAG9EpH,EAAAqH,6BAAd,SAA4CjE,EAAoB0D,GAC5D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,mBAAoB0B,EAAUA,EAASkE,6CAGjFtH,EAAAuH,yBAAd,SAAwCnE,EAAoB0D,GACxD,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,uBAAwB0B,EAAUA,EAASoE,wCAGrFxH,EAAAyH,6BAAd,SAA4CrE,EAAoB0D,GAC5D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,kBAAmB0B,EAAUA,EAASsE,6CAGhF1H,EAAA2H,gCAAd,SAA+CvE,EAAoB0D,GAC/D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,sBAAuB0B,EAAUA,EAASwE,wCAGpF5H,EAAA6H,mCAAd,SAAkDzE,EAAoB0D,GAClE,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,yBAA0B0B,EAAUA,EAAS0E,2CAGvF9H,EAAA+H,8BAAd,SAA6C3E,EAAoB0D,GAC7D,MAAO9G,GAAY+G,gBAAgBlG,EAAEiG,EAAMpF,QAAS,iBAAkB0B,EAAUA,EAAS4E,8CAG/EhI,EAAAiI,mBAAd,WACI,OACIzI,EAAA0I,qBAAqBC,KACrB3I,EAAA0I,qBAAqBE,IACrB5I,EAAA0I,qBAAqBG,OAIfrI,EAAAsI,iBAAd,SAAgClH,GAC5B,OAAQA,GACJ,IAAK5B,GAAA0I,qBAAqBC,KACtB,MAAO,MACX,KAAK3I,GAAA0I,qBAAqBE,IACtB,MAAO,KACX,KAAK5I,GAAA0I,qBAAqBG,KACtB,MAAO,aACX,SACI,MAAO,GAAKjH,IAIVpB,EAAA+G,gBAAd,SAA+BwB,EAAiBC,EAAepF,EAAoBqF,GAC/E,GAAMC,GAAW7H,EAAE,UAAU8H,SAAS,oBACtC9I,GAAE+I,KAAKH,EAAM,SAACI,GACVH,EAASI,OACLjI,EAAE,UACDiI,OAAOD,EAAclJ,SAI9B4I,EAAQQ,SACJxH,QAAS,QACTiH,MAAOA,EACPQ,MAAM,EACNC,QAASP,IAEZQ,GAAG,oBAAqB,WACrBX,EAAQQ,QAAQ,aAEnBA,QAAQ,SAoCN/I,EAAAmJ,UAAAC,YAAP,WACI,MAAOlH,MAAKC,UAGTnC,EAAAmJ,UAAAE,YAAP,SAAoBhL,GAChB,MAAOwB,GAAEyJ,KAAKpH,KAAKC,SAAU,SAACiB,GAC1B,MAAOA,GAAS/E,KAAOA,KAIxB2B,EAAAmJ,UAAAI,kBAAP,SAA0BhF,GACtB,MAAIrC,MAAKoB,MAAMkG,QAAQC,mBACVvH,KAAKoB,MAAMkG,QAAQE,WAAWJ,KAAK/E,IAGzC,GAlPGvE,EAAAyE,aAAe,IAoPjCzE,IArPa7B,GAAA6B,YAAWA,GL+VlB,SAAS5B,EAAQD,GAEtB,YMvWD,IAAAiE,GAAA,WAwBI,QAAAA,GACIuH,EACAtL,EACAsB,EACAiK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GApBA,SAAAzM,MAAAgF,QACA,SAAA1D,MAAA,IACA,SAAAiK,OAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,MAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GACA,SAAAC,OAAA,GA5CG5I,KAAAvC,KAAe,GA8ClBuC,KAAKyH,IAAMA,EACXzH,KAAK7D,GAAKA,EACV6D,KAAKvC,KAAOA,EACZuC,KAAK0H,aAAeA,EACpB1H,KAAK2H,UAAYA,EACjB3H,KAAK4H,mBAAqBA,EAC1B5H,KAAK6H,sBAAwBA,EAC7B7H,KAAK8H,yBAA2BA,EAChC9H,KAAK+H,sBAAwBA,EAC7B/H,KAAKgI,yBAA2BA,EAChChI,KAAKiI,yBAA2BA,EAChCjI,KAAKkI,wBAA0BA,EAC/BlI,KAAKmI,mBAAqBA,EAC1BnI,KAAKoI,sBAAwBA,EAC7BpI,KAAKqI,eAAiBA,EACtBrI,KAAKsI,iBAAmBA,EACxBtI,KAAKuI,UAAYA,EACjBvI,KAAKwI,gBAAkBA,EACvBxI,KAAKyI,oBAAsBA,EAC3BzI,KAAK0I,kBAAoBA,EACzB1I,KAAK2I,oBAAsBA,EAC3B3I,KAAK4I,oBAAsBA,EAoFnC,MAjFW1I,GAAA+G,UAAAnC,uCAAP,WACI,MAAO9E,MAAK6I,oBAAoB,0BAG7B3I,EAAA+G,UAAAjC,0CAAP,WACI,MAAOhF,MAAK6I,oBAAoB,6BAG7B3I,EAAA+G,UAAA/B,uCAAP,WACI,MAAOlF,MAAK6I,oBAAoB,0BAG7B3I,EAAA+G,UAAA3B,oCAAP,WACI,MAAOtF,MAAK6I,oBAAoB,uBAG7B3I,EAAA+G,UAAA7B,yCAAP,WACI,MAAOpF,MAAK6I,oBAAoB,6BAG7B3I,EAAA+G,UAAAnB,0CAAP,WACI,MAAO9F,MAAK6I,oBAAoB,6BAG7B3I,EAAA+G,UAAAzB,yCAAP,WACI,MAAOxF,MAAK6I,oBAAoB,4BAG7B3I,EAAA+G,UAAAvB,oCAAP,WACI,MAAO/H,GAAEmL,OAAO9I,KAAK6I,oBAAoB,sBAAuB,SAAC3H,GAC7D,MAAOA,GAASiH,mBAAqB,KAItCjI,EAAA+G,UAAArB,uCAAP,WACI,MAAOjI,GAAEmL,OAAO9I,KAAK6I,oBAAoB,yBAA0B,SAAC3H,GAChE,MAAOA,GAASkH,sBAAwB,KAIzClI,EAAA+G,UAAA8B,wBAAP,WACI,MAAOpL,GAAEqL,QAAkBhJ,KAAKsF,sCAAuCtF,OAGpEE,EAAA+G,UAAAgC,2BAAP,WACI,MAAOtL,GAAEqL,QAAkBhJ,KAAK8E,yCAA0C9E,OAGvEE,EAAA+G,UAAAiC,8BAAP,WACI,MAAOvL,GAAEqL,QAAkBhJ,KAAKgF,4CAA6ChF,OAG1EE,EAAA+G,UAAAkC,2BAAP,WACI,MAAOxL,GAAEqL,QAAkBhJ,KAAKkF,yCAA0ClF,OAGvEE,EAAA+G,UAAAmC,6BAAP,WACI,MAAOzL,GAAEqL,QAAkBhJ,KAAKoF,2CAA4CpF,OAGzEE,EAAA+G,UAAAoC,8BAAP,WACI,MAAO1L,GAAEqL,QAAkBhJ,KAAK8F,4CAA6C9F,OAG1EE,EAAA+G,UAAAqC,6BAAP,WACI,MAAO3L,GAAEqL,QAAkBhJ,KAAKwF,2CAA4CxF,OAGzEE,EAAA+G,UAAAsC,wBAAP,WACI,MAAOvJ,MAAKmI,mBAAqB,EAAIxK,EAAEqL,QAAkBhJ,KAAK0F,sCAAuC1F,MAAQmB,QAG1GjB,EAAA+G,UAAAuC,2BAAP,WACI,MAAOxJ,MAAKoI,sBAAwB,EAAIzK,EAAEqL,QAAkBhJ,KAAK4F,yCAA0C5F,MAAQmB,QAG/GjB,EAAA+G,UAAA4B,oBAAR,SAA6BY,GACzB,MAAO9L,GAAE+L,OAAyB1J,KAAKyH,IAAIP,cAAe,SAAChG,GACvD,MAAOA,GAASuI,KACjBE,WAEXzJ,IAzJajE,GAAAiE,SAAQA,GN6df,SAAShE,EAAQD,EAASH,GAE/B,YO9dD,IAAA8N,GAAA9N,EAAsB,GACtB+N,EAAA/N,EAAwB,IACxBgO,EAAAhO,EAAsB,IACtBiO,EAAAjO,EAAyB,IACzBkO,EAAAlO,EAAqB,IACrBmO,EAAAnO,EAAwB,IAMxB0F,EAAA,WAOI,QAAAA,GAAaiG,GACTzH,KAAKyH,IAAMA,EACXzH,KAAKkK,WAELlK,KAAKmK,OAASxM,EAAE+L,QACZ,GAAIE,GAAAQ,MAAMpK,MACV,GAAI6J,GAAAQ,QAAQrK,MACZ,GAAI8J,GAAAQ,MAAMtK,MACV,GAAI+J,GAAAQ,SAASvK,MACb,GAAIgK,GAAAhG,KAAKhE,MACT,GAAIiK,GAAAO,QAAQxK,OACb,SAACsH,GACA,MAAOA,GAAMnL,KAGjB6D,KAAKyH,IAAIrG,MAAMkG,MAAMmD,UAAU,SAACnD,GAC5BA,EAAMoD,UAGV1K,KAAK2K,YAAczM,GAAGoB,YAAoB,GAG1CU,KAAKyH,IAAIrG,MAAMkG,MAAMtH,KAAK4K,SAAS,IAGnC5K,KAAK6K,eAAiB7K,KAAKyH,IAAIrG,MAAM0J,YAsC7C,MAnCWtJ,GAAAyF,UAAA2D,SAAP,SAAiBzO,GACb,MAAO6D,MAAKmK,OAAOhO,IAGhBqF,EAAAyF,UAAA8D,MAAP,WACI/K,KAAKyH,IAAIrG,MAAMQ,qBAAqB5B,KAAK6K,iBAGtCrJ,EAAAyF,UAAA+D,KAAP,WACQhL,KAAK2K,gBACL3K,KAAKyH,IAAIrG,MAAMQ,qBAAqB5B,KAAKkK,QAAQe,OACjDjL,KAAK2K,cAAc3K,KAAKkK,QAAQvI,UAIjCH,EAAAyF,UAAAiE,KAAP,WACI,GAAMC,GAAgBnL,KAAKyH,IAAIrG,MAAMkG,OAEjC6D,GAAcC,kBAGdpL,KAAKqL,SAELF,EAAcG,mBAEVH,EAAchP,GAAK6D,KAAKmK,OAAOxI,OAAS,GACxC3B,KAAKyH,IAAIrG,MAAMkG,MAAMtH,KAAK4K,SAASO,EAAchP,GAAK,MAK1DqF,EAAAyF,UAAAoE,OAAR,WACIrL,KAAKkK,QAAQqB,KAAKvL,KAAKyH,IAAIrG,MAAM0J,aACjC9K,KAAK2K,aAAY,IAEzBnJ,IAtEavF,GAAAuF,OAAMA,GPghBb,SAAStF,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,KQriBpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAAyB,IAGzBmQ,EAAAnQ,EAAkC,IAQlCsO,EAAA,SAAA8B,GAOI,QAAA9B,GAAa7I,GAPjB,GAAA4K,GAAAnM,IAQQkM,GAAA7P,KAAA2D,KAAMuB,GAPHvB,KAAA7D,GAAemB,EAAAU,SAASoM,MACxBpK,KAAAoM,MAAgB,SAQnBpM,KAAKqM,cAAgBnO,GAAGoO,cACpBC,KAAM,WACF,OAAQJ,EAAKK,eAAepF,KAAK,SAAC/E,GAC9B,OAAQA,EAASoK,kBAGzBC,MAAO,SAACL,GACJF,EAAKK,eAAe9F,KAAK,SAACrE,IAClBgK,GAAkBhK,EAASnB,SAASwG,cACpCrF,EAASoK,aAAaJ,MAIlCM,MAAO3M,OAGXA,KAAK4M,UAAY1O,GAAGoO,cAChBC,KAAM,WACF,OAAQJ,EAAKK,eAAepF,KAAK,SAAC/E,GAC9B,OAAQA,EAASwK,cAGzBH,MAAO,SAACE,GACAA,EACAT,EAAKK,eAAe9F,KAAK,SAACrE,GACtBA,EAASoK,cAAa,GACtBpK,EAASwK,UAAS,KAGtBV,EAAKK,eAAe9F,KAAK,SAACrE,GACtBA,EAASwK,UAAS,MAI9BF,MAAO3M,OAGXA,KAAKuH,eAAiBrJ,GAAGoO,aAAsB,WAC3C,GAAM/E,GAAiB5J,EAAEmL,OAAOqD,EAAKK,eAAetN,QAAS,SAACmD,GAC1D,MAAOA,GAASoK,iBACjB9K,QAAU,CAEb,OAAO4F,KAWnB,MA/D2BiE,GAAApB,EAAA8B,GAwDhB9B,EAAAnD,UAAAO,SAAP,WACI,MAAO,IAAIyE,GAAAa,mBAGP1C,EAAAnD,UAAAuF,aAAR,WACI,MAAOxM,MAAKuB,OAAOkG,IAAIrG,MAAM2L,aAErC3C,GA/D2B4B,EAAAgB,MAAd/Q,GAAAmO,MAAKA,GR4lBZ,SAASlO,EAAQD,EAASH,GAE/B,YS3mBD,IAAAmR,GAAAnR,EAAyB,GAGzBoR,EAAApR,EAAoD,GACpDmQ,EAAAnQ,EAAkC,IAClC6D,EAAA7D,EAAyB,GAEzBkR,EAAA,WAcI,QAAAA,GAAazL,GACTvB,KAAKuB,OAASA,EA4EtB,MAjFkByL,GAAAG,2BAAd,SAA0C9K,GACtC,MAAOA,GAASoK,iBAAmBpK,EAAS+K,WAOzCJ,EAAA/F,UAAAO,SAAP,WACI,MAAO,IAAIyE,GAAAa,mBAGRE,EAAA/F,UAAAqE,iBAAP,WACItL,KAAKwH,WAAW6F,SAIbL,EAAA/F,UAAAqG,gBAAP,SAAwBC,GAAxB,GAAApB,GAAAnM,IACIA,MAAKwN,UACLxN,KAAKwN,OAAS7P,EAAE8P,IAAyCF,EAAS,SAACG,GAC/D,MAAO,IAAIR,GAAAS,cAAcxB,EAAK5K,OAAOkG,IAAIrG,MAAO,WAAyB,MAAO+K,GAAKqB,QAAWE,KAIpG/P,EAAE+I,KAAK1G,KAAKwN,OAAQ,SAAC/D,GACjBA,EAAMmE,WAAWC,sBAGrB7N,KAAKuH,eAAiBrJ,GAAG4P,iBAA0B,WAE/C,GAAMC,KAAmBpQ,EAAEyJ,KAAK+E,EAAKqB,OAAQ,SAAC/D,GAC1C,GAAIA,EAAMiE,OAAOM,SACb,OAAO,CAGX,IAAM3L,GAAWoH,EAAMnK,YAEvB,OAAO+C,GAAqClB,SAAzBkB,EAASnB,SAAS/E,IAAoB,GAG7D,QAAQ4R,KAITf,EAAA/F,UAAAgH,SAAP,SAAiBxQ,GACb,MAAOE,GAAEyJ,KAAoBpH,KAAKwN,OAAQ,SAAC/D,GACvC,MAAOA,GAAMiE,OAAOjQ,OAASA,KAI9BuP,EAAA/F,UAAAiH,mBAAP,SAA2BzQ,GACvB,MAAOuC,MAAKiO,SAASxQ,GAAM6B,YAGxB0N,EAAA/F,UAAAkH,mBAAP,SAA2B1Q,GACvB,MAAOuC,MAAKiO,SAASxQ,GAAMmQ,YAGxBZ,EAAA/F,UAAAmH,cAAP,SAAsB3Q,GAClB,MAAOuC,MAAKkO,mBAAmBzQ,MAG5BuP,EAAA/F,UAAAyD,MAAP,cAAAyB,GAAAnM,IAEIrC,GAAE+I,KAAK1G,KAAKwN,OAAQ,SAAC/D,GAGjB,GAAM4E,GAAiBlC,EAAK5K,OAAOkG,IAAIrG,MAAM2L,YAAYuB,SAAS7E,EAAMiE,OAAOa,MAAMC,QAC/EC,EAAoBhF,EAAMnK,YAE5B+O,KAC0BlN,SAAtBsN,GAAmCA,EAAkBvN,SAAS/E,KAAOkS,EAAenN,SAAS/E,IAC7FsN,EAAMnK,WAAW+O,OAM1BrB,EAAA/F,UAAAmE,cAAP,WACI,MAAOpL,MAAKuH,kBAxFFyF,EAAA0B,YAAwB,GAAIzB,GAAA0B,SAAS,GAAIhP,GAAAO,SAASiB,OAAWA,OAAW,aA0F1F6L,IA3FsB/Q,GAAA+Q,MAAKA,GT+qBrB,SAAS9Q,EAAQD,GAEtB,YUrrBD,IAAA0S,GAAA,WASI,QAAAA,GAAazN,EAAoBuL,EAA+BI,EAA2BO,EAA0BwB,GATzH,GAAAzC,GAAAnM,IASqC,UAAAyM,OAAA,GAA+B,SAAAI,OAAA,GAA2B,SAAAO,OAAA,GAA0B,SAAAwB,UACjH5O,KAAKkB,SAAWA,EAChBlB,KAAKyM,aAAevO,GAAGoB,WAAoBmN,GAC3CzM,KAAK6M,SAAW3O,GAAGoB,WAAoBmN,GAAgBI,GACvD7M,KAAKoN,QAAUlP,GAAGoB,WAAoB8N,GACtCpN,KAAK4O,MAAQ1Q,GAAG2Q,gBAAgBD,GAChC5O,KAAKsD,YAAcpF,GAAGoB,WAAgC6B,QACtDnB,KAAK8O,eAAiB5Q,GAAGoB,WAAqB6B,QAG9CnB,KAAKyM,aAAahC,UAAU,SAACgC,IACpBA,GAAgBN,EAAKU,YACtBV,EAAKU,UAAS,KAyE9B,MAnEW8B,GAAA1H,UAAA8H,QAAP,SAAgBR,GAMZ,MALKvO,MAAKgP,QAAQT,IACTvO,KAAKoN,WACNpN,KAAK4O,MAAMrD,KAAKgD,GAGjBvO,MAIJ2O,EAAA1H,UAAAgI,WAAP,SAAmBV,GAIf,MAHKvO,MAAKoN,WACNpN,KAAK4O,MAAMM,OAAOX,GAEfvO,MAGJ2O,EAAA1H,UAAA+H,QAAP,SAAgBT,GACZ,MAAOvO,MAAK4O,MAAM5F,QAAQuF,GAAQ,IAG/BI,EAAA1H,UAAAkI,mBAAP,WV8qBK,IU9qBsB,GAA3BhD,GAAAnM,KAA2B4O,KAAAQ,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAAR,EAAAQ,EAAA,GAAAC,UAAAD,EACvB,OAAOzR,GAAE2R,KAAoBV,EAAO,SAACL,GACjC,MAAOpC,GAAK6C,QAAQT,MAIrBI,EAAA1H,UAAAsI,mBAAP,WVkrBK,IUlrBsB,GAA3BpD,GAAAnM,KAA2B4O,KAAAQ,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAAR,EAAAQ,EAAA,GAAAC,UAAAD,EACvB,OAAOzR,GAAE6R,MAAqBZ,EAAO,SAACL,GAClC,MAAOpC,GAAK6C,QAAQT,MAIrBI,EAAA1H,UAAAwI,oBAAP,WACI,MAAOzP,MAAKkB,SAASyG,WAAa3H,KAAK6M,WAAa,EAAI,IAGrD8B,EAAA1H,UAAAlE,8BAAP,WACI,MAAO/C,MAAKkB,SAASqH,YAAcvI,KAAK6M,YAAc7M,KAAKkB,SAASsH,kBAGjEmG,EAAA1H,UAAAhE,8BAAP,WACI,MAAOjD,MAAK6M,YAGT8B,EAAA1H,UAAApE,+BAAP,WACI,MAAO7C,MAAK6M,YAAc7M,KAAKkB,SAASoH,kBAGrCqG,EAAA1H,UAAA9D,8BAAP,WACI,MAAOnD,MAAK6M,YAGT8B,EAAA1H,UAAAxE,0BAAP,WACI,MAAOzC,MAAKkB,SAASmH,gBAAkBrI,KAAK6M,YAGzC8B,EAAA1H,UAAAtE,0BAAP,WACI,MAAO3C,MAAKkB,SAASqH,WAAavI,KAAK6M,YAGpC8B,EAAA1H,UAAAyI,IAAP,SAAYC,EAAoBrM,GAI5B,MAHAtD,MAAK8O,eAAea,GACpB3P,KAAKsD,YAAYA,GACjBtD,KAAKoN,SAAQ,GACNpN,MAEf2O,IA9Fa1S,GAAA0S,SAAQA,GVixBf,SAASzS,EAAQD,EAASH,GAE/B,YWlxBD,IAAAkQ,GAAAlQ,EAAsB,GAiBtB6R,EAAA,WAKI,QAAAA,GAAavM,EAAcwO,EAAuClC,GAC9D1N,KAAK0N,OAASA,EAGd1N,KAAKV,WAAapB,GAAGoB,WAAW6B,QAIhCnB,KAAK4N,WAAa1P,GAAG4P,iBAAiB,WAGlC,GAAMF,GAAyBxM,EAAM2L,YAAYjE,OAAO,SAACzG,GACrD,MAAOqL,GAAO5E,OAAOzG,EAAUjB,EAAM2L,eACtCjE,OAAO,SAAC+G,GACP,OAAQlS,EAAEyJ,KAAKwI,IAAY,SAACE,GAGxB,QAAIA,EAAYpC,OAAOjQ,OAASiQ,EAAOjQ,OAAQqS,EAAYxQ,YACnDwQ,EAAYxQ,eAAiBuQ,OAO1C3Q,OAKH,OAFA0O,GAAWmC,QAAQ/D,EAAAgB,MAAM0B,aAElBd,IAIX5N,KAAKV,WAAWmL,UAAU,SAACpI,GACHlB,SAAhBuM,EAAOa,MAAsBlM,GAAqClB,SAAzBkB,EAASnB,SAAS/E,IAC3DkG,EAAS4M,WAAWvB,EAAOa,OAEhC,KAAM,gBAGTvO,KAAKV,WAAWmL,UAAU,SAACpI,GACHlB,SAAhBuM,EAAOa,MACPlM,EAAS0M,QAAQrB,EAAOa,MAG5B5Q,EAAE+I,KAAKkJ,IAAY,SAACE,GACZA,EAAYpC,OAAOjQ,OAASiQ,EAAOjQ,MACnCqS,EAAYlC,WAAWC,wBAK3C,MAAAF,KA1Da1R,GAAA0R,cAAaA,GX8yBpB,SAASzR,EAAQD,GAEtB,YY5zBD,IAAA6Q,GAAA,WAGI,QAAAA,KZ6zBK,IY7zBQ,GAAAvG,MAAA6I,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAA7I,EAAA6I,EAAA,GAAAC,UAAAD,EACTpP,MAAKuG,KAAOA,EAwBpB,MArBWuG,GAAA7F,UAAAoG,MAAP,WAII,MAHA1P,GAAE+I,KAAK1G,KAAKuG,KAAM,SAAClI,GACfA,EAAQgE,SAASqN,IAAIrR,EAAQyQ,eAAgBzQ,EAAQiF,eAElDtD,MAGJ8M,EAAA7F,UAAA+I,OAAP,WACI,MAAOhQ,MAAKuG,MAGTuG,EAAA7F,UAAAG,KAAP,SAAa/E,GACT,MAAO1E,GAAEyJ,KAAKpH,KAAKuG,KAAM,SAAC0J,GACtB,MAAOA,GAAM5N,SAASnB,SAAS/E,KAAOkG,EAASnB,SAAS/E,MAIzD2Q,EAAA7F,UAAAiJ,IAAP,SAAYD,GAER,MADAjQ,MAAKuG,KAAKgF,KAAK0E,GACRjQ,MAEf8M,IA5Ba7Q,GAAA6Q,kBAAiBA,GZ81BxB,SAAS5Q,EAAQD,GAEtB,caz2BD,SAAYkE,GACRA,IAAA,mBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,mBAbQlE,EAAAkE,cAAAlE,EAAAkE,gBAAAlE,GAAAkE,aAgBZ,SAAY6F,GACRA,IAAA,eACAA,IAAA,aACAA,IAAA,gBAHQ/J,EAAA+J,uBAAA/J,EAAA+J,yBAAA/J,GAAA+J,sBAMZ,SAAYmK,GACRA,IAAA,aACAA,IAAA,qBACAA,IAAA,iCACAA,IAAA,iCACAA,IAAA,0BALQlU,EAAAkU,qBAAAlU,EAAAkU,uBAAAlU,GAAAkU,oBAQZ,SAAYC,GACRA,IAAA,aACAA,IAAA,2BACAA,IAAA,2BACAA,IAAA,+BACAA,IAAA,kBALQnU,EAAAmU,6BAAAnU,EAAAmU,+BAAAnU,GAAAmU,4BAQZ,SAAY7M,GACRA,IAAA,iCACAA,IAAA,uCACAA,IAAA,iCACAA,IAAA,mCACAA,IAAA,mCACAA,IAAA,2CACAA,IAAA,yCACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,8BAVQtH,EAAAsH,sBAAAtH,EAAAsH,wBAAAtH,GAAAsH,qBAaZ,SAAYtF,GACRA,IAAA,yCACAA,IAAA,yCACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,2CACAA,IAAA,2CACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,+BAdQhC,EAAAgC,gBAAAhC,EAAAgC,kBAAAhC,GAAAgC,eAiBZ,SAAYD,GACRA,IAAA,iBACAA,IAAA,qBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,eACAA,IAAA,sBANQ/B,EAAA+B,WAAA/B,EAAA+B,aAAA/B,GAAA+B,UASZ,SAAYoG,GACRA,IAAA,6BACAA,IAAA,+BACAA,IAAA,sBAHQnI,EAAAmI,6BAAAnI,EAAAmI,+BAAAnI,GAAAmI,4Bbo3BN,SAASlI,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,Kcv8BpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAA6D,IAC7DmQ,EAAAnQ,EAAkC,IAKlCuO,EAAA,SAAA6B,GAII,QAAA7B,GAAa9I,GACT2K,EAAA7P,KAAA2D,KAAMuB,GAJHvB,KAAA7D,GAAemB,EAAAU,SAASqM,QACxBrK,KAAAoM,MAAgB,UAKnBpM,KAAKsN,kBAEG7P,KAAM,sBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAcoS,oBAGpB5S,KAAM,sBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAcqS,qBA0CpC,MA1D6B9E,GAAAnB,EAAA6B,GAqBlB7B,EAAApD,UAAAO,SAAP,WACI,GAAM+I,GAAa,GAAItE,GAAAa,kBAGjB0D,EAAMxQ,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAY0D,kBAAkBC,uBAAuBpT,EAAAW,cAAcoS,kBAAmB/S,EAAAW,cAAcqS,kBA+BtI,OA5BKtQ,MAAKuB,OAAOkG,IAAIrG,MAAMuP,SAASC,iBAChCL,EAAWL,KACP7N,SAAUmO,EAAIK,cAAcC,+BAA+BC,OAC3DzN,YAAahG,EAAAiG,oBAAoBE,iBACjCqL,eAAgB9O,KAAK7D,KAMxB6D,KAAKuB,OAAOkG,IAAIrG,MAAMuP,SAASK,cAEhCT,EAAWL,KACP7N,SAAUmO,EAAIK,cAAcI,4BAA4BF,OACxDzN,YAAahG,EAAAiG,oBAAoBC,cACjCsL,eAAgB9O,KAAK7D,KAIxB6D,KAAKuB,OAAOkG,IAAIrG,MAAMuP,SAASO,qBAEhCX,EAAWL,KACP7N,SAAUmO,EAAIK,cAAcM,4BAA4BJ,OACxDzN,YAAahG,EAAAiG,oBAAoBG,cACjCoL,eAAgB9O,KAAK7D,KAItBoU,GAEflG,GA1D6B2B,EAAAgB,MAAhB/Q,GAAAoO,QAAOA,Gdw/Bd,SAASnO,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,KetgCpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAA6D,IAE7DmQ,EAAAnQ,EAAkC,IAKlCwO,EAAA,SAAA4B,GAII,QAAA5B,GAAa/I,GACT2K,EAAA7P,KAAA2D,KAAMuB,GAJHvB,KAAA7D,GAAemB,EAAAU,SAASsM,MACxBtK,KAAAoM,MAAgB,QAKnBpM,KAAKsN,kBAEG7P,KAAM,mBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAcmT,kBAGpB3T,KAAM,mBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAcoT,kBAGpB5T,KAAM,cACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,WAAa/K,EAASnB,SAASwH,mBAE/E6F,KAAMjR,EAAAW,cAAcqT,cAGpB7T,KAAM,cACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,WAAa/K,EAASnB,SAAS0H,qBAE/E2F,KAAMjR,EAAAW,cAAcsT,eA6BpC,MA3D2B/F,GAAAlB,EAAA4B,GAmChB5B,EAAArD,UAAAO,SAAP,WACI,GAAM+I,GAAa,GAAItE,GAAAa,kBAEjB0E,EAASxR,KAAKoO,cAAc,eAC5BqD,EAASzR,KAAKoO,cAAc,cAkBlC,OAhBKoD,GAAO/O,4BAOAgP,EAAO9O,6BAEf4N,EAAWL,KACP7N,SAAUmP,EACV1C,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBI,iBAVrC4M,EAAWL,KACP7N,SAAUmP,EACV1C,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBK,iBAWlC2M,GAEfjG,GA3D2B0B,EAAAgB,MAAd/Q,GAAAqO,MAAKA,Gf8jCZ,SAASpO,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,KgB7kCpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAA6D,IAG7DmQ,EAAAnQ,EAAkC,IAIlCyO,EAAA,SAAA2B,GAII,QAAA3B,GAAahJ,GACT2K,EAAA7P,KAAA2D,KAAMuB,GAJHvB,KAAA7D,GAAemB,EAAAU,SAASuM,SACxBvK,KAAAoM,MAAgB,YAInBpM,KAAKsN,kBAEG7P,KAAM,oBACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,WAAa/K,EAASnB,SAASyH,qBAE/E4F,KAAMjR,EAAAW,cAAcyT,kBAGpBjU,KAAM,mBACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,WAAa/K,EAASnB,SAAS0H,qBAE/E2F,KAAMjR,EAAAW,cAAc0T,iBAGpBlU,KAAM,mBACNqL,OAAQ,SAACzG,EAAoB0K,GAGzB,MAAIA,GAAU8D,cAAclP,UAAY,GAC7B,EAGJU,EAASoK,iBAAmBpK,EAAS+K,WAAa/K,EAASnB,SAASuH,qBAE/EuF,UAAU,EACVO,KAAMjR,EAAAW,cAAc2T,iBAGpBnU,KAAM,wBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAc4T,qBAGpBpU,KAAM,wBACNqL,OAAQkD,EAAAgB,MAAMG,2BACdoB,KAAMjR,EAAAW,cAAc6T,sBA2CpC,MAtF8BtG,GAAAjB,EAAA2B,GAgDnB3B,EAAAtD,UAAAO,SAAP,WACI,GAAM+I,GAAa,GAAItE,GAAAa,kBACjBiF,EAAS/R,KAAKoO,cAAc,oBAC5B4D,EAAUhS,KAAKoO,cAAc,qBAC7BqD,EAASzR,KAAKoO,cAAc,mBAgClC,OA7B2BjN,UAAvB4Q,EAAO7Q,SAAS/E,IAAqB4V,EAAO9O,iCAE5CsN,EAAWL,KACP7N,SAAU0P,EACVjD,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBM,SAKpCmO,EAAQnP,kCAET0N,EAAWL,KACP7N,SAAUrC,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYkF,oBAAoB3U,EAAAW,cAAc4T,mBAAoBvU,EAAAW,cAAc6T,oBAAoBI,8BAA8BnB,OAClKjC,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBO,qBAKpC2N,EAAO1O,iCAERwN,EAAWL,KACP7N,SAAUoP,EACV3C,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBQ,oBAIlCwM,GAEfhG,GAtF8ByB,EAAAgB,MAAjB/Q,GAAAsO,SAAQA,GhBwpCf,SAASrO,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,KiBvqCpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAA6D,IAE7DmQ,EAAAnQ,EAAkC,IAKlCkI,EAAA,SAAAkI,GAII,QAAAlI,GAAazC,GAJjB,GAAA4K,GAAAnM,IAKQkM,GAAA7P,KAAA2D,KAAMuB,GAJHvB,KAAA7D,GAAemB,EAAAU,SAASgG,KACxBhE,KAAAoM,MAAgB,OAInBpM,KAAKsN,kBAEG7P,KAAM,mBACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,YAAc/K,EAAS2M,QAAQ1R,EAAAW,cAAc2T,iBAE7FrD,KAAMjR,EAAAW,cAAckU,iBAGpB1U,KAAM,mBACNqL,OAAQ,SAACzG,GACL,MAAOA,GAASoK,iBAAmBpK,EAAS+K,YAAc/K,EAAS2M,QAAQ1R,EAAAW,cAAc2T,iBAE7FrD,KAAMjR,EAAAW,cAAcmU,kBAI5BpS,KAAKkO,mBAAmB,oBAAoBzD,UAAU,WAClD0B,EAAKkG,mBAGTrS,KAAKkO,mBAAmB,oBAAoBzD,UAAU,WAClD0B,EAAKkG,mBAiDjB,MA7E0B7G,GAAAxH,EAAAkI,GAgCflI,EAAAiD,UAAAO,SAAP,cAAA2E,GAAAnM,KACUuQ,EAAa,GAAItE,GAAAa,kBACjBwF,EAActS,KAAKoO,cAAc,oBACjCmE,EAAcvS,KAAKoO,cAAc,mBA6BvC,OA1BKkE,GAAYnP,iCAEboN,EAAWL,KACP7N,SAAUiQ,EACVxD,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBS,OAGpCuO,EAAYpP,iCAEboN,EAAWL,KACP7N,SAAUkQ,EACVzD,eAAgB9O,KAAK7D,GACrBmH,YAAahG,EAAAiG,oBAAoBS,OAKzChE,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYuB,SAAShR,EAAAW,cAAcuU,aAAaC,uBAAuB/L,KAAK,SAACrE,GAC/FkO,EAAWL,KACP7N,SAAUA,EACVyM,eAAgB3C,EAAKhQ,GACrBmH,YAAahG,EAAAiG,oBAAoBU,gBAIlCsM,GAGHvM,EAAAiD,UAAAoL,eAAR,WACI,GAAMK,GAAa1S,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYkF,oBAAoB3U,EAAAW,cAAckU,eAAgB7U,EAAAW,cAAcmU,gBAC/GxE,EAAa5N,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAY8D,cAAcJ,iBAGnEiC,GAAWzD,WAAW3R,EAAAW,cAAcuU,aACR,IAAxBE,EAAW/Q,UACXiM,EAAWqB,WAAW3R,EAAAW,cAAcuU,aAAa9B,uBAAuBpT,EAAAW,cAAckU,eAAgB7U,EAAAW,cAAcmU,eAAgB9U,EAAAW,cAAc2T,gBAAgB7C,QAAQzR,EAAAW,cAAcuU,cAGpMxO,GA7E0BgI,EAAAgB,MAAb/Q,GAAA+H,KAAIA,GjB4uCX,SAAS9H,EAAQD,EAASH,GAE/B,YACA,IAAI0P,GAAaxL,MAAQA,KAAKwL,WAAc,SAAUC,EAAGC,GAErD,QAASC,KAAO3L,KAAK4L,YAAcH,EADnC,IAAK,GAAIjP,KAAKkP,GAAOA,EAAEG,eAAerP,KAAIiP,EAAEjP,GAAKkP,EAAElP,GAEnDiP,GAAExE,UAAkB,OAANyE,EAAaI,OAAOC,OAAOL,IAAMC,EAAG1E,UAAYyE,EAAEzE,UAAW,GAAI0E,KkB3vCpFK,EAAAlQ,EAAsB,GAEtBwB,EAAAxB,EAA0F,IAG1FmQ,EAAAnQ,EAAkC,IAUlC0O,EAAA,SAAA0B,GAcI,QAAA1B,GAAajJ,GACT2K,EAAA7P,KAAA2D,KAAMuB,GAdHvB,KAAA7D,GAAemB,EAAAU,SAASwM,QACxBxK,KAAAoM,MAAgB,UAcnBpM,KAAK2S,cAAgBzU,GAAGoB,WAAW6B,QACnCnB,KAAK4S,qBAAuB1U,GAAGoB,WAAW6B,QAC1CnB,KAAK6S,iBAAmB3U,GAAGoB,WAAW6B,QACtCnB,KAAK8S,mBAAqB5U,GAAGoB,WAAW6B,QACxCnB,KAAK+S,sBAAwB7U,GAAGoB,WAAW6B,QAC3CnB,KAAKmE,cAAgBjG,GAAGoB,WAAW6B,QACnCnB,KAAKuH,eAAiBrJ,GAAGoB,YAAW,GACpCU,KAAKgT,UAAY9U,GAAGoB,WAAmB6B,QACvCnB,KAAKiT,UAAY/U,GAAGoB,WAAmB6B,QACvCnB,KAAKkT,qBAAuBhV,GAAGoB,WAAmB6B,QAClDnB,KAAKmT,gBAAkBjV,GAAGoB,WAAmB6B,QAmErD,MA7F6BqK,GAAAhB,EAAA0B,GA6BlB1B,EAAAvD,UAAAO,SAAP,WACI,MAAO,IAAIyE,GAAAa,mBAGRtC,EAAAvD,UAAAyD,MAAP,WACI,GAAM0I,GAAgBpT,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYuB,SAAShR,EAAAW,cAAcuU,YAE/ExS,MAAK6S,iBAAiB7S,KAAKqT,sBAC3BrT,KAAK2S,cAAc3S,KAAKsT,mBACxBtT,KAAK4S,qBAAqB5S,KAAKuT,qBAC/BvT,KAAK8S,mBAAmB9S,KAAKwT,uBAC7BxT,KAAK+S,sBAAsB/S,KAAKyT,0BAChCzT,KAAKmE,cAAcnE,KAAK0T,mBAExB1T,KAAKgT,UAAUI,EAAcO,uBAC7B3T,KAAKiT,UAAUG,EAAc3D,sBAAsBmE,QAAQ,IAC3D5T,KAAKkT,qBAAqBE,EAAczR,UACxC3B,KAAKmT,gBAAgBC,EAAcS,6BAG/BrJ,EAAAvD,UAAA6M,mBAAR,WACI,MAAO9T,MAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAY8D,cAAcJ,mBAGnDjG,EAAAvD,UAAAqM,gBAAR,WACI,MAAOtT,MAAK8T,qBAAqBnS,SAAW,GAGxC6I,EAAAvD,UAAAsM,kBAAR,WACI,GAAM3F,GAAa5N,KAAK8T,qBAAqBC,KAAK,SAAC1R,GAC/C,GAAIoC,GAAQpC,EAASnB,SAAS+G,0BAA4B5F,EAAS8M,mBAAmB7R,EAAAW,cAAckU,eAAgB7U,EAAAW,cAAcmU,gBAAkB,IAAM,EAC1J,OAAO3N,IAGX,OAAOmJ,GAAWjM,SAAW,EAAIiM,EAAWmD,OAAS5P,QAGjDqJ,EAAAvD,UAAAoM,mBAAR,WACI,MAAOrT,MAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYuB,SAAShR,EAAAW,cAAcuU,aAAawB,8BAA8BjD,QAGvGvG,EAAAvD,UAAAuM,oBAAR,WACI,MAAOxT,MAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYkF,oBAAoB3U,EAAAW,cAAckU,eAAgB7U,EAAAW,cAAcmU,gBAAgB6B,4BAA4BC,yBAAyBnD,QAG1KvG,EAAAvD,UAAAwM,uBAAR,WACI,MAAOzT,MAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYkF,oBAAoB3U,EAAAW,cAAckU,eAAgB7U,EAAAW,cAAcmU,gBAAgB+B,+BAA+BC,4BAA4BrD,QAGhLvG,EAAAvD,UAAAyM,gBAAR,WAGI,MAA0F,KAAtF1T,KAAKuB,OAAOkG,IAAIrG,MAAM2L,YAAYuB,SAAShR,EAAAW,cAAc2T,gBAAgBjQ,SAClErE,EAAA8G,2BAA2BC,QAGlCrE,KAAKuB,OAAOkG,IAAIrG,MAAMuP,SAAS0D,UAAY/W,EAAA0I,qBAAqBC,KACzD3I,EAAA8G,2BAA2BG,YAC3BvE,KAAKuB,OAAOkG,IAAIrG,MAAMuP,SAAS0D,UAAY/W,EAAA0I,qBAAqBE,IAChE5I,EAAA8G,2BAA2BE,aAE3BhH,EAAA8G,2BAA2BC,SAG9CmG,GA7F6BwB,EAAAgB,MAAhB/Q,GAAAuO,QAAOA,GlB8zCd,SAAStO,EAAQD,EAASH,GAE/B,YmB90CD,IAAAwY,GAAAxY,EAAyB,IAGzByY,EAAAzY,EAA0B,IAC1BmR,EAAAnR,EAAyB,GAGzBuF,EAAA,WAQI,QAAAA,GAAaoG,GARjB,GAAA0E,GAAAnM,IASQA,MAAKyH,IAAMA,EACXzH,KAAK2Q,SAAW,GAAI2D,GAAAE,UAAS,GAAM,GAAM,GACzCxU,KAAKsH,MAAQpJ,GAAGoB,WAAW6B,QAC3BnB,KAAKyU,qBAELzU,KAAK0U,WAAaxW,GAAG4P,iBAA2C,WAC5D,MAAI3B,GAAK7E,QACE6E,EAAKrB,YAEL,KAsBvB,MAjBWzJ,GAAA4F,UAAA6D,UAAP,WACI,MAAO9K,MAAKyH,IAAIzG,cAAc8J,UAAU9K,OAGrCqB,EAAA4F,UAAArF,qBAAP,SAA6B8S,GACzB1U,KAAKyH,IAAIzG,cAAcY,qBAAqB5B,KAAM0U,IAG9CrT,EAAA4F,UAAAwN,mBAAR,WACIzU,KAAK2U,WAAa,GAAIJ,GAAAK,UAAUjX,EAAEkX,MAAgB7U,KAAKyH,IAAIP,eAAeuG,IAAc,SAACvM,GACrF,MAAO,IAAI+L,GAAA0B,SAASzN,EAAUA,EAASwG,cAAc,GAAO,KAC7DgC,OAAO,SAACrH,GACP,MAAOA,GAASnB,SAASzD,OAC1ByB,SAEHc,KAAK+M,UAAY7O,GAAGoB,WAAsBU,KAAK2U,aAEvDtT,IAxCapF,GAAAoF,MAAKA,GnBg3CZ,SAASnF,EAAQD,EAASH,GAE/B,YoB13CD,IAAAwB,GAAAxB,EAAqC,IAErC0Y,EAAA,WAOI,QAAAA,GACIM,EACAlE,EACAM,EACAmD,GAXR,GAAAlI,GAAAnM,IAQQ,UAAA8U,OAAA,GACA,SAAAlE,OAAA,GACA,SAAAM,OAAA,GACA,SAAAmD,MAAA,GAEArU,KAAKgR,WAAa9S,GAAGoB,WAAoBwV,GACzC9U,KAAK4Q,cAAgB1S,GAAGoB,WAAoBsR,GAC5C5Q,KAAKkR,kBAAoBhT,GAAGoB,WAAoB4R,GAChDlR,KAAK+U,OAAS7W,GAAGoB,WAAmB+U,GAEpCrU,KAAKqU,MAAQnW,GAAGoO,cACZC,KAAM,WACF,MAAOJ,GAAK4I,UAEhBrI,MAAO,SAACxN,GACJ,GAAMmV,GAAQW,SAAS,GAAK9V,EAAO,KAE9BvB,EAAEsX,MAAMZ,IAAUA,GAAS/W,EAAA0I,qBAAqBC,MAAQoO,GAAS/W,EAAA0I,qBAAqBG,MACvFgG,EAAK4I,OAAOV,MAKhC,MAAAG,KA/BavY,GAAAuY,SAAQA,GpBw5Cf,SAAStY,EAAQD,EAASH,GAE/B,YqB35CD,IAAAoZ,GAAApZ,EAAkD,IAIlD8Y,EAAA,WAII,QAAAA,GAAaO,GACTnV,KAAKoV,GAAK,GAAIF,GAAAG,YAAsBF,GAgP5C,MA7OkBP,GAAAU,gBAAd,SAA+BF,GAC3B,MAAO,IAAIR,GAAUQ,EAAGD,WAGrBP,EAAA3N,UAAA/H,MAAP,WACI,MAAOc,MAAKoV,GAAGD,UAGZP,EAAA3N,UAAAuH,MAAP,WACI,MAAOxO,MAAKoV,GAAG5G,SAGZoG,EAAA3N,UAAA8J,KAAP,WACI,MAAO/Q,MAAKoV,GAAGrE,QAGZ6D,EAAA3N,UAAAtF,OAAP,WACI,MAAO3B,MAAKoV,GAAGzT,UAGZiT,EAAA3N,UAAA4J,YAAP,WACI,MAAO7Q,MAAK8I,OAAO,SAACzG,GAChB,OAAQA,EAAS+K,aAIlBwH,EAAA3N,UAAAyI,IAAP,SAAYC,EAAoBrM,GAI5B,MAHAtD,MAAK0G,KAAK,SAACrE,GACPA,EAASqN,IAAIC,EAAUrM,KAEpBtD,MAGJ4U,EAAA3N,UAAAwJ,gBAAP,WACI,MAAOzQ,MAAK8I,OAAO,SAACzG,GAChB,MAAOA,GAASoK,kBAIjBmI,EAAA3N,UAAA8H,QAAP,SAAgBR,GAIZ,MAHAvO,MAAK0G,KAAK,SAACrE,GACPA,EAAS0M,QAAQR,KAEdvO,MAGJ4U,EAAA3N,UAAAgI,WAAP,SAAmBV,GAIf,MAHAvO,MAAK0G,KAAK,SAACrE,GACPA,EAAS4M,WAAWV,KAEjBvO,MAGJ4U,EAAA3N,UAAAqH,SAAP,SAAiBC,GACb,MAAOvO,MAAK8I,OAAO,SAACzG,GAChB,MAAOA,GAAS2M,QAAQT,MAIzBqG,EAAA3N,UAAAgL,oBAAP;ArB44CK,IqB54CuB,GAAArD,MAAAQ,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAAR,EAAAQ,EAAA,GAAAC,UAAAD,EACxB,OAAOpP,MAAK8I,OAAO,SAACzG,GAChB,MAAOA,GAAS8M,mBAAmB9B,MAAMhL,EAAUuM,MAIpDgG,EAAA3N,UAAAsO,YAAP,SAAoBhH,GAChB,MAAOvO,MAAK8I,OAAO,SAACzG,GAChB,OAAQA,EAAS2M,QAAQT,MAI1BqG,EAAA3N,UAAAyJ,uBAAP,WrB84CK,IqB94C0B,GAAA9B,MAAAQ,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAAR,EAAAQ,EAAA,GAAAC,UAAAD,EAC3B,OAAOpP,MAAK8I,OAAO,SAACzG,GAChB,OAAQA,EAAS8M,mBAAmB9B,MAAMhL,EAAUuM,MAIrDgG,EAAA3N,UAAAuO,uBAAP,SAA+BC,EAAkBC,GAC7C,MAD6C,UAAAA,OAAA,GACtC1V,KAAK+T,KAAa,SAAC1R,GACtB,OAAQqT,EAAY,EAAI,IAAMrT,EAASnB,SAASuU,MAIjDb,EAAA3N,UAAA6J,6BAAP,SAAqC4E,GACjC,MADiC,UAAAA,OAAA,GAC1B1V,KAAKwV,uBAAuB,2BAA4BE,IAG5Dd,EAAA3N,UAAAgK,0BAAP,SAAkCyE,GAC9B,MAD8B,UAAAA,OAAA,GACvB1V,KAAKwV,uBAAuB,wBAAyBE,IAGzDd,EAAA3N,UAAAkK,0BAAP,SAAkCuE,GAC9B,MAD8B,UAAAA,OAAA,GACvB1V,KAAKwV,uBAAuB,wBAAyBE,IAGzDd,EAAA3N,UAAAiL,4BAAP,SAAoCwD,GAChC,MADgC,UAAAA,OAAA,GACzB1V,KAAKwV,uBAAuB,2BAA4BE,IAG5Dd,EAAA3N,UAAA+M,4BAAP,SAAoC0B,GAChC,MADgC,UAAAA,OAAA,GACzB1V,KAAKwV,uBAAuB,0BAA2BE,IAG3Dd,EAAA3N,UAAAiN,uBAAP,SAA+BwB,GAC3B,MAD2B,UAAAA,OAAA,GACpB1V,KAAKwV,uBAAuB,qBAAsBE,IAGtDd,EAAA3N,UAAAmN,0BAAP,SAAkCsB,GAC9B,MAD8B,UAAAA,OAAA,GACvB1V,KAAKwV,uBAAuB,wBAAyBE,IAGzDd,EAAA3N,UAAA0O,kBAAP,SAA0BD,GACtB,MADsB,UAAAA,OAAA,GACf1V,KAAK+T,KAAa,SAAC1R,GACtB,MAAOA,GAASoK,eAAiB,EAAI,KAItCmI,EAAA3N,UAAAgN,0BAAP,WACI,MAAOjU,MAAK8I,OAAO,SAACzG,GAChB,MAAOA,GAASnB,SAASiH,mBAAqB,KAI/CyM,EAAA3N,UAAAkN,6BAAP,WACI,MAAOnU,MAAK8I,OAAO,SAACzG,GAChB,MAAOA,GAASnB,SAASkH,sBAAwB,KAIlDwM,EAAA3N,UAAA2O,QAAP,WrB+4CK,IqB/4CW,GAAA7I,MAAAqC,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAArC,EAAAqC,EAAA,GAAAC,UAAAD,EACZ,OAAOwF,GAAUU,gBAAgBtV,KAAKoV,GAAGQ,QAAQvI,MAAMrN,KAAKoV,GAAIrI,KAG7D6H,EAAA3N,UAAA6B,OAAP,SAAe+M,GACX,MAAOjB,GAAUU,gBAAgBtV,KAAKoV,GAAGtM,OAAO+M,KAG7CjB,EAAA3N,UAAAwG,IAAP,SAAqBoI,GACjB,MAAO7V,MAAKoV,GAAG3H,IAAIoI,IAGhBjB,EAAA3N,UAAAG,KAAP,SAAayO,GACT,MAAO7V,MAAKoV,GAAGhO,KAAKyO,IAGjBjB,EAAA3N,UAAA6O,eAAP,SAAuB5U,GACnB,MAAOlB,MAAK+V,iBAAiB7U,EAAS/E,KAGnCyY,EAAA3N,UAAA8O,iBAAP,SAAyB5Z,GACrB,MAAO6D,MAAKoH,KAAK,SAAC/E,GACd,MAAOA,GAASnB,SAAS/E,KAAOA,KAIjCyY,EAAA3N,UAAA8M,KAAP,SAAoB8B,GAChB,MAAOjB,GAAUU,gBAAgBtV,KAAKoV,GAAGrB,KAAY8B,KAGlDjB,EAAA3N,UAAA+O,MAAP,SAAcC,EAAeC,GACzB,MAAOtB,GAAUU,gBAAgBtV,KAAKoV,GAAGY,MAAMC,EAAOC,KAGnDtB,EAAA3N,UAAA0M,oBAAP,WACI,GAAMwC,GAAmBxY,EAAE8P,IAAIzN,KAAKoV,GAAGD,SAAU,SAAC9S,GAC9C,MAAOA,GAASoN,uBAGpB,OAAO9R,GAAEyY,OAAOD,EAAQ,SAACE,EAAa5R,GAClC,MAAO4R,GAAM5R,GACd,IAGAmQ,EAAA3N,UAAAwI,oBAAP,WACI,MAAOzP,MAAK2T,sBAAwB3T,KAAK2B,UAGtCiT,EAAA3N,UAAA4M,yBAAP,WACI,GAAMyC,GAAYtW,KAAK2B,SACjB8C,EAAQzE,KAAKyP,qBAEnB,OAAY,GAARhL,EACI6R,GAAa,EACT7R,GAAS,IACF,EACAA,GAAS,GACT,EAEA,EAEU,IAAd6R,EACH7R,GAAS,EACF,EACAA,GAAS,GACT,EACAA,EAAQ,EACR,EAEA,EAEU,IAAd6R,EACH7R,GAAS,EACF,EACAA,EAAQ,EACR,EAEA,EAEU,IAAd6R,EACH7R,EAAQ,EACD,EAEA,EAGJ,EAGJ,GAIRmQ,EAAA3N,UAAAwL,qBAAP,WACI,GAAM8D,GAAcvW,KAAK6T,0BAEzB,OAAI0C,GAAc,EACPvW,KAAK+T,KAAa,SAAC1R,GACtB,MAAOA,GAASnB,SAAS0G,oBAAuBvF,EAASwK,WAAmB,EAAN,OACvEmJ,OAAOO,GAEH,GAAI3B,QAIZA,EAAA3N,UAAAP,KAAP,SAAamP,GACT7V,KAAKoV,GAAG1O,KAAKmP,IAErBjB,IArPa3Y,GAAA2Y,UAASA,GrB4oDhB,SAAS1Y,EAAQD,GAEtB,YsBjoDD,IAAAoZ,GAAA,WAGI,QAAAA,GAAaF,GACTnV,KAAKmV,SAAWA,EAkExB,MA/DWE,GAAApO,UAAAuH,MAAP,WACI,MAAOxO,MAAKmV,SAASxT,OAAS3B,KAAKmV,SAAS,GAAKhU,QAG9CkU,EAAApO,UAAA8J,KAAP,WACI,MAAO/Q,MAAKmV,SAASxT,OAAS3B,KAAKmV,SAASnV,KAAKmV,SAASxT,OAAS,GAAKR,QAGrEkU,EAAApO,UAAAtF,OAAP,WACI,MAAO3B,MAAKmV,SAASxT,QAGlB0T,EAAApO,UAAAsE,KAAP,SAAalN,GACT,GAAM8W,GAAWnV,KAAKwW,eAEtB,OADArB,GAAS5J,KAAKlN,GACP2B,KAAKyW,QAAQtB,IAGjBE,EAAApO,UAAA8I,QAAP,SAAgB1R,GACZ,GAAM8W,GAAWnV,KAAKwW,eAEtB,OADArB,GAASpF,QAAQ1R,GACV2B,KAAKyW,QAAQtB,IAGjBE,EAAApO,UAAA+O,MAAP,SAAcC,EAAeC,GACzB,MAAOlW,MAAKyW,QAAQzW,KAAKmV,SAASa,MAAMC,EAAOC,KAG5Cb,EAAApO,UAAA8M,KAAP,SAAoB8B,GAChB,GAAMV,GAAWxX,EAAE+L,OAAiB1J,KAAKwW,gBAAiBX,EAC1D,OAAO7V,MAAKyW,QAAQtB,IAGjBE,EAAApO,UAAA6B,OAAP,SAAe+M,GACX,GAAMV,GAAWxX,EAAEmL,OAAU9I,KAAKwW,gBAAiBX,EACnD,OAAO7V,MAAKyW,QAAQtB,IAGjBE,EAAApO,UAAA2O,QAAP,WtBynDK,IsBznDW,GAAAc,MAAAtH,EAAA,EAAAA,EAAAC,UAAA1N,OAAAyN,IAAAsH,EAAAtH,EAAA,GAAAC,UAAAD,EACZsH,GAAO3G,QAAO1C,MAAdqJ,EAAkB1W,KAAKwW,gBACvB,IAAMrB,GAAWxX,EAAEiY,QAAQvI,MAAM1P,EAAG+Y,EACpC,OAAO1W,MAAKyW,QAAQtB,IAGjBE,EAAApO,UAAAG,KAAP,SAAayO,GACT,MAAOlY,GAAEyJ,KAAQpH,KAAKmV,SAAUU,IAG7BR,EAAApO,UAAAwG,IAAP,SAAqBoI,GACjB,MAAOlY,GAAE8P,IAAgBzN,KAAKmV,SAAUU,IAGrCR,EAAApO,UAAAP,KAAP,SAAamP,GACTlY,EAAE+I,KAAQ1G,KAAKmV,SAAUU,IAGrBR,EAAApO,UAAAuP,cAAR,WACI,MAAOxW,MAAKmV,SAASa,MAAM,IAGvBX,EAAApO,UAAAwP,QAAR,SAAiBtB,GACb,MAAO,IAAIE,GAAeF,IAElCE,IAtEapZ,GAAAoZ,YAAWA,GtBmsDlB,SAASnZ,EAAQD,EAASH,GAE/B,YuBttDD,IAAAwY,GAAAxY,EAAyB,IACzBmR,EAAAnR,EAAyB,GACzByY,EAAAzY,EAA0B,IAC1B+D,EAAA/D,EAAsB,IACtBwB,EAAAxB,EAA6G,IAW7GmF,EAAA,WA6CI,QAAAA,GAAawG,GACTzH,KAAKyH,IAAMA,EA2InB,MA3KkBxG,GAAA0V,KAAd,SAAoBzX,EAAeyC,GAAA,SAAAA,MAAA,EAC/B,IAAMiV,GAAY1X,CAClB,OAAO0X,GAAUjV,QAAUA,EAASiV,EAAY,GAAIC,OAAMlV,EAASiV,EAAUjV,OAAS,GAAGjE,KAAK,KAAOkZ,GAG3F3V,EAAA6V,eAAd,SAA8BC,GAC1B,MAAOpZ,GAAEyY,OAAOW,EAAS,SAACC,EAAqBC,GAC3C,MAAOD,GAAcE,KAAKC,IAAI,EAAGF,IAClC,IAGOhW,EAAAmW,eAAd,SAA8BC,GAI1B,IAHA,GAAMN,MACFE,EAAQ,EACRK,EAAO,EACID,GAARC,GACCD,EAAQC,GACRP,EAAQxL,KAAK0L,GAGjBA,IACAK,GAAQ,CAGZ,OAAOP,IAGG9V,EAAAsW,aAAd,WACI,MAAO5Z,GAAE6Z,KAAKla,EAAAW,eAAe0D,OAAS,GAWnCV,EAAAgG,UAAA6D,UAAP,SAAkB1J,GAAlB,GAAA+K,GAAAnM,KACUmV,GACFlU,EAAc0V,KAAcvV,EAAMkG,QAAQnL,GAAIuI,SAAS,IAAK,GAC5D1E,KAAKyX,kBAAkBrW,EAAMuP,UAC7BhT,EAAE8P,IAAmCrM,EAAM2L,YAAY7N,QAAS,SAACmD,GAC7D,MAAO8J,GAAKuL,kBAAkBrV,KAC/B3E,KAAK,IAGZ,OAAiCyX,GAASzX,KAAK,KAG5CuD,EAAAgG,UAAA0Q,YAAP,SAAoBjD,GAApB,GAAAvI,GAAAnM,KACU4X,EAAUlD,EAAWmD,MAAM5W,EAAc6W,gBAC/C,IAAIF,EAAS,CAET,GAAMG,GAAe,GAAIlY,GAAAwB,MAAMrB,KAAKyH,IAOpC,OANAsQ,GAAazQ,MAAMtH,KAAKyH,IAAIlG,OAAOqJ,SAASoK,SAAS,KAAO4C,EAAQta,EAAA6S,mBAAmB6H,SAAU,MACjGD,EAAapH,SAAW3Q,KAAKiY,4BAA4BL,EAAQta,EAAA6S,mBAAmB+H,eAAgBN,EAAQta,EAAA6S,mBAAmBgI,gBAC/HJ,EAAahL,UAAU,GAAIwH,GAAAK,UAAUjX,EAAE8P,IAAImK,EAAQta,EAAA6S,mBAAmByE,WAAWiD,MAAM5W,EAAcmX,gBAAiB,SAACC,GACnH,MAAOlM,GAAKmM,oBAAoBD,OAG7BN,EAEP,KAAM,IAAIQ,OAAM,mCAIjBtX,EAAAgG,UAAArF,qBAAP,SAA6BR,EAAcsT,GACvC,GAAM8D,GAAYxY,KAAK2X,YAAYjD,EAEnCtT,GAAMuP,SAAS0D,MAAMmE,EAAU7H,SAAS0D,SACxCjT,EAAMuP,SAASK,WAAWwH,EAAU7H,SAASK,cAC7C5P,EAAMuP,SAASC,cAAc4H,EAAU7H,SAASC,iBAChDxP,EAAMuP,SAASO,kBAAkBsH,EAAU7H,SAASO,oBAEpD,IAAMuH,GAAeD,EAAUzL,WAE/B3L,GAAM2L,YAAYrG,KAAK,SAACrE,GACpB,GAAMqW,GAAeD,EAAc3C,eAAezT,EAASnB,SAE3DmB,GAASoK,aAAaiM,EAAajM,gBACnCpK,EAASwK,SAAS6L,EAAa7L,YAC/BxK,EAAS+K,QAAQsL,EAAatL,WAC9B/K,EAASuM,MAAM+J,YACfhb,EAAE+I,KAAKgS,EAAa9J,QAAS,SAACL,GAC1BlM,EAAS0M,QAAQR,KAIrBlM,EAASiB,YAAcoV,EAAapV,YACpCjB,EAASyM,eAAiB4J,EAAa5J,iBAG3C1N,EAAMkG,MAAMkR,EAAUlR,UAQlBrG,EAAAgG,UAAAyQ,kBAAR,SAA2BrV,GACvB,GAAMuW,GAAc3X,EAAcsW,eAE5B3I,EAAQvM,EAASuM,QAAQoH,MAAM,EACjC3T,GAASoK,gBACTmC,EAAMrD,KAAKqN,EAAc,GAEzBvW,EAASwK,YACT+B,EAAMrD,KAAKqN,EAAc,GAEzBvW,EAAS+K,WACTwB,EAAMrD,KAAKqN,EAAc,EAG7B,IAAMzD,IACFlU,EAAc0V,KAAetU,EAASnB,SAAS/E,GAAIuI,SAAS,IAAK,GACjEzD,EAAc0V,MAAiCxV,SAA3BkB,EAASiB,cAA8B,EAAIjB,EAASiB,cAAgB,GAAGoB,SAAS,IAAK,GACzGzD,EAAc0V,MAAMtU,EAASyM,kBAAoB,GAAGpK,SAAS,IAAK,GAClEzD,EAAc0V,KAAK1V,EAAc6V,eAAelI,GAAOlK,SAAS,IAAK,GAGzE,OAA4ByQ,GAASzX,KAAK,KAGtCuD,EAAAgG,UAAAqR,oBAAR,SAA6B5D,GACzB,GAAMkD,GAAoBlD,EAAWmD,MAAM5W,EAAc4X,eACnDC,EAAsB9D,SAAS,KAAO4C,EAAQta,EAAA8S,2BAA2B2I,YAAa,IACtFzV,EAA2C0R,SAAS,KAAO4C,EAAQta,EAAA8S,2BAA2B4I,YAAa,IAC3GlK,EAAgCkG,SAAS,KAAO4C,EAAQta,EAAA8S,2BAA2B6I,cAAe,KAAO9X,OAC3GyN,EAAuC3N,EAAcmW,eAAepC,SAAS,KAAO4C,EAAQta,EAAA8S,2BAA2B8I,OAAQ,KAC7HN,EAAsB3X,EAAcsW,eAEpC9K,EAAe9O,EAAEqL,QAAQ4F,EAAOgK,EAAc,IAAM,EACpD/L,EAAWlP,EAAEqL,QAAQ4F,EAAOgK,EAAc,IAAM,EAChDxL,EAAUzP,EAAEqL,QAAQ4F,EAAOgK,EAAc,IAAM,CAErDhK,GAAQjR,EAAEiY,QAAQhH,EAAOgK,EAAc,EAAGA,EAAc,EAAGA,EAAc,EAEzE,IAAMb,GAAe,GAAI9K,GAAA0B,SAAS3O,KAAKyH,IAAIN,YAAY2R,GAAcrM,EAAcI,EAAUO,EAASwB,EAKtG,OAJIxB,IACA2K,EAAarI,IAAIZ,EAAgBxL,EAAc,GAG5CyU,GAOH9W,EAAAgG,UAAAwQ,kBAAR,SAA2B9G,GACvB,GAAM0G,GAAQ,GAAK1G,EAASK,aAAe,EAAI,IAAML,EAASC,gBAAkB,EAAI,IAAMD,EAASO,oBAAsB,EAAI,GACvHiE,GACFlU,EAAc0V,KAAKhG,EAAS0D,QAAQ3P,SAAS,IAAK,GAClDzD,EAAc0V,KAAKU,EAAM3S,SAAS,IAAK,GAG3C,OAA4ByQ,GAASzX,KAAK,KAGtCuD,EAAAgG,UAAAgR,4BAAR,SAAqCkB,EAA0BC,GAC3D,GAAM/E,GAAsBW,SAASmE,EAAkB,IACjD9B,EAAsBrC,SAASoE,EAAkB,IACjDpI,KAAiC,EAARqG,GACzBzG,KAAiC,EAARyG,GACzBnG,KAAiC,EAARmG,EAE/B,OAAO,IAAI/C,GAAAE,SAASxD,EAAYJ,EAAeM,EAAmBmD,IArLxDpT,EAAA4X,cAAwB,gDACxB5X,EAAAmX,eAAyB,eAGzBnX,EAAA6W,gBAA0B,sEAmL5C7W,IAzLahF,GAAAgF,cAAaA,GvB01DpB,SAAS/E,EAAQD,EAASH,GAE/B,YwB32DD,IAAAwB,GAAAxB,EAA4B,KAE5B,SAAYiC,GACRA,IAAA,2CACAA,IAAA,2CACAA,IAAA,+CACAA,IAAA,2CACAA,IAAA,6CACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,6CACAA,IAAA,2BACAA,IAAA,4CACAA,IAAA,oDACAA,IAAA,oCACAA,IAAA,4CACAA,IAAA,4CACAA,IAAA,oDACAA,IAAA,8CACAA,IAAA,8DACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,4CACAA,IAAA,4CACAA,IAAA,uDAvBQ9B,EAAA8B,OAAA9B,EAAA8B,SAAZ,IAAYA,GAAA9B,EAAA8B,KA0BZ4Q,EAAA,WA2BI,QAAAA,GACY7M,EACD3F,EACAsB,EACAiK,EACA2R,EAGAC,EACAzR,EACA0R,EACAC,EACAxR,EACAC,EACAC,EACAC,EACAC,EAGAqR,EACAC,EACAC,EACAnR,EACAC,EACAC,EACAC,EACAC,EAEAgR,EACAC,EACAC,GAzDf,GAAA3N,GAAAnM,IA4BgBA,MAAA8B,QACD9B,KAAA7D,KACA6D,KAAAvC,OACAuC,KAAA0H,eACA1H,KAAAqZ,+BAGArZ,KAAAsZ,+BACAtZ,KAAA6H,wBACA7H,KAAAuZ,wBACAvZ,KAAAwZ,wBACAxZ,KAAAgI,2BACAhI,KAAAiI,2BACAjI,KAAAkI,0BACAlI,KAAAmI,qBACAnI,KAAAoI,wBAGApI,KAAAyZ,0BACAzZ,KAAA0Z,4BACA1Z,KAAA2Z,4BACA3Z,KAAAwI,kBACAxI,KAAAyI,sBACAzI,KAAA0I,oBACA1I,KAAA2I,sBACA3I,KAAA4I,sBAEA5I,KAAA4Z,yBACA5Z,KAAA6Z,0BACA7Z,KAAA8Z,yBAEP9Z,KAAKyM,aAAevO,GAAGoB,WAAWU,KAAK0H,cACvC1H,KAAK6M,SAAW3O,GAAGoB,YAAW,GAC9BU,KAAK+Z,YAAc7b,GAAGoB,YAAW,GAEjCU,KAAKyM,aAAahC,UAAU,SAACgC,GACpBA,IACGN,EAAKzE,cACLyE,EAAKM,cAAa,GAGtBN,EAAKU,UAAS,GACdV,EAAK4N,aAAY,MAIzB/Z,KAAK6M,SAASpC,UAAU,SAACoC,GACjBA,EACKV,EAAKM,gBACNN,EAAKU,UAAS,GAGlBV,EAAK4N,aAAY,KAIzB/Z,KAAK+Z,YAAYtP,UAAU,SAACsP,GACpBA,IACK5N,EAAKU,YACNV,EAAK4N,aAAY,MAK7B/Z,KAAKga,wBAA0B9b,GAAGoO,aAAa,WAC3C,MAAOH,GAAKU,YAAcV,EAAKsN,0BAEnCzZ,KAAKia,6BAA+B/b,GAAGoO,aAAa,WAChD,MAAOH,GAAKU,YAAcV,EAAKwN,4BAEnC3Z,KAAKka,eAAiBhc,GAAGoO,aAAa,WAClC,MAAOH,GAAKU,aAEhB7M,KAAKma,6BAA+Bjc,GAAGoO,aAAa,WAChD,MAAOH,GAAKU,YAAcV,EAAKuN,4BAEnC1Z,KAAKoa,kCAAoClc,GAAGoO,aAAa,WACrD,MAAOH,GAAKwN,4BAA8BxN,EAAKU,YAAcV,EAAK3D,mBAEtExI,KAAKqa,uBAAyBnc,GAAGoO,aAAa,WAC1C,MAAOH,GAAKU,aAGhB7M,KAAKsa,oBAAsBpc,GAAGoO,aAAa,WACvC,MAAOH,GAAKkN,8BAAgClN,EAAKU,WAAa,EAAI,KAGtE7M,KAAK4O,MAAQ1Q,GAAG2Q,oBAGhB7O,KACCua,qBAAqBzY,EAAM0Y,qBAAsBzc,EAAK0c,oBACtDF,qBAAqBzY,EAAM4Y,qBAAsB3c,EAAK4c,oBACtDJ,qBAAqBzY,EAAM8Y,sBAAuB7c,EAAK8c,oBACvDN,qBAAqBzY,EAAMgZ,uBAAwB/c,EAAKgd,sBACxDR,qBAAqBzY,EAAMkZ,sBAAuBjd,EAAKkd,qBACvDV,qBAAqBzY,EAAMoZ,iBAAkBnd,EAAKod,iBAClDZ,qBAAqBzY,EAAMsZ,sBAAuBrd,EAAKsd,qBACvDd,qBAAqBzY,EAAMwZ,kBAAmBvd,EAAKqT,iBACnDmJ,qBAAqBzY,EAAMyZ,kBAAmBxd,EAAKsT,iBACnDkJ,qBAAqBzY,EAAM0Z,YAAazd,EAAK0d,YAC7ClB,qBAAqBzY,EAAM4Z,qBAAsB3d,EAAK4d,oBACtDpB,qBAAqBzY,EAAM8Z,0BAA2B7d,EAAK8d,wBAC3DtB,qBAAqBzY,EAAMga,iBAAkB/d,EAAK6T,gBAClD2I,qBAAqBzY,EAAMia,sBAAuBhe,EAAK8T,oBACvD0I,qBAAqBzY,EAAMka,sBAAuBje,EAAK+T,oBACvDyI,qBAAqBzY,EAAMma,uBAAwBle,EAAKme,qBACxD3B,qBAAqBzY,EAAMqa,0BAA2Bpe,EAAKqe,wBAC3D7B,qBAAqBzY,EAAMua,gCAAiCte,EAAKue,6BACjE/B,qBAAqBzY,EAAMya,iBAAkBxe,EAAKoU,gBAClDoI,qBAAqBzY,EAAM0a,iBAAkBze,EAAKqU,gBAClDqK,wBAAwB3a,EAAM4a,sBAAuB3e,EAAK4e,oBAC1DF,wBAAwB3a,EAAM8a,8BAA+B7e,EAAK8e,oBAClEJ,wBAAwB3a,EAAMgb,0BAA2B/e,EAAKgf,yBAE/D/c,KAAKgd,SAAW9e,GAAGoO,aAAa,WAC5B,GAAMsB,GAAa9L,EAAMmb,gBACzB,OAAIrP,GACOjQ,EAAEuf,SAAStP,EAAYzB,GADlC,SAKJnM,KAAKmd,2BAA6Bnd,KAAKod,WAAW,yBAClDpd,KAAKqd,2BAA6Brd,KAAKod,WAAW,yBAClDpd,KAAKsd,2BAA6Btd,KAAKod,WAAW,yBAClDpd,KAAKud,8BAAgCvd,KAAKod,WAAW,4BACrDpd,KAAKwd,8BAAgCxd,KAAKod,WAAW,4BACrDpd,KAAKyd,6BAA+Bzd,KAAKod,WAAW,2BACpDpd,KAAK0d,wBAA0B1d,KAAKod,WAAW,sBAC/Cpd,KAAK2d,2BAA6B3d,KAAKod,WAAW,yBAClDpd,KAAK4d,kCAAoC5d,KAAKod,WAAW,gCA6CjE,MA1CYzO,GAAA1H,UAAAmW,WAAR,SAAoB3T,GAApB,GAAA0C,GAAAnM,IACI,OAAO9B,IAAGoO,aAAa,WACnB,GAAMuR,GAAO1R,EAAKrK,MAAM+b,MACxB,OAAO1R,GAAK1C,GAAS,EAAKoU,EAAKlc,OAAShE,EAAEqL,QAAkBrL,EAAE+L,OAAOmU,EAAMpU,GAAQ0C,GAAShL,UAI5FwN,EAAA1H,UAAA6W,WAAR,SAAoBvP,EAAYwP,GACvBA,EAEO/d,KAAKgP,QAAQT,IACrBvO,KAAK4O,MAAMrD,KAAKgD,GAFhBvO,KAAK4O,MAAMM,OAAOX,GAItByP,QAAQC,IAAI,cAAeje,KAAKvC,KAAMM,EAAKwQ,GAAOwP,EAAW/d,KAAK4O,UAO9DD,EAAA1H,UAAAsT,qBAAR,SAA8Bjb,EAA0CiP,GAAxE,GAAApC,GAAAnM,IAII,OAHAV,GAAWmL,UAAU,SAACpI,GAClB,MAAO8J,GAAK2R,WAAWvP,EAAMlM,GAAaA,EAASlG,KAAOgQ,EAAKhQ,MAE5D6D,MAGH2O,EAAA1H,UAAAwV,wBAAR,SAAiCnd,EAA4CiP,GAA7E,GAAApC,GAAAnM,IAKI,OAJAV,GAAWmL,UAAU,SAACsC,GAClB,MAAOZ,GAAK2R,WAAWvP,EAAM5Q,EAAEuf,SAASnQ,EAAWZ,MAGhDnM,MAGH2O,EAAA1H,UAAA+H,QAAR,SAAiBT,GACb,MAAOvO,MAAK4O,MAAM5F,QAAQuF,GAAQ,IAM1CI,IA3Ma1S,GAAA0S,SAAQA,CA6MrB,IAAA5M,GAAA,WAgFI,QAAAA,GAAa0F,GAhFjB,GAAA0E,GAAAnM,IAmFQA,MAAKke,oBAAsBhgB,GAAGoO,cAC1BC,KAAM,WACF,MAAO5O,GAAEyJ,KAAK+E,EAAK0R,OAAQ,0BAA0B9D,eAEzDrN,MAAO,SAACsE,GACJrT,EAAEyJ,KAAK+E,EAAK0R,OAAQ,0BAA0B9D,YAAY/I,MAGlEhR,KAAKme,qBAAuBjgB,GAAGoO,cAC3BC,KAAM,WACF,MAAO5O,GAAEyJ,KAAK+E,EAAK0R,OAAQ,2BAA2B9D,eAE1DrN,MAAO,SAAC0R,GACJzgB,EAAEyJ,KAAK+E,EAAK0R,OAAQ,2BAA2B9D,YAAYqE,MAGnEpe,KAAKqe,oBAAsBngB,GAAGoO,cAC1BC,KAAM,WACF,MAAO5O,GAAEyJ,KAAK+E,EAAK0R,OAAQ,0BAA0B9D,eAEzDrN,MAAO,SAAC4R,GACJ3gB,EAAEyJ,KAAK+E,EAAK0R,OAAQ,0BAA0B9D,YAAYuE,MAGlEte,KAAKue,cAAgBrgB,GAAGoB,WAAW6B,QACnCnB,KAAK6d,KAAO3f,GAAG2Q,oBAEf7O,KAAKwe,UAAYtgB,GAAGoO,aAAa,WAC7B,MAAO3O,GAAEmL,OAAOqD,EAAK0R,OAAQ,SAACxb,GAC1B,MAAOA,GAASoK,mBAGxBzM,KAAKye,MAAQvgB,GAAGoO,aAAa,WACzB,MAAO3O,GAAEmL,OAAOqD,EAAK0R,OAAQ,SAACxb,GAC1B,MAAOA,GAASwK,eAGxB7M,KAAK0e,SAAWxgB,GAAGoO,aAAa,WAC5B,MAAO3O,GAAEmL,OAAOqD,EAAK0R,OAAQ,SAACxb,GAC1B,MAAOA,GAAS0X,kBAIxB/Z,KAAKqM,cAAgBnO,GAAGoO,cACpBC,KAAM,WACF,MAAO5O,GAAEghB,IAAIxS,EAAK0R,OAAQ,SAACxb,GACvB,MAAOA,GAASoK,kBAGxBC,MAAO,SAACL,GACJ1O,EAAE+I,KAAKyF,EAAK0R,OAAQ,SAACxb,GACjBA,EAASoK,aAAaJ,QAIlCrM,KAAK4M,UAAY1O,GAAGoO,cAChBC,KAAM,WACF,MAAO5O,GAAEghB,IAAIxS,EAAKqS,YAAa,SAACnc,GAC5B,MAAOA,GAASwK,cAGxBH,MAAO,SAACE,GACJjP,EAAE+I,KAAKyF,EAAKqS,YAAa,SAACnc,GACtBA,EAASwK,SAASD,QAI9B5M,KAAK4e,aAAe1gB,GAAGoO,cACnBC,KAAM,WACF,MAAO5O,GAAEghB,IAAIxS,EAAKsS,QAAS,SAACpc,GACxB,MAAOA,GAAS0X,iBAGxBrN,MAAO,SAACkS,GACJjhB,EAAE+I,KAAKyF,EAAKsS,QAAS,SAACpc,GAClBA,EAAS0X,YAAY6E,QAMjC5e,KAAKwa,qBAAuBtc,GAAGoB,WAAW6B,QAC1CnB,KAAK0a,qBAAuBxc,GAAGoB,WAAW6B,QAC1CnB,KAAK6e,0BAA4B3gB,GAAGoO,aAAa,WAC7C,GAAMsB,GAAazB,EAAKqS,WACxB,OAAI5Q,GAAWjM,QAAU,EACdhE,EAAEiY,QAAQhI,EAAYzB,EAAKuO,wBADtC,SAIJ1a,KAAK8e,0BAA4B5gB,GAAGoO,aAAa,WAC7C,GAAMsB,GAAazB,EAAKqS,WACxB,OAAI5Q,GAAWjM,QAAU,EACdhE,EAAEiY,QAAQhI,EAAYzB,EAAKqO,wBADtC,SAIJxa,KAAK+e,WAAW/e,KAAKwa,qBAAsBxa,KAAK6e,2BAChD7e,KAAK+e,WAAW/e,KAAK0a,qBAAsB1a,KAAK8e,2BAChD9e,KAAKgf,qBAAuB9gB,GAAGoO,aAAa,WACxC,SAAUH,EAAKqO,yBAA0BrO,EAAKuO,wBAAyDvZ,SAA/BgL,EAAK+R,uBAAsE/c,SAA/BgL,EAAKkS,uBAAuEld,SAAhCgL,EAAKgS,0BAEzKne,KAAK8a,uBAAyB5c,GAAGoO,aAAa,WAC1C,GAAIH,EAAK6S,yBAA2B7S,EAAKgS,uBAAwB,CAC7D,GAAMvQ,GAAajQ,EAAEkX,MAAgB1I,EAAKqS,aAAa5I,QAAQzJ,EAAKqO,uBAAwBrO,EAAKuO,wBAAwB5R,OAAO,yBAAyBY,OAAO,yBAAyBxK,OACzL,OAAOvB,GAAEoT,KAAKnD,MAGtB5N,KAAK4a,sBAAwB1c,GAAGoO,aAAa,WACzC,GAAIH,EAAK6S,yBAA2B7S,EAAK+R,sBAAuB,CAC5D,GAAMtQ,GAAajQ,EAAEkX,MAAgB1I,EAAKqS,aAAa5I,QAAQzJ,EAAKqO,uBAAwBrO,EAAKuO,uBAAwBvO,EAAK2O,0BAA0BhS,OAAO,yBAAyBY,OAAO,yBAAyBxK,OACxN,OAAOvB,GAAEoT,KAAKnD,MAGtB5N,KAAKgb,sBAAwB9c,GAAGoO,aAAa,WACzC,GAAIH,EAAK6S,yBAA2B7S,EAAKkS,sBAAuB,CAC5D,GAAMzQ,GAAajQ,EAAEkX,MAAgB1I,EAAKqS,aAAa5I,QAAQzJ,EAAKqO,uBAAwBrO,EAAKuO,uBAAwBvO,EAAK2O,yBAA0B3O,EAAKyO,yBAAyB9R,OAAO,yBAAyBY,OAAO,yBAAyBxK,OACtP,OAAOvB,GAAEoT,KAAKnD,MAGtB5N,KAAKif,mBAAqB/gB,GAAGoO,aAAa,WACtC,MAAIH,GAAK6S,uBACErhB,EAAEiY,QAAQzJ,EAAKqS,YAAarS,EAAK2O,yBAA0B3O,EAAKyO,wBAAyBzO,EAAK6O,yBADzG,SAMJhb,KAAKkb,iBAAmBhd,GAAGoB,WAAW6B,QACtCnB,KAAKob,sBAAwBld,GAAGoB,WAAW6B,QAC3CnB,KAAKsb,kBAAoBpd,GAAGoB,WAAW6B,QACvCnB,KAAKub,kBAAoBrd,GAAGoB,WAAW6B,QACvCnB,KAAKkf,sBAAwBhhB,GAAGoO,aAAa,WACzC,GAAMsB,GAAazB,EAAK8S,oBACxB,OAAIrR,GACOjQ,EAAEiY,QAAkBjY,EAAEmL,OAAO8E,EAAY,qBAAsBzB,EAAKiP,wBAAyBjP,EAAKmP,oBAAqBnP,EAAKoP,qBADvI,SAIJvb,KAAKmf,2BAA6BjhB,GAAGoO,aAAa,WAC9C,GAAMsB,GAAazB,EAAK8S,oBACxB,OAAIrR,GACOjQ,EAAEiY,QAAkBjY,EAAEmL,OAAO8E,EAAY,uBAAwBzB,EAAK+O,mBAAoB/O,EAAKmP,oBAAqBnP,EAAKoP,qBADpI,SAIJvb,KAAKof,uBAAyBlhB,GAAGoO,aAAa,WAC1C,GAAMsB,GAAazB,EAAK8S,oBACxB,OAAIrR,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAK+O,mBAAoB/O,EAAKiP,wBAAyBjP,EAAKoP,qBADvG,SAIJvb,KAAKqf,uBAAyBnhB,GAAGoO,aAAa,WAC1C,GAAMsB,GAAazB,EAAK8S,oBACxB,OAAIrR,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAK+O,mBAAoB/O,EAAKiP,wBAAyBjP,EAAKmP,qBADvG,SAIJtb,KAAK+e,WAAW/e,KAAKkb,iBAAkBlb,KAAKkf,uBAC5Clf,KAAK+e,WAAW/e,KAAKob,sBAAuBpb,KAAKmf,4BACjDnf,KAAK+e,WAAW/e,KAAKsb,kBAAmBtb,KAAKof,wBAC7Cpf,KAAK+e,WAAW/e,KAAKub,kBAAmBvb,KAAKqf,wBAC7Crf,KAAKsf,kBAAoBphB,GAAGoO,aAAa,WACrC,SAAUH,EAAK+O,oBAAsB/O,EAAKiP,yBAA2BjP,EAAKmP,qBAAuBnP,EAAKoP,uBAE1Gvb,KAAKwb,YAActd,GAAGoO,aAAa,WAC/B,GAAIH,EAAKmT,oBAAqB,CAC1B,GAAMC,GAAapT,EAAK+O,mBAClBzJ,EAAStF,EAAKiP,uBACpB,KAAKmE,EAAWvF,4BAA8BvI,EAAOwI,+BACjD,MAAOsF,MAInBvf,KAAKwf,gBAAkBthB,GAAGoO,aAAa,WACnC,MAAIH,GAAKmT,oBACE3hB,EAAEiY,QAAQzJ,EAAK8S,qBAAsB9S,EAAKqP,eADrD,SAMJxb,KAAK0b,qBAAuBxd,GAAGoB,WAAW6B,QAC1CnB,KAAK4b,0BAA4B1d,GAAGoB,WAAW6B,QAC/CnB,KAAK8b,iBAAmB5d,GAAGoB,WAAW6B,QACtCnB,KAAK+b,sBAAwB7d,GAAGoB,WAAW6B,QAC3CnB,KAAKgc,sBAAwB9d,GAAGoB,WAAW6B,QAC3CnB,KAAKyf,0BAA4BvhB,GAAGoO,aAAa,WAC7C,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAI5R,GACOjQ,EAAEiY,QAAkBjY,EAAEmL,OAAO8E,EAAY,uBAAwBzB,EAAKyP,4BAA6BzP,EAAK2P,mBAAoB3P,EAAK4P,wBAAyB5P,EAAK6P,yBAD1K,SAIJhc,KAAK0f,+BAAiCxhB,GAAGoO,aAAa,WAClD,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAI5R,GACOjQ,EAAEiY,QAAkBjY,EAAEmL,OAAO8E,EAAY,uBAAwBzB,EAAKuP,uBAAwBvP,EAAK2P,mBAAoB3P,EAAK4P,wBAAyB5P,EAAK6P,yBADrK,SAIJhc,KAAK2f,sBAAwBzhB,GAAGoO,aAAa,WACzC,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAI5R,GACOjQ,EAAEiY,QAAkBjY,EAAEmL,OAAO8E,EAAY,uBAAwBzB,EAAKuP,uBAAwBvP,EAAKyP,4BAA6BzP,EAAK4P,wBAAyB5P,EAAK6P,yBAD9K,SAIJhc,KAAK4f,2BAA6B1hB,GAAGoO,aAAa,WAC9C,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAI5R,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAKuP,uBAAwBvP,EAAKyP,4BAA6BzP,EAAK2P,mBAAoB3P,EAAK6P,yBADxI,SAIJhc,KAAK6f,2BAA6B3hB,GAAGoO,aAAa,WAC9C,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAI5R,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAKuP,uBAAwBvP,EAAKyP,4BAA6BzP,EAAK2P,mBAAoB3P,EAAK4P,yBADxI,SAIJ/b,KAAK+e,WAAW/e,KAAK0b,qBAAsB1b,KAAKyf,2BAChDzf,KAAK+e,WAAW/e,KAAK4b,0BAA2B5b,KAAK0f,gCACrD1f,KAAK+e,WAAW/e,KAAK8b,iBAAkB9b,KAAK2f,uBAC5C3f,KAAK+e,WAAW/e,KAAK+b,sBAAuB/b,KAAK4f,4BACjD5f,KAAK+e,WAAW/e,KAAKgc,sBAAuBhc,KAAK6f,4BACjD7f,KAAK8f,sBAAwB5hB,GAAGoO,aAAa,WACzC,SAAUH,EAAKuP,wBAA0BvP,EAAKyP,6BAA+BzP,EAAK4P,yBAA2B5P,EAAK6P,2BAEtHhc,KAAKic,uBAAyB/d,GAAGoO,aAAa,WAC1C,GAAIH,EAAK2T,wBAAyB,CAC9B,GAAM/N,GAAS5F,EAAK2P,kBACpB,IAAI/J,IAAWA,EAAOmI,iBAClB,MAAOnI,MAInB/R,KAAKmc,0BAA4Bje,GAAGoO,aAAa,WAC7C,GAAIH,EAAK2T,wBAAyB,CAC9B,GAAMP,GAAapT,EAAKuP,uBAClBpJ,EAAcnG,EAAK4P,wBACnBxJ,EAAcpG,EAAK6P,uBACzB,KAAKuD,EAAWpF,+BAAgC,CAC5C,GAAMvM,GAAajQ,EAAE+L,QAAQ4I,EAAaC,GAAc,2BACxD,OAAO5U,GAAEoT,KAAKnD,OAI1B5N,KAAKqc,gCAAkCne,GAAGoO,aAAa,WACnD,GAAIH,EAAK2T,wBAAyB,CAC9B,GAAMrO,GAAStF,EAAKyP,2BACpB,KAAKnK,EAAO2I,oCAAqC,CAK7C,GAAM2F,GAA+BpiB,EAAEiY,QAAQzJ,EAAKqT,kBAAmBrT,EAAKyP,4BAA6BzP,EAAK2P,mBAAoB3P,EAAKuP,uBAAwBvP,EAAK4P,wBAAyB5P,EAAK6P,wBAClM,IAA4C,IAAxC+D,EAA6Bpe,QAAkBwK,EAAKgQ,4BACpD,MAGJ,OAAO1K,OAInBzR,KAAKggB,oBAAsB9hB,GAAGoO,aAAa,WACvC,GAAMsB,GAAazB,EAAKqT,iBACxB,OAAIrT,GAAK2T,wBACEniB,EAAEiY,QAAQhI,EAAYzB,EAAK8P,yBAA0B9P,EAAKgQ,4BAA6BhQ,EAAK8P,0BADvG,SAMJjc,KAAKuc,iBAAmBre,GAAGoB,WAAW6B,QACtCnB,KAAKwc,iBAAmBte,GAAGoB,WAAW6B,QACtCnB,KAAKigB,sBAAwB/hB,GAAGoO,aAAa,WACzC,GAAMsB,GAAazB,EAAK6T,qBACxB,OAAIpS,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAK2P,mBAAoB3P,EAAKqQ,oBADzE,SAIJxc,KAAKkgB,sBAAwBhiB,GAAGoO,aAAa,WACzC,GAAMsB,GAAazB,EAAK6T,qBACxB,OAAIpS,GACOjQ,EAAEiY,QAAkBhI,EAAYzB,EAAK2P,mBAAoB3P,EAAKoQ,oBADzE,SAIJvc,KAAK+e,WAAW/e,KAAKuc,iBAAkBvc,KAAKigB,uBAC5CjgB,KAAK+e,WAAW/e,KAAKwc,iBAAkBxc,KAAKkgB,uBAC5ClgB,KAAKmgB,iBAAmBjiB,GAAGoO,aAAa,WACpC,SAAUH,EAAKoQ,qBAAsBpQ,EAAKqQ,sBAE9Cxc,KAAK0c,sBAAwBxe,GAAGoO,aAAa,WACzC,GAAIH,EAAKgU,mBAAoB,CACzB,GAAMC,MACA9N,EAAcnG,EAAKoQ,mBACnBhK,EAAcpG,EAAKqQ,kBAOzB,OANKlK,GAAY+H,0BACb+F,EAAO7U,KAAK+G,GAEXC,EAAY8H,0BACb+F,EAAO7U,KAAKgH,GAET6N,KAGfpgB,KAAK4c,8BAAgC1e,GAAGoO,aAAa,WACjD,GAAMsB,GAAazB,EAAK6T,qBACxB,OAAI7T,GAAKgU,mBACExiB,EAAEiY,QAAQhI,EAAYzB,EAAK2P,mBAAoB3P,EAAKoQ,mBAAoBpQ,EAAKqQ,oBADxF,SAIJxc,KAAKqgB,yBAA2BniB,GAAGoO,aAAa,WAC5C,GAAMsB,GAAazB,EAAKyQ,+BACxB,OAAIhP,GACOjQ,EAAE0Y,IAAI1Y,EAAE8P,IAAsBG,EAAY,SAACvL,GAAiC,MAAOA,GAASiY,yBADvG,SAIJta,KAAKsgB,0BAA4BpiB,GAAGoO,aAAa,WAC7C,GAAMsB,GAAazB,EAAKyQ,gCAClB2D,EAAQpU,EAAKkU,0BACnB,OAAIzS,GACIA,EAAWjM,OAAS,EACb4e,EAAQ3S,EAAWjM,OAEnB,EAJf,SAQJ3B,KAAKwgB,+BAAiCtiB,GAAGoO,aAAa,WAClD,GAAMmU,GAAStU,EAAKmU,4BACd1S,EAAazB,EAAKyQ,+BACxB,OAAezb,UAAXsf,EACa,EAATA,EACI7S,EAAWjM,QAAU,EACjB8e,GAAU,IACH,EACAA,GAAU,GACV,EAEA,EAEkB,IAAtB7S,EAAWjM,OACd8e,GAAU,EACH,EACAA,GAAU,GACV,EACAA,EAAS,EACT,EAEA,EAEkB,IAAtB7S,EAAWjM,OACd8e,GAAU,EACH,EACAA,EAAS,EACT,EAEA,EAEkB,IAAtB7S,EAAWjM,OACd8e,EAAS,EACF,EAEA,EAGJ,EAGJ,EAtCf,SA0CJzgB,KAAK8c,0BAA4B5e,GAAGoO,aAAa,WAC7C,GAAMiK,GAAcpK,EAAKqU,iCACnB5S,EAAazB,EAAKyQ,+BACxB,OAAoBzb,UAAhBoV,EACoB,IAAhBA,KAGO5Y,EAAE+L,OAAOkE,EAAY,SAACvL,GACzB,MAAOA,GAASiX,8BAAiCjX,EAASwK,WAAmB,EAAN,OACxEmJ,OAAOO,GANlB,SAYJvW,KAAKid,eAAiB/e,GAAGoO,aAAa,WAClC,GAAMsB,GAAazB,EAAK6T,qBACxB,OAAI7T,GAAKgU,mBACExiB,EAAEiY,QAAOvI,MAAT1P,GAAUiQ,GAAU8S,OAAKvU,EAAK2Q,4BAAgC3Q,EAAKuQ,0BAD9E,SAKJ1c,KAAK2gB,yBAA2BziB,GAAGoO,aAAa,WAC5C,GAAMsB,GAAazB,EAAKyQ,+BACxB,OAAIhP,GAEOjQ,EAAEoT,KAAKpT,EAAE+L,OAAOkE,EAAY,4BAFvC,SAMJ5N,KAAK4gB,+BAAiC1iB,GAAGoO,aAAa,WAClD,GAAMuU,GAAK1U,EAAKoQ,mBACVuE,EAAK3U,EAAKqQ,kBAChB,OAAIqE,IAAMC,EACCnjB,EAAEoT,KAAKpT,EAAE+L,QAAQmX,EAAIC,GAAK,uBADrC,SAKJ9gB,KAAK+gB,kCAAoC7iB,GAAGoO,aAAa,WACrD,GAAMuU,GAAK1U,EAAKoQ,mBACVuE,EAAK3U,EAAKqQ,kBAChB,OAAIqE,IAAMC,EACCnjB,EAAEoT,KAAKpT,EAAE+L,QAAQmX,EAAIC,GAAK,0BADrC,SAKJ9gB,KAAKghB,sBAAwB9iB,GAAGoO,aAAa,WACzC,MAAOH,GAAK8Q,iBAAiBtb,OAAS,IAG1C3B,KAAKihB,wBAA0B/iB,GAAGoO,aAAa,WAC3C,GAAIsB,GAAazB,EAAK8Q,iBAChB4D,EAAK1U,EAAKoQ,mBACVuE,EAAK3U,EAAKqQ,kBAChB,OAAI5O,IAAcA,EAAWjM,QACzBiM,EAAajQ,EAAE+L,OAAOkE,EAAY,SAACvL,GAC/B,GAAM6e,GAAgB7e,IAAawe,GAAMxe,IAAaye,CACtD,OAAOze,GAAS4F,0BAA4BiZ,EAAgB,IAAM,KAE/DvjB,EAAEoT,KAAKnD,IALlB,SASJ5N,KAAK6d,MAED,GAAIlP,GAAS3O,KAAM1C,EAAA6C,YAAYC,OAAW,mBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIuO,GAAS3O,KAAM1C,EAAA6C,YAAYE,MAAW,SAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIsO,GAAS3O,KAAM1C,EAAA6C,YAAYG,KAAW,QAAwB,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIqO,GAAS3O,KAAM1C,EAAA6C,YAAYI,MAAW,gBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIoO,GAAS3O,KAAM1C,EAAA6C,YAAYK,OAAW,eAAwB,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAImO,GAAS3O,KAAM1C,EAAA6C,YAAYM,OAAW,UAAwB,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIkO,GAAS3O,KAAM1C,EAAA6C,YAAYO,QAAW,kBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAIiO,GAAS3O,KAAM1C,EAAA6C,YAAYQ,OAAW,gBAAwB,EAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GAErP,GAAIgO,GAAS3O,KAAM1C,EAAA6C,YAAYS,OAAW,UAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAI+N,GAAS3O,KAAM1C,EAAA6C,YAAYU,KAAW,cAAwB,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAQ,EAAQ,EAAQ,EAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAI8N,GAAS3O,KAAM1C,EAAA6C,YAAYW,MAAW,SAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,GAAQ,EAAQ,GAAQ,EAAY,IAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,GACrP,GAAI6N,GAAS3O,KAAM1C,EAAA6C,YAAYY,MAAW,gBAAwB,EAAQ,EAAQ,EAAQ,EAAQ,EAAQ,GAAQ,EAAQ,GAAQ,EAAQ,GAAY,GAAQ,GAAQ,GAAY,GAAY,GAAQ,GAAQ,GAAQ,GAAQ,GAAM,GAAS,GAAQ,IAGzP,IAAMogB,IACFnhB,KAAKwa,qBACLxa,KAAK0a,qBACL1a,KAAKkb,iBACLlb,KAAKob,sBACLpb,KAAKsb,kBACLtb,KAAKub,kBACLvb,KAAK0b,qBACL1b,KAAK4b,0BACL5b,KAAK8b,iBACL9b,KAAK+b,sBACL/b,KAAKgc,sBACLhc,KAAKuc,iBACLvc,KAAKwc,iBAGTxc,MAAK0U,WAAaxW,GAAGoO,cACjBC,KAAM,WACF,GAAImI,GAAqB/W,EAAE8P,IAAItB,EAAK0R,OAAQ,SAACxb,GACzC,QACKA,EAASoK,eAAiB,EAAI,IAC5BpK,EAASwK,WAAa,EAAI,IAC1BxK,EAAS0X,cAAgB,EAAI,IAClCrV,SAAS,MACZhH,KAAK,GAOR,OALAgX,IAAc/W,EAAE8P,IAA0C0T,EAAe,SAAC7hB,GACtE,GAAM+C,GAAW/C,GACjB,QAAQ+C,EAAWA,EAASlG,GAAK,GAAGuI,SAAS,MAC9ChH,KAAK,KAIZgP,MAAO,SAACgI,GAEJ,IAAK,GADCmJ,GAAO1R,EAAK0R,OACTuD,EAAI,EAAGC,EAAIxD,EAAKlc,OAAY0f,EAAJD,IAASA,EAAG,CACzC,GAAM/J,GAAQrC,SAASN,EAAW0M,GAAI,GACtCvD,GAAKuD,GAAG3U,gBAAwB,EAAR4K,IACxBwG,EAAKuD,GAAGvU,YAAoB,EAARwK,IACpBwG,EAAKuD,GAAGrH,eAAuB,EAAR1C,IAG3B1Z,EAAE+I,KAAKya,EAAe,SAAC7hB,EAA0C2X,GAC7D,GAAM9a,GAAK6Y,SAASN,EAAWmJ,EAAKlc,OAASsV,GAAQ,GAEjD3X,GADAnD,EAAK,EACMwB,EAAEyJ,KAAKyW,EAAM,SAACxb,GACrB,MAAOA,GAASlG,KAAOA,IAGhBgF,aAuBnC,MAhBYY,GAAAkF,UAAA8X,WAAR,SAAoBzf,EAA0Cue,GAG1DA,EAAKpT,UAAU,SAACmD,GACZ,GAAMvL,GAAW/C,GAGZsO,GAIMvL,IAAa1E,EAAEuf,SAAStP,EAAYvL,IAC3C/C,EAAW6B,QAJX7B,EAAW6B,WAQ3BY,IAvlBa9F,GAAA8F,MAAKA,GxBgzEZ,SAAS7F,EAAQD,KAKf,CACA,CACA,CAEF,SAASC,EAAQD,GAEtB,YyBniFYA,GAAAwB,KAAe,oBASvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjBzhB,KAAKR,OAASiiB,EAAOjiB,OACrBQ,KAAK6d,KAAO3f,GAAGoO,aAAa,WACxB,GAAMsB,GAAa6T,EAAO5D,MAI1B,OAHIjQ,IACAA,EAAWmC,QAAQ5O,QAEhByM,IAEX5N,KAAKoM,MAAQqV,EAAOrV,MACpBpM,KAAK7D,GAAKslB,EAAOtlB,IAErBulB,SAAU,sWzBmiFZ,SAASxlB,EAAQD,GAEtB,Y0B5jFYA,GAAAwB,KAAe,oBAOvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GAAV,GAAAtV,GAAAnM,IACPA,MAAK6d,KAAO4D,EAAO5D,KACnB7d,KAAKoM,MAAQqV,EAAOrV,MACpBpM,KAAK2hB,SAAWzjB,GAAGoO,aAAa,WAC5B,MAAO3O,GAAE8P,IAAsBtB,EAAK0R,OAAQ,SAACxb,GACzC,MAAOA,GAAS5E,OACjBC,KAAK,SAGhBgkB,SAAU,8M1B+jFZ,SAASxlB,EAAQD,GAEtB,Y2BnlFYA,GAAAwB,KAAe,kBAWvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,GACfzhB,KAAK4hB,QACDC,WAAW,GAEf7hB,KAAK4hB,OAAO,aAAeH,EAAOK,OAAQ,EAC1C9hB,KAAK+hB,UAAY7jB,GAAGoO,aAAa,WAC7B,MAAO3O,GAAEuf,SAASuE,EAAO5D,OAAQ4D,EAAOpf,aAGhDqf,SAAU,2mB3BilFZ,SAASxlB,EAAQD,GAEtB,Y4B1mFYA,GAAAwB,KAAe,kBAUvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,GACfzhB,KAAK4hB,QACDC,WAAW,GAEf7hB,KAAK4hB,OAAO,aAAeH,EAAOK,OAAQ,EAC1C9hB,KAAKgiB,WACLhiB,KAAKgiB,QAAQP,EAAOO,UAAW,GAEnCN,SAAU,4R5BymFZ,SAASxlB,EAAQD,GAEtB,Y6BhoFYA,GAAAwB,KAAe,wBAQvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,IAEnBC,SAAU,4Q7BioFZ,SAASxlB,EAAQD,GAEtB,Y8BlpFYA,GAAAwB,KAAe,wBAQvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,GACfzhB,KAAK4hB,QACDC,WAAW,GAEf7hB,KAAK4hB,OAAO,aAAeH,EAAOK,OAAQ,GAE9CJ,SAAU,2V9BmpFZ,SAASxlB,EAAQD,GAEtB,Y+BpqFYA,GAAAwB,KAAe,oBAMvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,IAEnBC,SAAU,+H/BuqFZ,SAASxlB,EAAQD,GAEtB,YgCnrFYA,GAAAwB,KAAe,mBAQvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,IAEnBC,SAAU;OhCorFZ,SAASxlB,EAAQD,GAEtB,YiCtsFYA,GAAAwB,KAAe,aAMvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjB9jB,EAAEC,OAAOoC,KAAMyhB,GACfzhB,KAAKd,MAAQhB,GAAGoB,WAAWpB,GAAG+jB,OAAOR,EAAOviB,SAEhDwiB,SAAU,6GjCysFZ,SAASxlB,EAAQD,GAEtB,YkCvtFYA,GAAAwB,KAAe,oBAMvB,YACDS,GAAGojB,WAAWC,SAAStlB,EAAAwB,MACnB+jB,UAAW,SAAUC,GACjBzhB,KAAKd,MAAQhB,GAAG+jB,OAAOR,EAAOviB,QAElCwiB,SAAU,iRlC0tFZ,SAASxlB,EAAQD,GAEtB,YmCpuFD,IAAAgG,GAAA,WAGI,QAAAA,GAAawF,GACTzH,KAAKyH,IAAMA,EA+BnB,MA5BWxF,GAAAgF,UAAApC,gBAAP,SAAwBD,EAAc6E,EAAenD,GACjD,GAAMD,GAAU1H,EAAEiG,EAAMpF,QAClBgH,EAAW7H,EAAE,UAAU8H,SAAS,qBAChCmH,EAAajQ,EAAEkX,MAAM7U,KAAKyH,IAAI3F,MAAM+b,QAAQ/U,OAAO,SAACzG,GACtD,GAAM/C,GAAyC+C,EAASoH,EACxD,SAASnK,MACVoK,OAAO,SAACrH,GACP,GAAM/C,GAAyC+C,EAASoH,EACxD,OAAOnK,OACRJ,OACHvB,GAAE+I,KAAKkH,EAAY,SAACvL,GAChBmE,EAASI,OACLjI,EAAE,UACDiI,OAAOvE,EAAS5E,SAIzB4I,EAAQQ,SACJxH,QAAS,QACTiH,MAAOA,EACPQ,MAAM,EACNC,QAASP,IAEZQ,GAAG,oBAAqB,WACrBX,EAAQQ,QAAQ,aAEnBA,QAAQ,SAEjB5E,IAnCahG,GAAAgG,GAAEA","file":"bundle.1.0.0.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/cdn/bundle/assets\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Modal_1 = __webpack_require__(1);\n\tvar ForcibleComputed_1 = __webpack_require__(2);\n\tvar PickTeammate_1 = __webpack_require__(27);\n\tvar TeammateList_1 = __webpack_require__(28);\n\tvar RoleToggle_1 = __webpack_require__(29);\n\tvar RoleStatic_1 = __webpack_require__(30);\n\tvar DeathRoleStatic_1 = __webpack_require__(31);\n\tvar ObservableToggle_1 = __webpack_require__(32);\n\tvar TeammateName_1 = __webpack_require__(33);\n\tvar TeammateRow_1 = __webpack_require__(34);\n\tvar YesNo_1 = __webpack_require__(35);\n\tvar PriorityRank_1 = __webpack_require__(36);\n\tvar Application_1 = __webpack_require__(3);\n\tvar constants_1 = __webpack_require__(11);\n\tvar Constants = __webpack_require__(11);\n\tvar Logic_1 = __webpack_require__(22);\n\t__webpack_require__(23);\n\tvoid ([\n\t    Modal_1.name,\n\t    ForcibleComputed_1.name,\n\t    PickTeammate_1.name,\n\t    TeammateList_1.name,\n\t    RoleToggle_1.name,\n\t    RoleStatic_1.name,\n\t    DeathRoleStatic_1.name,\n\t    ObservableToggle_1.name,\n\t    TeammateName_1.name,\n\t    TeammateRow_1.name,\n\t    YesNo_1.name,\n\t    PriorityRank_1.name,\n\t    Constants\n\t].join(\",\"));\n\t_.extend(window, {\n\t    Application: Application_1.Application,\n\t    Role: Logic_1.Role,\n\t    Constants: {\n\t        StageIDs: constants_1.StageIDs,\n\t        TeammateRoles: constants_1.TeammateRoles\n\t    }\n\t});\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"modal\";\n\tvoid ((function () {\n\t    ko.bindingHandlers[exports.name] = {\n\t        init: function (element, value_accessor, all_bindings_accessor, data, context) {\n\t            var $element = $(element);\n\t            $element.modal({\n\t                show: false\n\t            });\n\t            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n\t                $element.modal(\"destroy\");\n\t            });\n\t        },\n\t        update: function (element, value_accessor, all_bindings_accessor, data, context) {\n\t            var value = value_accessor();\n\t            var $element = $(element);\n\t            if (value) {\n\t                $element.modal(\"show\");\n\t            }\n\t            else {\n\t                $element.modal(\"hide\");\n\t            }\n\t        }\n\t    };\n\t})());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"forcibleComputed\";\n\tvoid ((function () {\n\t    ko[exports.name] = function (func, context, options) {\n\t        var trigger = ko.observable().extend({ notify: 'always' });\n\t        var target = ko.computed(function () {\n\t            trigger();\n\t            return func.call(context);\n\t        }, null, options);\n\t        target[\"evaluateImmediate\"] = function () {\n\t            trigger.valueHasMutated();\n\t        };\n\t        return target;\n\t    };\n\t})());\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Henchman_1 = __webpack_require__(4);\n\tvar Stager_1 = __webpack_require__(5);\n\tvar State_1 = __webpack_require__(17);\n\tvar Serialisation_1 = __webpack_require__(21);\n\tvar Logic_1 = __webpack_require__(22);\n\tvar UI_1 = __webpack_require__(37);\n\tvar constants_1 = __webpack_require__(11);\n\tvar Application = (function () {\n\t    function Application() {\n\t        this.henchmen = [\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Garrus, \"Garrus Vakarian\", true, 3, 5, 0, 8, 11, 10, 2, 11, 8, 0, false, false, true, false, true, true, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Grunt, \"Grunt\", false, 3, 0, 0, 6, 9, 8, 4, 9, 12, 0, false, false, false, false, true, false, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Jack, \"Jack\", true, 0, 8, 12, 5, 8, 11, 1, 12, 0, 8, false, true, false, false, true, false, true, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Jacob, \"Jacob Taylor\", true, 1, 6, 0, 0, 0, 6, 7, 8, 0, 10, false, false, true, false, true, true, true, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Kasumi, \"Kasumi Goto\", false, 0, 9, 0, 12, 0, 3, 9, 4, 0, 9, true, false, false, false, true, true, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Legion, \"Legion\", false, 1, 3, 0, 11, 0, 9, 3, 10, 9, 0, true, false, false, false, true, true, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Miranda, \"Miranda Lawson\", true, 1, 7, 0, 0, 0, -1, 11, 2, 13, 0, false, false, true, true, false, false, true, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Mordin, \"Mordin Solus\", true, 0, 11, 0, 0, 0, 5, 6, 6, 10, 0, false, false, false, false, true, true, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Samara, \"Samara\", false, 1, 4, 0, 4, 7, 7, 5, 7, 0, 12, false, true, false, false, true, false, true, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Tali, \"Tali'zorah\", false, 0, 10, 0, 10, 0, 4, 8, 5, 0, 11, true, false, false, false, true, true, false, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Thane, \"Thane\", false, 1, 2, 0, 9, 12, 12, 0, 13, 0, 13, false, false, false, false, true, true, true, true),\n\t            new Henchman_1.Henchman(this, constants_1.HenchmanIDs.Zaeed, \"Zaeed Masani\", false, 3, 1, 0, 7, 10, 2, 10, 3, 11, 0, false, false, false, false, true, false, false, true)\n\t        ];\n\t        this.serialisation = new Serialisation_1.Serialisation(this);\n\t        this.henchman = ko.observable(undefined);\n\t        this.state = new State_1.State(this);\n\t        this.share = ko.observable(undefined);\n\t        this.stager = new Stager_1.Stager(this);\n\t        if (window.location.search.length > 2) {\n\t            this.state.applySerialisedState(window.location.search.substr(1));\n\t        }\n\t        this.logic = new Logic_1.Logic(this);\n\t        this.ui = new UI_1.UI(this);\n\t    }\n\t    Application.renderYesNo = function (value) {\n\t        return value ? \"Yes\" : \"No\";\n\t    };\n\t    Application.renderRank = function (value) {\n\t        if (value !== undefined) {\n\t            return \"#\" + (value + 1);\n\t        }\n\t        else {\n\t            return \"<span class=\\\"text-muted\\\">N/A</span>\";\n\t        }\n\t    };\n\t    Application.renderTeammateName = function (teammate, highlight) {\n\t        if (highlight === void 0) { highlight = false; }\n\t        if (teammate) {\n\t            return teammate.henchman.name + (highlight ? \" \" + Application.ideal_symbol : \"\");\n\t        }\n\t        else {\n\t            return \"N/A\";\n\t        }\n\t    };\n\t    Application.renderTeammateNameVentVenter = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willBeEffectiveVentVenter());\n\t    };\n\t    Application.renderTeammateNameVentLeader = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willBeEffectiveVentLeader());\n\t    };\n\t    Application.renderTeammateNameLongWalkBubbler = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkBubbler());\n\t    };\n\t    Application.renderTeammateNameLongWalkLeader = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkLeader());\n\t    };\n\t    Application.renderTeammateNameLongWalkEscort = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkEscort());\n\t    };\n\t    Application.renderTeammateNameBossSquadmate = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate.willSurviveBeingBossSquadmate());\n\t    };\n\t    Application.renderTeammateNameKeepBaseAdvocate = function (teammate) {\n\t        return Application.renderTeammateName(teammate, teammate && teammate.henchman.id === constants_1.HenchmanIDs.Miranda);\n\t    };\n\t    Application.renderTeammateDeathCause = function (death_cause) {\n\t        switch (death_cause) {\n\t            case constants_1.TeammateDeathCauses.ArmourFailure:\n\t                return \"Advanced Armour not acquired\";\n\t            case constants_1.TeammateDeathCauses.ShieldingFailure:\n\t                return \"Advanced Shielding not acquired\";\n\t            case constants_1.TeammateDeathCauses.CannonFailure:\n\t                return \"Thanix Cannon not acquired\";\n\t            case constants_1.TeammateDeathCauses.VentsBadLeader:\n\t                return \"Bad vents leader\";\n\t            case constants_1.TeammateDeathCauses.VentsBadVenter:\n\t                return \"Bad vents choice\";\n\t            case constants_1.TeammateDeathCauses.Escort:\n\t                return \"Disloyal escort\";\n\t            case constants_1.TeammateDeathCauses.LongWalkBadBubbler:\n\t                return \"Bad long walk bubbler\";\n\t            case constants_1.TeammateDeathCauses.LongWalkBadLeader:\n\t                return \"Bad long walk leader\";\n\t            case constants_1.TeammateDeathCauses.Boss:\n\t                return \"Disloyal Boss squadmate\";\n\t            case constants_1.TeammateDeathCauses.HoldTheLine:\n\t                return \"Failed to hold the line\";\n\t            default:\n\t                return constants_1.TeammateDeathCauses[death_cause];\n\t        }\n\t    };\n\t    Application.renderCrewSurvival = function (crew_survival) {\n\t        switch (crew_survival) {\n\t            case constants_1.SummaryCrewSurvivalOptions.AllDied:\n\t                return \"All Died\";\n\t            case constants_1.SummaryCrewSurvivalOptions.HalfSurvived:\n\t                return \"Half Survived\";\n\t            case constants_1.SummaryCrewSurvivalOptions.AllSurvived:\n\t                return \"All Survived\";\n\t            default:\n\t                return constants_1.SummaryCrewSurvivalOptions[crew_survival];\n\t        }\n\t    };\n\t    Application.renderHTLScore = function (score) {\n\t        switch (score) {\n\t            case 0:\n\t                return \"0\";\n\t            case 1:\n\t                return \"➊\";\n\t            case 2:\n\t                return \"➋\";\n\t            case 3:\n\t                return \"➌\";\n\t            case 4:\n\t                return \"➍\";\n\t            default:\n\t                return score.toString(10);\n\t        }\n\t    };\n\t    Application.showArmourDeathRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Armour Deaths\", henchman, henchman.getHenchmenSortedByArmourDeathPriority());\n\t    };\n\t    Application.showShieldingDeathRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Shielding Deaths\", henchman, henchman.getHenchmenSortedByShieldingDeathPriority());\n\t    };\n\t    Application.showCannonDeathRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Cannon Deaths\", henchman, henchman.getHenchmenSortedByCannonDeathPriority());\n\t    };\n\t    Application.showLongWalkDeathRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Long Walk Deaths\", henchman, henchman.getHenchmenSortedByLongWalkDeathPriority());\n\t    };\n\t    Application.showHTMLDeathRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Hold the line Deaths\", henchman, henchman.getHenchmenSortedByHTLDeathPriority());\n\t    };\n\t    Application.showDefenceReportRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Defence Reports\", henchman, henchman.getHenchmenSortedByDefenceReportPriority());\n\t    };\n\t    Application.showKeepBaseAdvocateRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Keep Base Advocates\", henchman, henchman.getHenchmenSortedByKeepBasePriority());\n\t    };\n\t    Application.showDestroyBaseAdvocateRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Destroy Base Advocates\", henchman, henchman.getHenchmenSortedByDestroyBasePriority());\n\t    };\n\t    Application.showCutsceneRescueRankPopover = function (henchman, event) {\n\t        return Application.showRankPopover($(event.target), \"Catchs Shepard\", henchman, henchman.getHenchmenSortedByCutsceneRescuePriority());\n\t    };\n\t    Application.getDelayCandidates = function () {\n\t        return [\n\t            constants_1.NormandyDelayOptions.None,\n\t            constants_1.NormandyDelayOptions.Few,\n\t            constants_1.NormandyDelayOptions.Many\n\t        ];\n\t    };\n\t    Application.renderDelayValue = function (value) {\n\t        switch (value) {\n\t            case constants_1.NormandyDelayOptions.None:\n\t                return \"None\";\n\t            case constants_1.NormandyDelayOptions.Few:\n\t                return \"1-3\";\n\t            case constants_1.NormandyDelayOptions.Many:\n\t                return \"More than 3\";\n\t            default:\n\t                return \"\" + value;\n\t        }\n\t    };\n\t    Application.showRankPopover = function ($target, title, henchman, list) {\n\t        var $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n\t        _.each(list, function (list_henchman) {\n\t            $content.append($(\"<li />\")\n\t                .append(list_henchman.name));\n\t        });\n\t        $target.popover({\n\t            trigger: \"focus\",\n\t            title: title,\n\t            html: true,\n\t            content: $content\n\t        })\n\t            .on(\"hidden.bs.popover\", function () {\n\t            $target.popover(\"destroy\");\n\t        })\n\t            .popover(\"show\");\n\t    };\n\t    Application.prototype.getHenchmen = function () {\n\t        return this.henchmen;\n\t    };\n\t    Application.prototype.getHenchman = function (id) {\n\t        return _.find(this.henchmen, function (henchman) {\n\t            return henchman.id === id;\n\t        });\n\t    };\n\t    Application.prototype.predictedToBeDead = function (teammate) {\n\t        if (this.state.stage().is_evaluatable()) {\n\t            return !!this.state.stage().evaluate().find(teammate);\n\t        }\n\t        return false;\n\t    };\n\t    Application.ideal_symbol = \"✭\";\n\t    return Application;\n\t}());\n\texports.Application = Application;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar Henchman = (function () {\n\t    function Henchman(app, id, name, is_essential, htl_value, htl_death_priority, armour_death_priority, shielding_death_priority, cannon_death_priority, long_walk_death_priority, cutscene_rescue_priority, defence_report_priority, keep_base_priority, destroy_base_priority, is_tech_expert, is_biotic_expert, is_leader, is_super_leader, is_escort_candidate, is_vent_candidate, is_bubble_candidate, is_leader_candidate) {\n\t        if (id === void 0) { id = undefined; }\n\t        if (name === void 0) { name = \"\"; }\n\t        if (is_essential === void 0) { is_essential = false; }\n\t        if (htl_value === void 0) { htl_value = 0; }\n\t        if (htl_death_priority === void 0) { htl_death_priority = 0; }\n\t        if (armour_death_priority === void 0) { armour_death_priority = 0; }\n\t        if (shielding_death_priority === void 0) { shielding_death_priority = 0; }\n\t        if (cannon_death_priority === void 0) { cannon_death_priority = 0; }\n\t        if (long_walk_death_priority === void 0) { long_walk_death_priority = 0; }\n\t        if (cutscene_rescue_priority === void 0) { cutscene_rescue_priority = 0; }\n\t        if (defence_report_priority === void 0) { defence_report_priority = 0; }\n\t        if (keep_base_priority === void 0) { keep_base_priority = 0; }\n\t        if (destroy_base_priority === void 0) { destroy_base_priority = 0; }\n\t        if (is_tech_expert === void 0) { is_tech_expert = false; }\n\t        if (is_biotic_expert === void 0) { is_biotic_expert = false; }\n\t        if (is_leader === void 0) { is_leader = false; }\n\t        if (is_super_leader === void 0) { is_super_leader = false; }\n\t        if (is_escort_candidate === void 0) { is_escort_candidate = false; }\n\t        if (is_vent_candidate === void 0) { is_vent_candidate = false; }\n\t        if (is_bubble_candidate === void 0) { is_bubble_candidate = false; }\n\t        if (is_leader_candidate === void 0) { is_leader_candidate = false; }\n\t        this.name = \"\";\n\t        this.app = app;\n\t        this.id = id;\n\t        this.name = name;\n\t        this.is_essential = is_essential;\n\t        this.htl_value = htl_value;\n\t        this.htl_death_priority = htl_death_priority;\n\t        this.armour_death_priority = armour_death_priority;\n\t        this.shielding_death_priority = shielding_death_priority;\n\t        this.cannon_death_priority = cannon_death_priority;\n\t        this.long_walk_death_priority = long_walk_death_priority;\n\t        this.cutscene_rescue_priority = cutscene_rescue_priority;\n\t        this.defence_report_priority = defence_report_priority;\n\t        this.keep_base_priority = keep_base_priority;\n\t        this.destroy_base_priority = destroy_base_priority;\n\t        this.is_tech_expert = is_tech_expert;\n\t        this.is_biotic_expert = is_biotic_expert;\n\t        this.is_leader = is_leader;\n\t        this.is_super_leader = is_super_leader;\n\t        this.is_escort_candidate = is_escort_candidate;\n\t        this.is_vent_candidate = is_vent_candidate;\n\t        this.is_bubble_candidate = is_bubble_candidate;\n\t        this.is_leader_candidate = is_leader_candidate;\n\t    }\n\t    Henchman.prototype.getHenchmenSortedByArmourDeathPriority = function () {\n\t        return this.getHenchmenSortedBy(\"armour_death_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByShieldingDeathPriority = function () {\n\t        return this.getHenchmenSortedBy(\"shielding_death_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByCannonDeathPriority = function () {\n\t        return this.getHenchmenSortedBy(\"cannon_death_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByHTLDeathPriority = function () {\n\t        return this.getHenchmenSortedBy(\"htl_death_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByLongWalkDeathPriority = function () {\n\t        return this.getHenchmenSortedBy(\"long_walk_death_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByCutsceneRescuePriority = function () {\n\t        return this.getHenchmenSortedBy(\"cutscene_rescue_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByDefenceReportPriority = function () {\n\t        return this.getHenchmenSortedBy(\"defence_report_priority\");\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByKeepBasePriority = function () {\n\t        return _.filter(this.getHenchmenSortedBy(\"keep_base_priority\"), function (henchman) {\n\t            return henchman.keep_base_priority > 0;\n\t        });\n\t    };\n\t    Henchman.prototype.getHenchmenSortedByDestroyBasePriority = function () {\n\t        return _.filter(this.getHenchmenSortedBy(\"destroy_base_priority\"), function (henchman) {\n\t            return henchman.destroy_base_priority > 0;\n\t        });\n\t    };\n\t    Henchman.prototype.getHTLDeathPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByHTLDeathPriority(), this);\n\t    };\n\t    Henchman.prototype.getArmourDeathPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByArmourDeathPriority(), this);\n\t    };\n\t    Henchman.prototype.getShieldingDeathPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByShieldingDeathPriority(), this);\n\t    };\n\t    Henchman.prototype.getCannonDeathPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByCannonDeathPriority(), this);\n\t    };\n\t    Henchman.prototype.getLongWalkDeathPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByLongWalkDeathPriority(), this);\n\t    };\n\t    Henchman.prototype.getCutsceneRescuePriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByCutsceneRescuePriority(), this);\n\t    };\n\t    Henchman.prototype.getDefenceReportPriorityRank = function () {\n\t        return _.indexOf(this.getHenchmenSortedByDefenceReportPriority(), this);\n\t    };\n\t    Henchman.prototype.getKeepBasePriorityRank = function () {\n\t        return this.keep_base_priority > 0 ? _.indexOf(this.getHenchmenSortedByKeepBasePriority(), this) : undefined;\n\t    };\n\t    Henchman.prototype.getDestroyBasePriorityRank = function () {\n\t        return this.destroy_base_priority > 0 ? _.indexOf(this.getHenchmenSortedByDestroyBasePriority(), this) : undefined;\n\t    };\n\t    Henchman.prototype.getHenchmenSortedBy = function (field) {\n\t        return _.sortBy(this.app.getHenchmen(), function (henchman) {\n\t            return henchman[field];\n\t        }).reverse();\n\t    };\n\t    return Henchman;\n\t}());\n\texports.Henchman = Henchman;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Setup_1 = __webpack_require__(6);\n\tvar Occulus_1 = __webpack_require__(12);\n\tvar Vents_1 = __webpack_require__(13);\n\tvar LongWalk_1 = __webpack_require__(14);\n\tvar Boss_1 = __webpack_require__(15);\n\tvar Summary_1 = __webpack_require__(16);\n\tvar Stager = (function () {\n\t    function Stager(app) {\n\t        this.app = app;\n\t        this.freezes = [];\n\t        this.stages = _.sortBy([\n\t            new Setup_1.Setup(this),\n\t            new Occulus_1.Occulus(this),\n\t            new Vents_1.Vents(this),\n\t            new LongWalk_1.LongWalk(this),\n\t            new Boss_1.Boss(this),\n\t            new Summary_1.Summary(this)\n\t        ], function (stage) {\n\t            return stage.id;\n\t        });\n\t        this.app.state.stage.subscribe(function (stage) {\n\t            stage.setup();\n\t        });\n\t        this.can_go_back = ko.observable(false);\n\t        this.app.state.stage(this.getStage(0));\n\t        this.initial_freeze = this.app.state.serialise();\n\t    }\n\t    Stager.prototype.getStage = function (id) {\n\t        return this.stages[id];\n\t    };\n\t    Stager.prototype.reset = function () {\n\t        this.app.state.applySerialisedState(this.initial_freeze);\n\t    };\n\t    Stager.prototype.back = function () {\n\t        if (this.can_go_back()) {\n\t            this.app.state.applySerialisedState(this.freezes.pop());\n\t            this.can_go_back(!!this.freezes.length);\n\t        }\n\t    };\n\t    Stager.prototype.next = function () {\n\t        var current_stage = this.app.state.stage();\n\t        if (current_stage.isEvaluatable()) {\n\t            this.freeze();\n\t            current_stage.evaluateAndApply();\n\t            if (current_stage.id < this.stages.length - 1) {\n\t                this.app.state.stage(this.getStage(current_stage.id + 1));\n\t            }\n\t        }\n\t    };\n\t    Stager.prototype.freeze = function () {\n\t        this.freezes.push(this.app.state.serialise());\n\t        this.can_go_back(true);\n\t    };\n\t    return Stager;\n\t}());\n\texports.Stager = Stager;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Setup = (function (_super) {\n\t    __extends(Setup, _super);\n\t    function Setup(stager) {\n\t        var _this = this;\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.Setup;\n\t        this.label = \"Set up\";\n\t        this.all_recruited = ko.pureComputed({\n\t            read: function () {\n\t                return !_this.getTeammates().find(function (teammate) {\n\t                    return !teammate.is_recruited();\n\t                });\n\t            },\n\t            write: function (all_recruited) {\n\t                _this.getTeammates().each(function (teammate) {\n\t                    if (all_recruited || !teammate.henchman.is_essential) {\n\t                        teammate.is_recruited(all_recruited);\n\t                    }\n\t                });\n\t            },\n\t            owner: this\n\t        });\n\t        this.all_loyal = ko.pureComputed({\n\t            read: function () {\n\t                return !_this.getTeammates().find(function (teammate) {\n\t                    return !teammate.is_loyal();\n\t                });\n\t            },\n\t            write: function (all_loyal) {\n\t                if (all_loyal) {\n\t                    _this.getTeammates().each(function (teammate) {\n\t                        teammate.is_recruited(true);\n\t                        teammate.is_loyal(true);\n\t                    });\n\t                }\n\t                else {\n\t                    _this.getTeammates().each(function (teammate) {\n\t                        teammate.is_loyal(false);\n\t                    });\n\t                }\n\t            },\n\t            owner: this\n\t        });\n\t        this.is_evaluatable = ko.pureComputed(function () {\n\t            var is_evaluatable = _.filter(_this.getTeammates().value(), function (teammate) {\n\t                return teammate.is_recruited();\n\t            }).length >= 8;\n\t            return is_evaluatable;\n\t        });\n\t    }\n\t    Setup.prototype.evaluate = function () {\n\t        return new TeammateDeathList_1.TeammateDeathList();\n\t    };\n\t    Setup.prototype.getTeammates = function () {\n\t        return this.stager.app.state.teammates();\n\t    };\n\t    return Setup;\n\t}(Stage_1.Stage));\n\texports.Setup = Setup;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Teammate_1 = __webpack_require__(8);\n\tvar TeammateField_1 = __webpack_require__(9);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Henchman_1 = __webpack_require__(4);\n\tvar Stage = (function () {\n\t    function Stage(stager) {\n\t        this.stager = stager;\n\t    }\n\t    Stage.genericTeammateFieldFilter = function (teammate) {\n\t        return teammate.is_recruited() && !teammate.is_dead();\n\t    };\n\t    Stage.prototype.evaluate = function () {\n\t        return new TeammateDeathList_1.TeammateDeathList();\n\t    };\n\t    Stage.prototype.evaluateAndApply = function () {\n\t        this.evaluate().apply();\n\t    };\n\t    Stage.prototype.configureFields = function (configs) {\n\t        var _this = this;\n\t        this.fields = [];\n\t        this.fields = _.map(configs, function (config) {\n\t            return new TeammateField_1.TeammateField(_this.stager.app.state, function () { return _this.fields; }, config);\n\t        });\n\t        _.each(this.fields, function (field) {\n\t            field.candidates.evaluateImmediate();\n\t        });\n\t        this.is_evaluatable = ko.forcibleComputed(function () {\n\t            var fields_missing = !!_.find(_this.fields, function (field) {\n\t                if (field.config.optional) {\n\t                    return false;\n\t                }\n\t                var teammate = field.observable();\n\t                return teammate ? (teammate.henchman.id === undefined) : true;\n\t            });\n\t            return !fields_missing;\n\t        });\n\t    };\n\t    Stage.prototype.getField = function (name) {\n\t        return _.find(this.fields, function (field) {\n\t            return field.config.name === name;\n\t        });\n\t    };\n\t    Stage.prototype.getFieldObservable = function (name) {\n\t        return this.getField(name).observable;\n\t    };\n\t    Stage.prototype.getFieldCandidates = function (name) {\n\t        return this.getField(name).candidates;\n\t    };\n\t    Stage.prototype.getFieldValue = function (name) {\n\t        return this.getFieldObservable(name)();\n\t    };\n\t    Stage.prototype.setup = function () {\n\t        var _this = this;\n\t        _.each(this.fields, function (field) {\n\t            var state_teammate = _this.stager.app.state.teammates().withRole(field.config.role).first();\n\t            var selector_teammate = field.observable();\n\t            if (state_teammate) {\n\t                if (selector_teammate === undefined || selector_teammate.henchman.id !== state_teammate.henchman.id) {\n\t                    field.observable(state_teammate);\n\t                }\n\t            }\n\t        });\n\t    };\n\t    Stage.prototype.isEvaluatable = function () {\n\t        return this.is_evaluatable();\n\t    };\n\t    Stage.no_teammate = new Teammate_1.Teammate(new Henchman_1.Henchman(undefined, undefined, \"— None —\"));\n\t    return Stage;\n\t}());\n\texports.Stage = Stage;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar Teammate = (function () {\n\t    function Teammate(henchman, is_recruited, is_loyal, is_dead, roles) {\n\t        var _this = this;\n\t        if (is_recruited === void 0) { is_recruited = false; }\n\t        if (is_loyal === void 0) { is_loyal = false; }\n\t        if (is_dead === void 0) { is_dead = false; }\n\t        if (roles === void 0) { roles = []; }\n\t        this.henchman = henchman;\n\t        this.is_recruited = ko.observable(is_recruited);\n\t        this.is_loyal = ko.observable(is_recruited && is_loyal);\n\t        this.is_dead = ko.observable(is_dead);\n\t        this.roles = ko.observableArray(roles);\n\t        this.death_cause = ko.observable(undefined);\n\t        this.death_stage_id = ko.observable(undefined);\n\t        this.is_recruited.subscribe(function (is_recruited) {\n\t            if (!is_recruited && _this.is_loyal()) {\n\t                _this.is_loyal(false);\n\t            }\n\t        });\n\t    }\n\t    Teammate.prototype.addRole = function (role) {\n\t        if (!this.hasRole(role)) {\n\t            if (!this.is_dead()) {\n\t                this.roles.push(role);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    Teammate.prototype.removeRole = function (role) {\n\t        if (!this.is_dead()) {\n\t            this.roles.remove(role);\n\t        }\n\t        return this;\n\t    };\n\t    Teammate.prototype.hasRole = function (role) {\n\t        return this.roles.indexOf(role) > -1;\n\t    };\n\t    Teammate.prototype.hasAnyOfTheseRoles = function () {\n\t        var _this = this;\n\t        var roles = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            roles[_i - 0] = arguments[_i];\n\t        }\n\t        return _.some(roles, function (role) {\n\t            return _this.hasRole(role);\n\t        });\n\t    };\n\t    Teammate.prototype.hasAllOfTheseRoles = function () {\n\t        var _this = this;\n\t        var roles = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            roles[_i - 0] = arguments[_i];\n\t        }\n\t        return _.every(roles, function (role) {\n\t            return _this.hasRole(role);\n\t        });\n\t    };\n\t    Teammate.prototype.getHoldTheLineScore = function () {\n\t        return this.henchman.htl_value + (this.is_loyal() ? 1 : 0);\n\t    };\n\t    Teammate.prototype.willBeEffectiveLongWalkLeader = function () {\n\t        return this.henchman.is_leader && (this.is_loyal() || this.henchman.is_super_leader);\n\t    };\n\t    Teammate.prototype.willBeEffectiveLongWalkEscort = function () {\n\t        return this.is_loyal();\n\t    };\n\t    Teammate.prototype.willBeEffectiveLongWalkBubbler = function () {\n\t        return this.is_loyal() && this.henchman.is_biotic_expert;\n\t    };\n\t    Teammate.prototype.willSurviveBeingBossSquadmate = function () {\n\t        return this.is_loyal();\n\t    };\n\t    Teammate.prototype.willBeEffectiveVentVenter = function () {\n\t        return this.henchman.is_tech_expert && this.is_loyal();\n\t    };\n\t    Teammate.prototype.willBeEffectiveVentLeader = function () {\n\t        return this.henchman.is_leader && this.is_loyal();\n\t    };\n\t    Teammate.prototype.die = function (stage_id, death_cause) {\n\t        this.death_stage_id(stage_id);\n\t        this.death_cause(death_cause);\n\t        this.is_dead(true);\n\t        return this;\n\t    };\n\t    return Teammate;\n\t}());\n\texports.Teammate = Teammate;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Stage_1 = __webpack_require__(7);\n\tvar TeammateField = (function () {\n\t    function TeammateField(state, siblings, config) {\n\t        this.config = config;\n\t        this.observable = ko.observable(undefined);\n\t        this.candidates = ko.forcibleComputed(function () {\n\t            var candidates = state.teammates().filter(function (teammate) {\n\t                return config.filter(teammate, state.teammates());\n\t            }).filter(function (candidate) {\n\t                return !_.find(siblings(), function (other_field) {\n\t                    if (other_field.config.name !== config.name && other_field.observable) {\n\t                        if (other_field.observable() === candidate) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    return false;\n\t                });\n\t            }).value();\n\t            candidates.unshift(Stage_1.Stage.no_teammate);\n\t            return candidates;\n\t        });\n\t        this.observable.subscribe(function (teammate) {\n\t            if (config.role !== undefined && teammate && teammate.henchman.id !== undefined) {\n\t                teammate.removeRole(config.role);\n\t            }\n\t        }, null, \"beforeChange\");\n\t        this.observable.subscribe(function (teammate) {\n\t            if (config.role !== undefined) {\n\t                teammate.addRole(config.role);\n\t            }\n\t            _.each(siblings(), function (other_field) {\n\t                if (other_field.config.name !== config.name) {\n\t                    other_field.candidates.evaluateImmediate();\n\t                }\n\t            });\n\t        });\n\t    }\n\t    return TeammateField;\n\t}());\n\texports.TeammateField = TeammateField;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar TeammateDeathList = (function () {\n\t    function TeammateDeathList() {\n\t        var list = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            list[_i - 0] = arguments[_i];\n\t        }\n\t        this.list = list;\n\t    }\n\t    TeammateDeathList.prototype.apply = function () {\n\t        _.each(this.list, function (element) {\n\t            element.teammate.die(element.death_stage_id, element.death_cause);\n\t        });\n\t        return this;\n\t    };\n\t    TeammateDeathList.prototype.getAll = function () {\n\t        return this.list;\n\t    };\n\t    TeammateDeathList.prototype.find = function (teammate) {\n\t        return _.find(this.list, function (death) {\n\t            return death.teammate.henchman.id === teammate.henchman.id;\n\t        });\n\t    };\n\t    TeammateDeathList.prototype.add = function (death) {\n\t        this.list.push(death);\n\t        return this;\n\t    };\n\t    return TeammateDeathList;\n\t}());\n\texports.TeammateDeathList = TeammateDeathList;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (HenchmanIDs) {\n\t    HenchmanIDs[HenchmanIDs[\"Garrus\"] = 1] = \"Garrus\";\n\t    HenchmanIDs[HenchmanIDs[\"Grunt\"] = 2] = \"Grunt\";\n\t    HenchmanIDs[HenchmanIDs[\"Jack\"] = 3] = \"Jack\";\n\t    HenchmanIDs[HenchmanIDs[\"Jacob\"] = 4] = \"Jacob\";\n\t    HenchmanIDs[HenchmanIDs[\"Kasumi\"] = 5] = \"Kasumi\";\n\t    HenchmanIDs[HenchmanIDs[\"Legion\"] = 6] = \"Legion\";\n\t    HenchmanIDs[HenchmanIDs[\"Miranda\"] = 7] = \"Miranda\";\n\t    HenchmanIDs[HenchmanIDs[\"Mordin\"] = 8] = \"Mordin\";\n\t    HenchmanIDs[HenchmanIDs[\"Morinth\"] = 9] = \"Morinth\";\n\t    HenchmanIDs[HenchmanIDs[\"Samara\"] = 10] = \"Samara\";\n\t    HenchmanIDs[HenchmanIDs[\"Tali\"] = 11] = \"Tali\";\n\t    HenchmanIDs[HenchmanIDs[\"Thane\"] = 12] = \"Thane\";\n\t    HenchmanIDs[HenchmanIDs[\"Zaeed\"] = 13] = \"Zaeed\";\n\t})(exports.HenchmanIDs || (exports.HenchmanIDs = {}));\n\tvar HenchmanIDs = exports.HenchmanIDs;\n\t(function (NormandyDelayOptions) {\n\t    NormandyDelayOptions[NormandyDelayOptions[\"None\"] = 0] = \"None\";\n\t    NormandyDelayOptions[NormandyDelayOptions[\"Few\"] = 1] = \"Few\";\n\t    NormandyDelayOptions[NormandyDelayOptions[\"Many\"] = 2] = \"Many\";\n\t})(exports.NormandyDelayOptions || (exports.NormandyDelayOptions = {}));\n\tvar NormandyDelayOptions = exports.NormandyDelayOptions;\n\t(function (SerialisedElements) {\n\t    SerialisedElements[SerialisedElements[\"All\"] = 0] = \"All\";\n\t    SerialisedElements[SerialisedElements[\"StageID\"] = 1] = \"StageID\";\n\t    SerialisedElements[SerialisedElements[\"NormandyDelay\"] = 2] = \"NormandyDelay\";\n\t    SerialisedElements[SerialisedElements[\"NormandyFlags\"] = 3] = \"NormandyFlags\";\n\t    SerialisedElements[SerialisedElements[\"Teammates\"] = 4] = \"Teammates\";\n\t})(exports.SerialisedElements || (exports.SerialisedElements = {}));\n\tvar SerialisedElements = exports.SerialisedElements;\n\t(function (SerialisedTeammateElements) {\n\t    SerialisedTeammateElements[SerialisedTeammateElements[\"All\"] = 0] = \"All\";\n\t    SerialisedTeammateElements[SerialisedTeammateElements[\"HenchmanID\"] = 1] = \"HenchmanID\";\n\t    SerialisedTeammateElements[SerialisedTeammateElements[\"DeathCause\"] = 2] = \"DeathCause\";\n\t    SerialisedTeammateElements[SerialisedTeammateElements[\"DeathStageID\"] = 3] = \"DeathStageID\";\n\t    SerialisedTeammateElements[SerialisedTeammateElements[\"Roles\"] = 4] = \"Roles\";\n\t})(exports.SerialisedTeammateElements || (exports.SerialisedTeammateElements = {}));\n\tvar SerialisedTeammateElements = exports.SerialisedTeammateElements;\n\t(function (TeammateDeathCauses) {\n\t    TeammateDeathCauses[TeammateDeathCauses[\"ArmourFailure\"] = 0] = \"ArmourFailure\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"ShieldingFailure\"] = 1] = \"ShieldingFailure\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"CannonFailure\"] = 2] = \"CannonFailure\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"VentsBadVenter\"] = 3] = \"VentsBadVenter\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"VentsBadLeader\"] = 4] = \"VentsBadLeader\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"LongWalkBadBubbler\"] = 5] = \"LongWalkBadBubbler\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"LongWalkBadLeader\"] = 6] = \"LongWalkBadLeader\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"Escort\"] = 7] = \"Escort\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"Boss\"] = 8] = \"Boss\";\n\t    TeammateDeathCauses[TeammateDeathCauses[\"HoldTheLine\"] = 9] = \"HoldTheLine\";\n\t})(exports.TeammateDeathCauses || (exports.TeammateDeathCauses = {}));\n\tvar TeammateDeathCauses = exports.TeammateDeathCauses;\n\t(function (TeammateRoles) {\n\t    TeammateRoles[TeammateRoles[\"OcculusSquadmate1\"] = 0] = \"OcculusSquadmate1\";\n\t    TeammateRoles[TeammateRoles[\"OcculusSquadmate2\"] = 1] = \"OcculusSquadmate2\";\n\t    TeammateRoles[TeammateRoles[\"VentsSquadmate1\"] = 2] = \"VentsSquadmate1\";\n\t    TeammateRoles[TeammateRoles[\"VentsSquadmate2\"] = 3] = \"VentsSquadmate2\";\n\t    TeammateRoles[TeammateRoles[\"VentsVenter\"] = 4] = \"VentsVenter\";\n\t    TeammateRoles[TeammateRoles[\"VentsLeader\"] = 5] = \"VentsLeader\";\n\t    TeammateRoles[TeammateRoles[\"LongWalkSquadmate1\"] = 6] = \"LongWalkSquadmate1\";\n\t    TeammateRoles[TeammateRoles[\"LongWalkSquadmate2\"] = 7] = \"LongWalkSquadmate2\";\n\t    TeammateRoles[TeammateRoles[\"LongWalkEscort\"] = 8] = \"LongWalkEscort\";\n\t    TeammateRoles[TeammateRoles[\"LongWalkBubbler\"] = 9] = \"LongWalkBubbler\";\n\t    TeammateRoles[TeammateRoles[\"LongWalkLeader\"] = 10] = \"LongWalkLeader\";\n\t    TeammateRoles[TeammateRoles[\"BossSquadmate1\"] = 11] = \"BossSquadmate1\";\n\t    TeammateRoles[TeammateRoles[\"BossSquadmate2\"] = 12] = \"BossSquadmate2\";\n\t    TeammateRoles[TeammateRoles[\"HeldTheLine\"] = 13] = \"HeldTheLine\";\n\t})(exports.TeammateRoles || (exports.TeammateRoles = {}));\n\tvar TeammateRoles = exports.TeammateRoles;\n\t(function (StageIDs) {\n\t    StageIDs[StageIDs[\"Setup\"] = 0] = \"Setup\";\n\t    StageIDs[StageIDs[\"Occulus\"] = 1] = \"Occulus\";\n\t    StageIDs[StageIDs[\"Vents\"] = 2] = \"Vents\";\n\t    StageIDs[StageIDs[\"LongWalk\"] = 3] = \"LongWalk\";\n\t    StageIDs[StageIDs[\"Boss\"] = 4] = \"Boss\";\n\t    StageIDs[StageIDs[\"Summary\"] = 5] = \"Summary\";\n\t})(exports.StageIDs || (exports.StageIDs = {}));\n\tvar StageIDs = exports.StageIDs;\n\t(function (SummaryCrewSurvivalOptions) {\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"AllSurvived\"] = 0] = \"AllSurvived\";\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"HalfSurvived\"] = 1] = \"HalfSurvived\";\n\t    SummaryCrewSurvivalOptions[SummaryCrewSurvivalOptions[\"AllDied\"] = 2] = \"AllDied\";\n\t})(exports.SummaryCrewSurvivalOptions || (exports.SummaryCrewSurvivalOptions = {}));\n\tvar SummaryCrewSurvivalOptions = exports.SummaryCrewSurvivalOptions;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Occulus = (function (_super) {\n\t    __extends(Occulus, _super);\n\t    function Occulus(stager) {\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.Occulus;\n\t        this.label = \"Occulus\";\n\t        this.configureFields([\n\t            {\n\t                name: \"occulus_squadmate_1\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.OcculusSquadmate1\n\t            },\n\t            {\n\t                name: \"occulus_squadmate_2\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.OcculusSquadmate2\n\t            }\n\t        ]);\n\t    }\n\t    Occulus.prototype.evaluate = function () {\n\t        var death_list = new TeammateDeathList_1.TeammateDeathList;\n\t        var dpt = this.stager.app.state.teammates().whoAreRecruited().withoutAnyOfTheseRoles(constants_1.TeammateRoles.OcculusSquadmate1, constants_1.TeammateRoles.OcculusSquadmate2);\n\t        if (!this.stager.app.state.normandy.has_shielding()) {\n\t            death_list.add({\n\t                teammate: dpt.whoAreAlive().sortByShieldingDeathPriority().last(),\n\t                death_cause: constants_1.TeammateDeathCauses.ShieldingFailure,\n\t                death_stage_id: this.id\n\t            });\n\t        }\n\t        if (!this.stager.app.state.normandy.has_armour()) {\n\t            death_list.add({\n\t                teammate: dpt.whoAreAlive().sortByArmourDeathPriority().last(),\n\t                death_cause: constants_1.TeammateDeathCauses.ArmourFailure,\n\t                death_stage_id: this.id\n\t            });\n\t        }\n\t        if (!this.stager.app.state.normandy.has_thanix_cannon()) {\n\t            death_list.add({\n\t                teammate: dpt.whoAreAlive().sortByCannonDeathPriority().last(),\n\t                death_cause: constants_1.TeammateDeathCauses.CannonFailure,\n\t                death_stage_id: this.id\n\t            });\n\t        }\n\t        return death_list;\n\t    };\n\t    return Occulus;\n\t}(Stage_1.Stage));\n\texports.Occulus = Occulus;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Vents = (function (_super) {\n\t    __extends(Vents, _super);\n\t    function Vents(stager) {\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.Vents;\n\t        this.label = \"Vents\";\n\t        this.configureFields([\n\t            {\n\t                name: \"vent_squadmate_1\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.VentsSquadmate1\n\t            },\n\t            {\n\t                name: \"vent_squadmate_2\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.VentsSquadmate2\n\t            },\n\t            {\n\t                name: \"vent_venter\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_vent_candidate;\n\t                },\n\t                role: constants_1.TeammateRoles.VentsVenter\n\t            },\n\t            {\n\t                name: \"vent_leader\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_leader_candidate;\n\t                },\n\t                role: constants_1.TeammateRoles.VentsLeader\n\t            }\n\t        ]);\n\t    }\n\t    Vents.prototype.evaluate = function () {\n\t        var death_list = new TeammateDeathList_1.TeammateDeathList();\n\t        var venter = this.getFieldValue(\"vent_venter\");\n\t        var leader = this.getFieldValue(\"vent_leader\");\n\t        if (!venter.willBeEffectiveVentVenter()) {\n\t            death_list.add({\n\t                teammate: venter,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.VentsBadVenter\n\t            });\n\t        }\n\t        else if (!leader.willBeEffectiveVentLeader()) {\n\t            death_list.add({\n\t                teammate: venter,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.VentsBadLeader\n\t            });\n\t        }\n\t        return death_list;\n\t    };\n\t    return Vents;\n\t}(Stage_1.Stage));\n\texports.Vents = Vents;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar LongWalk = (function (_super) {\n\t    __extends(LongWalk, _super);\n\t    function LongWalk(stager) {\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.LongWalk;\n\t        this.label = \"Long Walk\";\n\t        this.configureFields([\n\t            {\n\t                name: \"long_walk_bubbler\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_bubble_candidate;\n\t                },\n\t                role: constants_1.TeammateRoles.LongWalkBubbler\n\t            },\n\t            {\n\t                name: \"long_walk_leader\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_leader_candidate;\n\t                },\n\t                role: constants_1.TeammateRoles.LongWalkLeader\n\t            },\n\t            {\n\t                name: \"long_walk_escort\",\n\t                filter: function (teammate, teammates) {\n\t                    if (teammates.whoAreAlive().length() <= 4) {\n\t                        return false;\n\t                    }\n\t                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_escort_candidate;\n\t                },\n\t                optional: true,\n\t                role: constants_1.TeammateRoles.LongWalkEscort\n\t            },\n\t            {\n\t                name: \"long_walk_squadmate_1\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.LongWalkSquadmate1\n\t            },\n\t            {\n\t                name: \"long_walk_squadmate_2\",\n\t                filter: Stage_1.Stage.genericTeammateFieldFilter,\n\t                role: constants_1.TeammateRoles.LongWalkSquadmate2\n\t            }\n\t        ]);\n\t    }\n\t    LongWalk.prototype.evaluate = function () {\n\t        var death_list = new TeammateDeathList_1.TeammateDeathList();\n\t        var escort = this.getFieldValue(\"long_walk_escort\");\n\t        var bubbler = this.getFieldValue(\"long_walk_bubbler\");\n\t        var leader = this.getFieldValue(\"long_walk_leader\");\n\t        if (escort.henchman.id !== undefined && !escort.willBeEffectiveLongWalkEscort()) {\n\t            death_list.add({\n\t                teammate: escort,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.Escort\n\t            });\n\t        }\n\t        if (!bubbler.willBeEffectiveLongWalkBubbler()) {\n\t            death_list.add({\n\t                teammate: this.stager.app.state.teammates().withAnyOfTheseRoles(constants_1.TeammateRoles.LongWalkSquadmate1, constants_1.TeammateRoles.LongWalkSquadmate2).sortByLongWalkDeathPriority().last(),\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.LongWalkBadBubbler\n\t            });\n\t        }\n\t        if (!leader.willBeEffectiveLongWalkLeader()) {\n\t            death_list.add({\n\t                teammate: leader,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.LongWalkBadLeader\n\t            });\n\t        }\n\t        return death_list;\n\t    };\n\t    return LongWalk;\n\t}(Stage_1.Stage));\n\texports.LongWalk = LongWalk;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Boss = (function (_super) {\n\t    __extends(Boss, _super);\n\t    function Boss(stager) {\n\t        var _this = this;\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.Boss;\n\t        this.label = \"Boss\";\n\t        this.configureFields([\n\t            {\n\t                name: \"boss_squadmate_1\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && !teammate.hasRole(constants_1.TeammateRoles.LongWalkEscort);\n\t                },\n\t                role: constants_1.TeammateRoles.BossSquadmate1\n\t            },\n\t            {\n\t                name: \"boss_squadmate_2\",\n\t                filter: function (teammate) {\n\t                    return teammate.is_recruited() && !teammate.is_dead() && !teammate.hasRole(constants_1.TeammateRoles.LongWalkEscort);\n\t                },\n\t                role: constants_1.TeammateRoles.BossSquadmate2\n\t            }\n\t        ]);\n\t        this.getFieldObservable(\"boss_squadmate_1\").subscribe(function () {\n\t            _this.updateHTLRoles();\n\t        });\n\t        this.getFieldObservable(\"boss_squadmate_2\").subscribe(function () {\n\t            _this.updateHTLRoles();\n\t        });\n\t    }\n\t    Boss.prototype.evaluate = function () {\n\t        var _this = this;\n\t        var death_list = new TeammateDeathList_1.TeammateDeathList();\n\t        var squadmate_1 = this.getFieldValue(\"boss_squadmate_1\");\n\t        var squadmate_2 = this.getFieldValue(\"boss_squadmate_2\");\n\t        if (!squadmate_1.willSurviveBeingBossSquadmate()) {\n\t            death_list.add({\n\t                teammate: squadmate_1,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.Boss\n\t            });\n\t        }\n\t        if (!squadmate_2.willSurviveBeingBossSquadmate()) {\n\t            death_list.add({\n\t                teammate: squadmate_2,\n\t                death_stage_id: this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.Boss\n\t            });\n\t        }\n\t        this.stager.app.state.teammates().withRole(constants_1.TeammateRoles.HeldTheLine).whoDieHoldingTheLine().each(function (teammate) {\n\t            death_list.add({\n\t                teammate: teammate,\n\t                death_stage_id: _this.id,\n\t                death_cause: constants_1.TeammateDeathCauses.HoldTheLine\n\t            });\n\t        });\n\t        return death_list;\n\t    };\n\t    Boss.prototype.updateHTLRoles = function () {\n\t        var squadmates = this.stager.app.state.teammates().withAnyOfTheseRoles(constants_1.TeammateRoles.BossSquadmate1, constants_1.TeammateRoles.BossSquadmate2);\n\t        var candidates = this.stager.app.state.teammates().whoAreAlive().whoAreRecruited();\n\t        squadmates.removeRole(constants_1.TeammateRoles.HeldTheLine);\n\t        if (squadmates.length() === 2) {\n\t            candidates.removeRole(constants_1.TeammateRoles.HeldTheLine).withoutAnyOfTheseRoles(constants_1.TeammateRoles.BossSquadmate1, constants_1.TeammateRoles.BossSquadmate2, constants_1.TeammateRoles.LongWalkEscort).addRole(constants_1.TeammateRoles.HeldTheLine);\n\t        }\n\t    };\n\t    return Boss;\n\t}(Stage_1.Stage));\n\texports.Boss = Boss;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Stage_1 = __webpack_require__(7);\n\tvar constants_1 = __webpack_require__(11);\n\tvar TeammateDeathList_1 = __webpack_require__(10);\n\tvar Summary = (function (_super) {\n\t    __extends(Summary, _super);\n\t    function Summary(stager) {\n\t        _super.call(this, stager);\n\t        this.id = constants_1.StageIDs.Summary;\n\t        this.label = \"Summary\";\n\t        this.shepard_lives = ko.observable(undefined);\n\t        this.shepard_pulled_up_by = ko.observable(undefined);\n\t        this.defence_reporter = ko.observable(undefined);\n\t        this.keep_base_advocate = ko.observable(undefined);\n\t        this.destroy_base_advocate = ko.observable(undefined);\n\t        this.crew_survival = ko.observable(undefined);\n\t        this.is_evaluatable = ko.observable(false);\n\t        this.htl_total = ko.observable(undefined);\n\t        this.htl_score = ko.observable(undefined);\n\t        this.htl_candidates_count = ko.observable(undefined);\n\t        this.htl_death_count = ko.observable(undefined);\n\t    }\n\t    Summary.prototype.evaluate = function () {\n\t        return new TeammateDeathList_1.TeammateDeathList();\n\t    };\n\t    Summary.prototype.setup = function () {\n\t        var htl_teammates = this.stager.app.state.teammates().withRole(constants_1.TeammateRoles.HeldTheLine);\n\t        this.defence_reporter(this.getDefenceReporter());\n\t        this.shepard_lives(this.getShepardLives());\n\t        this.shepard_pulled_up_by(this.getShepardCatcher());\n\t        this.keep_base_advocate(this.getKeepBaseAdvocate());\n\t        this.destroy_base_advocate(this.getDestroyBaseAdvocate());\n\t        this.crew_survival(this.getCrewSurvival());\n\t        this.htl_total(htl_teammates.getHoldTheLineTotal());\n\t        this.htl_score(htl_teammates.getHoldTheLineScore().toFixed(2));\n\t        this.htl_candidates_count(htl_teammates.length());\n\t        this.htl_death_count(htl_teammates.getHoldTheLineDeathCount());\n\t    };\n\t    Summary.prototype.getLivingTeammates = function () {\n\t        return this.stager.app.state.teammates().whoAreAlive().whoAreRecruited();\n\t    };\n\t    Summary.prototype.getShepardLives = function () {\n\t        return this.getLivingTeammates().length() > 1;\n\t    };\n\t    Summary.prototype.getShepardCatcher = function () {\n\t        var candidates = this.getLivingTeammates().sort(function (teammate) {\n\t            var score = teammate.henchman.cutscene_rescue_priority + (teammate.hasAnyOfTheseRoles(constants_1.TeammateRoles.BossSquadmate1, constants_1.TeammateRoles.BossSquadmate2) ? 100 : 0);\n\t            return score;\n\t        });\n\t        return candidates.length() > 1 ? candidates.last() : undefined;\n\t    };\n\t    Summary.prototype.getDefenceReporter = function () {\n\t        return this.stager.app.state.teammates().withRole(constants_1.TeammateRoles.HeldTheLine).sortByDefenceReportPriority().last();\n\t    };\n\t    Summary.prototype.getKeepBaseAdvocate = function () {\n\t        return this.stager.app.state.teammates().withAnyOfTheseRoles(constants_1.TeammateRoles.BossSquadmate1, constants_1.TeammateRoles.BossSquadmate2).whoAdvocateKeepingTheBase().sortByKeepBasePriority().last();\n\t    };\n\t    Summary.prototype.getDestroyBaseAdvocate = function () {\n\t        return this.stager.app.state.teammates().withAnyOfTheseRoles(constants_1.TeammateRoles.BossSquadmate1, constants_1.TeammateRoles.BossSquadmate2).whoAdvocateDestroyingTheBase().sortByDestroyBasePriority().last();\n\t    };\n\t    Summary.prototype.getCrewSurvival = function () {\n\t        if (this.stager.app.state.teammates().withRole(constants_1.TeammateRoles.LongWalkEscort).length() === 0) {\n\t            return constants_1.SummaryCrewSurvivalOptions.AllDied;\n\t        }\n\t        if (this.stager.app.state.normandy.delay() === constants_1.NormandyDelayOptions.None) {\n\t            return constants_1.SummaryCrewSurvivalOptions.AllSurvived;\n\t        }\n\t        else if (this.stager.app.state.normandy.delay() === constants_1.NormandyDelayOptions.Few) {\n\t            return constants_1.SummaryCrewSurvivalOptions.HalfSurvived;\n\t        }\n\t        else {\n\t            return constants_1.SummaryCrewSurvivalOptions.AllDied;\n\t        }\n\t    };\n\t    return Summary;\n\t}(Stage_1.Stage));\n\texports.Summary = Summary;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Normandy_1 = __webpack_require__(18);\n\tvar Teammates_1 = __webpack_require__(19);\n\tvar Teammate_1 = __webpack_require__(8);\n\tvar State = (function () {\n\t    function State(app) {\n\t        var _this = this;\n\t        this.app = app;\n\t        this.normandy = new Normandy_1.Normandy(true, true, true);\n\t        this.stage = ko.observable(undefined);\n\t        this.bootstrapTeammates();\n\t        this.serialised = ko.forcibleComputed(function () {\n\t            if (_this.stage()) {\n\t                return _this.serialise();\n\t            }\n\t            else {\n\t                return \"\";\n\t            }\n\t        });\n\t    }\n\t    State.prototype.serialise = function () {\n\t        return this.app.serialisation.serialise(this);\n\t    };\n\t    State.prototype.applySerialisedState = function (serialised) {\n\t        this.app.serialisation.applySerialisedState(this, serialised);\n\t    };\n\t    State.prototype.bootstrapTeammates = function () {\n\t        this._teammates = new Teammates_1.Teammates(_.chain(this.app.getHenchmen()).map(function (henchman) {\n\t            return new Teammate_1.Teammate(henchman, henchman.is_essential, false, false);\n\t        }).sortBy(function (teammate) {\n\t            return teammate.henchman.name;\n\t        }).value());\n\t        this.teammates = ko.observable(this._teammates);\n\t    };\n\t    return State;\n\t}());\n\texports.State = State;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar constants_1 = __webpack_require__(11);\n\tvar Normandy = (function () {\n\t    function Normandy(has_armor, has_shielding, has_thanix_cannon, delay) {\n\t        var _this = this;\n\t        if (has_armor === void 0) { has_armor = false; }\n\t        if (has_shielding === void 0) { has_shielding = false; }\n\t        if (has_thanix_cannon === void 0) { has_thanix_cannon = false; }\n\t        if (delay === void 0) { delay = 0; }\n\t        this.has_armour = ko.observable(has_armor);\n\t        this.has_shielding = ko.observable(has_shielding);\n\t        this.has_thanix_cannon = ko.observable(has_thanix_cannon);\n\t        this._delay = ko.observable(delay);\n\t        this.delay = ko.pureComputed({\n\t            read: function () {\n\t                return _this._delay();\n\t            },\n\t            write: function (value) {\n\t                var delay = parseInt(\"\" + value, 10);\n\t                if (!_.isNaN(delay) && delay >= constants_1.NormandyDelayOptions.None && delay <= constants_1.NormandyDelayOptions.Many) {\n\t                    _this._delay(delay);\n\t                }\n\t            }\n\t        });\n\t    }\n\t    return Normandy;\n\t}());\n\texports.Normandy = Normandy;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ObjectArray_1 = __webpack_require__(20);\n\tvar Teammates = (function () {\n\t    function Teammates(elements) {\n\t        this.oa = new ObjectArray_1.ObjectArray(elements);\n\t    }\n\t    Teammates.fromObjectArray = function (oa) {\n\t        return new Teammates(oa.elements);\n\t    };\n\t    Teammates.prototype.value = function () {\n\t        return this.oa.elements;\n\t    };\n\t    Teammates.prototype.first = function () {\n\t        return this.oa.first();\n\t    };\n\t    Teammates.prototype.last = function () {\n\t        return this.oa.last();\n\t    };\n\t    Teammates.prototype.length = function () {\n\t        return this.oa.length();\n\t    };\n\t    Teammates.prototype.whoAreAlive = function () {\n\t        return this.filter(function (teammate) {\n\t            return !teammate.is_dead();\n\t        });\n\t    };\n\t    Teammates.prototype.die = function (stage_id, death_cause) {\n\t        this.each(function (teammate) {\n\t            teammate.die(stage_id, death_cause);\n\t        });\n\t        return this;\n\t    };\n\t    Teammates.prototype.whoAreRecruited = function () {\n\t        return this.filter(function (teammate) {\n\t            return teammate.is_recruited();\n\t        });\n\t    };\n\t    Teammates.prototype.addRole = function (role) {\n\t        this.each(function (teammate) {\n\t            teammate.addRole(role);\n\t        });\n\t        return this;\n\t    };\n\t    Teammates.prototype.removeRole = function (role) {\n\t        this.each(function (teammate) {\n\t            teammate.removeRole(role);\n\t        });\n\t        return this;\n\t    };\n\t    Teammates.prototype.withRole = function (role) {\n\t        return this.filter(function (teammate) {\n\t            return teammate.hasRole(role);\n\t        });\n\t    };\n\t    Teammates.prototype.withAnyOfTheseRoles = function () {\n\t        var roles = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            roles[_i - 0] = arguments[_i];\n\t        }\n\t        return this.filter(function (teammate) {\n\t            return teammate.hasAnyOfTheseRoles.apply(teammate, roles);\n\t        });\n\t    };\n\t    Teammates.prototype.withoutRole = function (role) {\n\t        return this.filter(function (teammate) {\n\t            return !teammate.hasRole(role);\n\t        });\n\t    };\n\t    Teammates.prototype.withoutAnyOfTheseRoles = function () {\n\t        var roles = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            roles[_i - 0] = arguments[_i];\n\t        }\n\t        return this.filter(function (teammate) {\n\t            return !teammate.hasAnyOfTheseRoles.apply(teammate, roles);\n\t        });\n\t    };\n\t    Teammates.prototype.sortByHenchmanProperty = function (property, ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sort(function (teammate) {\n\t            return (ascending ? 1 : -1) * teammate.henchman[property];\n\t        });\n\t    };\n\t    Teammates.prototype.sortByShieldingDeathPriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"shielding_death_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByArmourDeathPriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"armour_death_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByCannonDeathPriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"cannon_death_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByLongWalkDeathPriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"long_walk_death_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByDefenceReportPriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"defence_report_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByKeepBasePriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"keep_base_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByDestroyBasePriority = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sortByHenchmanProperty(\"destroy_base_priority\", ascending);\n\t    };\n\t    Teammates.prototype.sortByIsRecruited = function (ascending) {\n\t        if (ascending === void 0) { ascending = true; }\n\t        return this.sort(function (teammate) {\n\t            return teammate.is_recruited() ? 0 : 1;\n\t        });\n\t    };\n\t    Teammates.prototype.whoAdvocateKeepingTheBase = function () {\n\t        return this.filter(function (teammate) {\n\t            return teammate.henchman.keep_base_priority > 0;\n\t        });\n\t    };\n\t    Teammates.prototype.whoAdvocateDestroyingTheBase = function () {\n\t        return this.filter(function (teammate) {\n\t            return teammate.henchman.destroy_base_priority > 0;\n\t        });\n\t    };\n\t    Teammates.prototype.without = function () {\n\t        var teammates = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            teammates[_i - 0] = arguments[_i];\n\t        }\n\t        return Teammates.fromObjectArray(this.oa.without.apply(this.oa, teammates));\n\t    };\n\t    Teammates.prototype.filter = function (iterator) {\n\t        return Teammates.fromObjectArray(this.oa.filter(iterator));\n\t    };\n\t    Teammates.prototype.map = function (iterator) {\n\t        return this.oa.map(iterator);\n\t    };\n\t    Teammates.prototype.find = function (iterator) {\n\t        return this.oa.find(iterator);\n\t    };\n\t    Teammates.prototype.findByHenchman = function (henchman) {\n\t        return this.findByHenchmanID(henchman.id);\n\t    };\n\t    Teammates.prototype.findByHenchmanID = function (id) {\n\t        return this.find(function (teammate) {\n\t            return teammate.henchman.id === id;\n\t        });\n\t    };\n\t    Teammates.prototype.sort = function (iterator) {\n\t        return Teammates.fromObjectArray(this.oa.sort(iterator));\n\t    };\n\t    Teammates.prototype.slice = function (start, end) {\n\t        return Teammates.fromObjectArray(this.oa.slice(start, end));\n\t    };\n\t    Teammates.prototype.getHoldTheLineTotal = function () {\n\t        var scores = _.map(this.oa.elements, function (teammate) {\n\t            return teammate.getHoldTheLineScore();\n\t        });\n\t        return _.reduce(scores, function (sum, score) {\n\t            return sum + score;\n\t        }, 0);\n\t    };\n\t    Teammates.prototype.getHoldTheLineScore = function () {\n\t        return this.getHoldTheLineTotal() / this.length();\n\t    };\n\t    Teammates.prototype.getHoldTheLineDeathCount = function () {\n\t        var pool_size = this.length();\n\t        var score = this.getHoldTheLineScore();\n\t        if (score < 2.0) {\n\t            if (pool_size >= 5) {\n\t                if (score >= 1.5) {\n\t                    return 1;\n\t                }\n\t                else if (score >= 0.5) {\n\t                    return 2;\n\t                }\n\t                else {\n\t                    return 3;\n\t                }\n\t            }\n\t            else if (pool_size === 4) {\n\t                if (score >= 1.0) {\n\t                    return 1;\n\t                }\n\t                else if (score >= 0.5) {\n\t                    return 2;\n\t                }\n\t                else if (score > 0) {\n\t                    return 3;\n\t                }\n\t                else {\n\t                    return 4;\n\t                }\n\t            }\n\t            else if (pool_size === 3) {\n\t                if (score >= 1) {\n\t                    return 1;\n\t                }\n\t                else if (score > 0) {\n\t                    return 2;\n\t                }\n\t                else {\n\t                    return 3;\n\t                }\n\t            }\n\t            else if (pool_size === 2) {\n\t                if (score > 0) {\n\t                    return 1;\n\t                }\n\t                else {\n\t                    return 2;\n\t                }\n\t            }\n\t            else {\n\t                return 1;\n\t            }\n\t        }\n\t        else {\n\t            return 0;\n\t        }\n\t    };\n\t    Teammates.prototype.whoDieHoldingTheLine = function () {\n\t        var death_count = this.getHoldTheLineDeathCount();\n\t        if (death_count > 0) {\n\t            return this.sort(function (teammate) {\n\t                return teammate.henchman.htl_death_priority + (!teammate.is_loyal() ? 100 : 0);\n\t            }).slice(-death_count);\n\t        }\n\t        else {\n\t            return new Teammates([]);\n\t        }\n\t    };\n\t    Teammates.prototype.each = function (iterator) {\n\t        this.oa.each(iterator);\n\t    };\n\t    return Teammates;\n\t}());\n\texports.Teammates = Teammates;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ObjectArray = (function () {\n\t    function ObjectArray(elements) {\n\t        this.elements = elements;\n\t    }\n\t    ObjectArray.prototype.first = function () {\n\t        return this.elements.length ? this.elements[0] : undefined;\n\t    };\n\t    ObjectArray.prototype.last = function () {\n\t        return this.elements.length ? this.elements[this.elements.length - 1] : undefined;\n\t    };\n\t    ObjectArray.prototype.length = function () {\n\t        return this.elements.length;\n\t    };\n\t    ObjectArray.prototype.push = function (element) {\n\t        var elements = this.cloneElements();\n\t        elements.push(element);\n\t        return this.factory(elements);\n\t    };\n\t    ObjectArray.prototype.unshift = function (element) {\n\t        var elements = this.cloneElements();\n\t        elements.unshift(element);\n\t        return this.factory(elements);\n\t    };\n\t    ObjectArray.prototype.slice = function (start, end) {\n\t        return this.factory(this.elements.slice(start, end));\n\t    };\n\t    ObjectArray.prototype.sort = function (iterator) {\n\t        var elements = _.sortBy(this.cloneElements(), iterator);\n\t        return this.factory(elements);\n\t    };\n\t    ObjectArray.prototype.filter = function (iterator) {\n\t        var elements = _.filter(this.cloneElements(), iterator);\n\t        return this.factory(elements);\n\t    };\n\t    ObjectArray.prototype.without = function () {\n\t        var values = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            values[_i - 0] = arguments[_i];\n\t        }\n\t        values.unshift.apply(values, this.cloneElements());\n\t        var elements = _.without.apply(_, values);\n\t        return this.factory(elements);\n\t    };\n\t    ObjectArray.prototype.find = function (iterator) {\n\t        return _.find(this.elements, iterator);\n\t    };\n\t    ObjectArray.prototype.map = function (iterator) {\n\t        return _.map(this.elements, iterator);\n\t    };\n\t    ObjectArray.prototype.each = function (iterator) {\n\t        _.each(this.elements, iterator);\n\t    };\n\t    ObjectArray.prototype.cloneElements = function () {\n\t        return this.elements.slice(0);\n\t    };\n\t    ObjectArray.prototype.factory = function (elements) {\n\t        return new ObjectArray(elements);\n\t    };\n\t    return ObjectArray;\n\t}());\n\texports.ObjectArray = ObjectArray;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Normandy_1 = __webpack_require__(18);\n\tvar Teammate_1 = __webpack_require__(8);\n\tvar Teammates_1 = __webpack_require__(19);\n\tvar State_1 = __webpack_require__(17);\n\tvar constants_1 = __webpack_require__(11);\n\tvar Serialisation = (function () {\n\t    function Serialisation(app) {\n\t        this.app = app;\n\t    }\n\t    Serialisation.lpad = function (value, length) {\n\t        if (length === void 0) { length = 2; }\n\t        var value_str = value;\n\t        return value_str.length >= length ? value_str : new Array(length - value_str.length + 1).join(\"0\") + value_str;\n\t    };\n\t    Serialisation.indexesToFlags = function (indexes) {\n\t        return _.reduce(indexes, function (accumulator, index) {\n\t            return accumulator + Math.pow(2, index);\n\t        }, 0);\n\t    };\n\t    Serialisation.flagsToIndexes = function (flags) {\n\t        var indexes = [];\n\t        var index = 0;\n\t        var flag = 1;\n\t        while (flag <= flags) {\n\t            if (flags & flag) {\n\t                indexes.push(index);\n\t            }\n\t            index++;\n\t            flag *= 2;\n\t        }\n\t        return indexes;\n\t    };\n\t    Serialisation.getRoleCount = function () {\n\t        return _.keys(constants_1.TeammateRoles).length / 2;\n\t    };\n\t    Serialisation.prototype.serialise = function (state) {\n\t        var _this = this;\n\t        var elements = [\n\t            Serialisation.lpad(state.stage().id.toString(16), 1),\n\t            this.serialiseNormandy(state.normandy),\n\t            _.map(state.teammates().value(), function (teammate) {\n\t                return _this.serialiseTeammate(teammate);\n\t            }).join(\"\")\n\t        ];\n\t        return elements.join(\"\");\n\t    };\n\t    Serialisation.prototype.deserialise = function (serialised) {\n\t        var _this = this;\n\t        var matches = serialised.match(Serialisation.SerialisedRegex);\n\t        if (matches) {\n\t            var deserialised = new State_1.State(this.app);\n\t            deserialised.stage(this.app.stager.getStage(parseInt(\"0x\" + matches[constants_1.SerialisedElements.StageID], 16)));\n\t            deserialised.normandy = this.deserialiseNormandyElements(matches[constants_1.SerialisedElements.NormandyDelay], matches[constants_1.SerialisedElements.NormandyFlags]);\n\t            deserialised.teammates(new Teammates_1.Teammates(_.map(matches[constants_1.SerialisedElements.Teammates].match(Serialisation.TeammatesRegex), function (serialised_teammate) {\n\t                return _this.deserialiseTeammate(serialised_teammate);\n\t            })));\n\t            return deserialised;\n\t        }\n\t        else {\n\t            throw new Error(\"Serialised data was malformed.\");\n\t        }\n\t    };\n\t    Serialisation.prototype.applySerialisedState = function (state, serialised) {\n\t        var new_state = this.deserialise(serialised);\n\t        state.normandy.delay(new_state.normandy.delay());\n\t        state.normandy.has_armour(new_state.normandy.has_armour());\n\t        state.normandy.has_shielding(new_state.normandy.has_shielding());\n\t        state.normandy.has_thanix_cannon(new_state.normandy.has_thanix_cannon());\n\t        var new_teammates = new_state.teammates();\n\t        state.teammates().each(function (teammate) {\n\t            var new_teammate = new_teammates.findByHenchman(teammate.henchman);\n\t            teammate.is_recruited(new_teammate.is_recruited());\n\t            teammate.is_loyal(new_teammate.is_loyal());\n\t            teammate.is_dead(new_teammate.is_dead());\n\t            teammate.roles.removeAll();\n\t            _.each(new_teammate.roles(), function (role) {\n\t                teammate.addRole(role);\n\t            });\n\t            teammate.death_cause = new_teammate.death_cause;\n\t            teammate.death_stage_id = new_teammate.death_stage_id;\n\t        });\n\t        state.stage(new_state.stage());\n\t    };\n\t    Serialisation.prototype.serialiseTeammate = function (teammate) {\n\t        var role_offset = Serialisation.getRoleCount();\n\t        var roles = teammate.roles().slice(0);\n\t        if (teammate.is_recruited()) {\n\t            roles.push(role_offset + 1);\n\t        }\n\t        if (teammate.is_loyal()) {\n\t            roles.push(role_offset + 2);\n\t        }\n\t        if (teammate.is_dead()) {\n\t            roles.push(role_offset + 3);\n\t        }\n\t        var elements = [\n\t            Serialisation.lpad(teammate.henchman.id.toString(16), 1),\n\t            Serialisation.lpad((teammate.death_cause() === undefined ? 0 : teammate.death_cause() + 1).toString(16), 1),\n\t            Serialisation.lpad((teammate.death_stage_id() || 0).toString(16), 1),\n\t            Serialisation.lpad(Serialisation.indexesToFlags(roles).toString(16), 5)\n\t        ];\n\t        return elements.join(\"\");\n\t    };\n\t    Serialisation.prototype.deserialiseTeammate = function (serialised) {\n\t        var matches = serialised.match(Serialisation.TeammateRegex);\n\t        var henchman_id = parseInt(\"0x\" + matches[constants_1.SerialisedTeammateElements.HenchmanID], 16);\n\t        var death_cause = parseInt(\"0x\" + matches[constants_1.SerialisedTeammateElements.DeathCause], 16);\n\t        var death_stage_id = parseInt(\"0x\" + matches[constants_1.SerialisedTeammateElements.DeathStageID], 16) || undefined;\n\t        var roles = Serialisation.flagsToIndexes(parseInt(\"0x\" + matches[constants_1.SerialisedTeammateElements.Roles], 16));\n\t        var role_offset = Serialisation.getRoleCount();\n\t        var is_recruited = _.indexOf(roles, role_offset + 1) >= 0;\n\t        var is_loyal = _.indexOf(roles, role_offset + 2) >= 0;\n\t        var is_dead = _.indexOf(roles, role_offset + 3) >= 0;\n\t        roles = _.without(roles, role_offset + 1, role_offset + 2, role_offset + 3);\n\t        var deserialised = new Teammate_1.Teammate(this.app.getHenchman(henchman_id), is_recruited, is_loyal, is_dead, roles);\n\t        if (is_dead) {\n\t            deserialised.die(death_stage_id, death_cause - 1);\n\t        }\n\t        return deserialised;\n\t    };\n\t    Serialisation.prototype.serialiseNormandy = function (normandy) {\n\t        var flags = 0 + (normandy.has_armour() ? 1 : 0) + (normandy.has_shielding() ? 2 : 0) + (normandy.has_thanix_cannon() ? 4 : 0);\n\t        var elements = [\n\t            Serialisation.lpad(normandy.delay().toString(10), 2),\n\t            Serialisation.lpad(flags.toString(10), 1)\n\t        ];\n\t        return elements.join(\"\");\n\t    };\n\t    Serialisation.prototype.deserialiseNormandyElements = function (serialised_delay, serialised_flags) {\n\t        var delay = parseInt(serialised_delay, 10);\n\t        var flags = parseInt(serialised_flags, 10);\n\t        var has_armour = !!(flags & 1);\n\t        var has_shielding = !!(flags & 2);\n\t        var has_thanix_cannon = !!(flags & 4);\n\t        return new Normandy_1.Normandy(has_armour, has_shielding, has_thanix_cannon, delay);\n\t    };\n\t    Serialisation.TeammateRegex = /^([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f]{5})$/;\n\t    Serialisation.TeammatesRegex = /[0-9a-f]{8}/g;\n\t    Serialisation.SerialisedRegex = /^([0-9a-f])([\\d]{2})([\\d])((?:[0-9a-f]{2}[0-9a-f][0-9a-f]{5}){12})$/;\n\t    return Serialisation;\n\t}());\n\texports.Serialisation = Serialisation;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar constants_1 = __webpack_require__(11);\n\t(function (Role) {\n\t    Role[Role[\"ApproachSquadmate1\"] = 0] = \"ApproachSquadmate1\";\n\t    Role[Role[\"ApproachSquadmate2\"] = 1] = \"ApproachSquadmate2\";\n\t    Role[Role[\"ApproachShieldsDeath\"] = 2] = \"ApproachShieldsDeath\";\n\t    Role[Role[\"ApproachArmorDeath\"] = 3] = \"ApproachArmorDeath\";\n\t    Role[Role[\"ApproachWeaponDeath\"] = 4] = \"ApproachWeaponDeath\";\n\t    Role[Role[\"VentsSquadmate1\"] = 5] = \"VentsSquadmate1\";\n\t    Role[Role[\"VentsSquadmate2\"] = 6] = \"VentsSquadmate2\";\n\t    Role[Role[\"VentsSpecialist\"] = 7] = \"VentsSpecialist\";\n\t    Role[Role[\"VentsFireteamLeader\"] = 8] = \"VentsFireteamLeader\";\n\t    Role[Role[\"VentsDeath\"] = 9] = \"VentsDeath\";\n\t    Role[Role[\"LongWalkSpecialist\"] = 10] = \"LongWalkSpecialist\";\n\t    Role[Role[\"LongWalkFireteamLeader\"] = 11] = \"LongWalkFireteamLeader\";\n\t    Role[Role[\"LongWalkEscort\"] = 12] = \"LongWalkEscort\";\n\t    Role[Role[\"LongWalkSquadmate1\"] = 13] = \"LongWalkSquadmate1\";\n\t    Role[Role[\"LongWalkSquadmate2\"] = 14] = \"LongWalkSquadmate2\";\n\t    Role[Role[\"LongWalkSquadmateDeath\"] = 15] = \"LongWalkSquadmateDeath\";\n\t    Role[Role[\"LongWalkEscortDeath\"] = 16] = \"LongWalkEscortDeath\";\n\t    Role[Role[\"LongWalkFireteamLeaderDeath\"] = 17] = \"LongWalkFireteamLeaderDeath\";\n\t    Role[Role[\"BossSquadmate1\"] = 18] = \"BossSquadmate1\";\n\t    Role[Role[\"BossSquadmate2\"] = 19] = \"BossSquadmate2\";\n\t    Role[Role[\"BossHoldingTheLine\"] = 20] = \"BossHoldingTheLine\";\n\t    Role[Role[\"BossSquadmateDeath\"] = 21] = \"BossSquadmateDeath\";\n\t    Role[Role[\"BossHoldingTheLineDeath\"] = 22] = \"BossHoldingTheLineDeath\";\n\t})(exports.Role || (exports.Role = {}));\n\tvar Role = exports.Role;\n\tvar Teammate = (function () {\n\t    function Teammate(logic, id, name, is_essential, hold_the_line_baseline_score, hold_the_line_death_priority, armour_death_priority, shield_death_priority, weapon_death_priority, long_walk_death_priority, cutscene_rescue_priority, defence_report_priority, keep_base_priority, destroy_base_priority, is_vent_ideal_candidate, is_bubble_ideal_candidate, is_leader_ideal_candidate, is_super_leader, is_escort_candidate, is_vent_candidate, is_bubble_candidate, is_leader_candidate, upgrade_unlocks_armour, upgrade_unlocks_shields, upgrade_unlocks_weapon) {\n\t        var _this = this;\n\t        this.logic = logic;\n\t        this.id = id;\n\t        this.name = name;\n\t        this.is_essential = is_essential;\n\t        this.hold_the_line_baseline_score = hold_the_line_baseline_score;\n\t        this.hold_the_line_death_priority = hold_the_line_death_priority;\n\t        this.armour_death_priority = armour_death_priority;\n\t        this.shield_death_priority = shield_death_priority;\n\t        this.weapon_death_priority = weapon_death_priority;\n\t        this.long_walk_death_priority = long_walk_death_priority;\n\t        this.cutscene_rescue_priority = cutscene_rescue_priority;\n\t        this.defence_report_priority = defence_report_priority;\n\t        this.keep_base_priority = keep_base_priority;\n\t        this.destroy_base_priority = destroy_base_priority;\n\t        this.is_vent_ideal_candidate = is_vent_ideal_candidate;\n\t        this.is_bubble_ideal_candidate = is_bubble_ideal_candidate;\n\t        this.is_leader_ideal_candidate = is_leader_ideal_candidate;\n\t        this.is_super_leader = is_super_leader;\n\t        this.is_escort_candidate = is_escort_candidate;\n\t        this.is_vent_candidate = is_vent_candidate;\n\t        this.is_bubble_candidate = is_bubble_candidate;\n\t        this.is_leader_candidate = is_leader_candidate;\n\t        this.upgrade_unlocks_armour = upgrade_unlocks_armour;\n\t        this.upgrade_unlocks_shields = upgrade_unlocks_shields;\n\t        this.upgrade_unlocks_weapon = upgrade_unlocks_weapon;\n\t        this.is_recruited = ko.observable(this.is_essential);\n\t        this.is_loyal = ko.observable(false);\n\t        this.is_upgraded = ko.observable(false);\n\t        this.is_recruited.subscribe(function (is_recruited) {\n\t            if (!is_recruited) {\n\t                if (_this.is_essential) {\n\t                    _this.is_recruited(true);\n\t                }\n\t                _this.is_loyal(false);\n\t                _this.is_upgraded(false);\n\t            }\n\t        });\n\t        this.is_loyal.subscribe(function (is_loyal) {\n\t            if (is_loyal) {\n\t                if (!_this.is_recruited()) {\n\t                    _this.is_loyal(false);\n\t                }\n\t            }\n\t            else {\n\t                _this.is_upgraded(false);\n\t            }\n\t        });\n\t        this.is_upgraded.subscribe(function (is_upgraded) {\n\t            if (is_upgraded) {\n\t                if (!_this.is_loyal()) {\n\t                    _this.is_upgraded(false);\n\t                }\n\t            }\n\t        });\n\t        this.is_good_vent_specialist = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_vent_ideal_candidate;\n\t        });\n\t        this.is_good_vent_fireteam_leader = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_leader_ideal_candidate;\n\t        });\n\t        this.is_good_escort = ko.pureComputed(function () {\n\t            return _this.is_loyal();\n\t        });\n\t        this.is_good_long_walk_specialist = ko.pureComputed(function () {\n\t            return _this.is_loyal() && _this.is_bubble_ideal_candidate;\n\t        });\n\t        this.is_good_long_walk_fireteam_leader = ko.pureComputed(function () {\n\t            return _this.is_leader_ideal_candidate && (_this.is_loyal() || _this.is_super_leader);\n\t        });\n\t        this.is_good_boss_squadmate = ko.pureComputed(function () {\n\t            return _this.is_loyal();\n\t        });\n\t        this.hold_the_line_score = ko.pureComputed(function () {\n\t            return _this.hold_the_line_baseline_score + (_this.is_loyal() ? 1 : 0);\n\t        });\n\t        this.roles = ko.observableArray([]);\n\t        this\n\t            .syncRoleToObservable(logic.approach_squadmate_1, Role.ApproachSquadmate1)\n\t            .syncRoleToObservable(logic.approach_squadmate_2, Role.ApproachSquadmate2)\n\t            .syncRoleToObservable(logic.approach_armour_death, Role.ApproachArmorDeath)\n\t            .syncRoleToObservable(logic.approach_shields_death, Role.ApproachShieldsDeath)\n\t            .syncRoleToObservable(logic.approach_weapon_death, Role.ApproachWeaponDeath)\n\t            .syncRoleToObservable(logic.vents_specialist, Role.VentsSpecialist)\n\t            .syncRoleToObservable(logic.vents_fireteam_leader, Role.VentsFireteamLeader)\n\t            .syncRoleToObservable(logic.vents_squadmate_1, Role.VentsSquadmate1)\n\t            .syncRoleToObservable(logic.vents_squadmate_2, Role.VentsSquadmate2)\n\t            .syncRoleToObservable(logic.vents_death, Role.VentsDeath)\n\t            .syncRoleToObservable(logic.long_walk_specialist, Role.LongWalkSpecialist)\n\t            .syncRoleToObservable(logic.long_walk_fireteam_leader, Role.LongWalkFireteamLeader)\n\t            .syncRoleToObservable(logic.long_walk_escort, Role.LongWalkEscort)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_1, Role.LongWalkSquadmate1)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_2, Role.LongWalkSquadmate2)\n\t            .syncRoleToObservable(logic.long_walk_escort_death, Role.LongWalkEscortDeath)\n\t            .syncRoleToObservable(logic.long_walk_squadmate_death, Role.LongWalkSquadmateDeath)\n\t            .syncRoleToObservable(logic.long_walk_fireteam_leader_death, Role.LongWalkFireteamLeaderDeath)\n\t            .syncRoleToObservable(logic.boss_squadmate_1, Role.BossSquadmate1)\n\t            .syncRoleToObservable(logic.boss_squadmate_2, Role.BossSquadmate2)\n\t            .syncRoleToObservableSet(logic.boss_squadmate_deaths, Role.BossSquadmateDeath)\n\t            .syncRoleToObservableSet(logic.boss_hold_the_line_candidates, Role.BossHoldingTheLine)\n\t            .syncRoleToObservableSet(logic.boss_hold_the_line_deaths, Role.BossHoldingTheLineDeath);\n\t        this.survives = ko.pureComputed(function () {\n\t            var candidates = logic.boss_survivors();\n\t            if (candidates) {\n\t                return _.contains(candidates, _this);\n\t            }\n\t        });\n\t        this.armour_death_priority_rank = this.deriveRank(\"armour_death_priority\");\n\t        this.shield_death_priority_rank = this.deriveRank(\"shield_death_priority\");\n\t        this.weapon_death_priority_rank = this.deriveRank(\"weapon_death_priority\");\n\t        this.long_walk_death_priority_rank = this.deriveRank(\"long_walk_death_priority\");\n\t        this.cutscene_rescue_priority_rank = this.deriveRank(\"cutscene_rescue_priority\");\n\t        this.defence_report_priority_rank = this.deriveRank(\"defence_report_priority\");\n\t        this.keep_base_priority_rank = this.deriveRank(\"keep_base_priority\");\n\t        this.destroy_base_priority_rank = this.deriveRank(\"destroy_base_priority\");\n\t        this.hold_the_line_death_priority_rank = this.deriveRank(\"hold_the_line_death_priority\");\n\t    }\n\t    Teammate.prototype.deriveRank = function (field) {\n\t        var _this = this;\n\t        return ko.pureComputed(function () {\n\t            var pool = _this.logic.pool();\n\t            return _this[field] > 0 ? (pool.length - _.indexOf(_.sortBy(pool, field), _this)) : undefined;\n\t        });\n\t    };\n\t    Teammate.prototype.switchRole = function (role, condition) {\n\t        if (!condition) {\n\t            this.roles.remove(role);\n\t        }\n\t        else if (!this.hasRole(role)) {\n\t            this.roles.push(role);\n\t        }\n\t        console.log(\"switch role\", this.name, Role[role], condition, this.roles());\n\t    };\n\t    Teammate.prototype.syncRoleToObservable = function (observable, role) {\n\t        var _this = this;\n\t        observable.subscribe(function (teammate) {\n\t            return _this.switchRole(role, teammate && (teammate.id === _this.id));\n\t        });\n\t        return this;\n\t    };\n\t    Teammate.prototype.syncRoleToObservableSet = function (observable, role) {\n\t        var _this = this;\n\t        observable.subscribe(function (teammates) {\n\t            return _this.switchRole(role, _.contains(teammates, _this));\n\t        });\n\t        return this;\n\t    };\n\t    Teammate.prototype.hasRole = function (role) {\n\t        return this.roles.indexOf(role) > -1;\n\t    };\n\t    return Teammate;\n\t}());\n\texports.Teammate = Teammate;\n\tvar Logic = (function () {\n\t    function Logic(app) {\n\t        var _this = this;\n\t        this.normandy_has_armour = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_armour\").is_upgraded();\n\t            },\n\t            write: function (has_armour) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_armour\").is_upgraded(has_armour);\n\t            }\n\t        });\n\t        this.normandy_has_shields = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_shields\").is_upgraded();\n\t            },\n\t            write: function (has_shields) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_shields\").is_upgraded(has_shields);\n\t            }\n\t        });\n\t        this.normandy_has_weapon = ko.pureComputed({\n\t            read: function () {\n\t                return _.find(_this.pool(), \"upgrade_unlocks_weapon\").is_upgraded();\n\t            },\n\t            write: function (has_weapon) {\n\t                _.find(_this.pool(), \"upgrade_unlocks_weapon\").is_upgraded(has_weapon);\n\t            }\n\t        });\n\t        this.mission_delay = ko.observable(undefined);\n\t        this.pool = ko.observableArray([]);\n\t        this.recruited = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_recruited();\n\t            });\n\t        });\n\t        this.loyal = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_loyal();\n\t            });\n\t        });\n\t        this.upgraded = ko.pureComputed(function () {\n\t            return _.filter(_this.pool(), function (teammate) {\n\t                return teammate.is_upgraded();\n\t            });\n\t        });\n\t        this.all_recruited = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.pool(), function (teammate) {\n\t                    return teammate.is_recruited();\n\t                });\n\t            },\n\t            write: function (all_recruited) {\n\t                _.each(_this.pool(), function (teammate) {\n\t                    teammate.is_recruited(all_recruited);\n\t                });\n\t            }\n\t        });\n\t        this.all_loyal = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.recruited(), function (teammate) {\n\t                    return teammate.is_loyal();\n\t                });\n\t            },\n\t            write: function (all_loyal) {\n\t                _.each(_this.recruited(), function (teammate) {\n\t                    teammate.is_loyal(all_loyal);\n\t                });\n\t            }\n\t        });\n\t        this.all_upgraded = ko.pureComputed({\n\t            read: function () {\n\t                return _.all(_this.loyal(), function (teammate) {\n\t                    return teammate.is_upgraded();\n\t                });\n\t            },\n\t            write: function (all_upgraded) {\n\t                _.each(_this.loyal(), function (teammate) {\n\t                    teammate.is_upgraded(all_upgraded);\n\t                });\n\t            }\n\t        });\n\t        this.approach_squadmate_1 = ko.observable(undefined);\n\t        this.approach_squadmate_2 = ko.observable(undefined);\n\t        this.approach_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.recruited();\n\t            if (candidates.length >= 8) {\n\t                return _.without(candidates, _this.approach_squadmate_2());\n\t            }\n\t        });\n\t        this.approach_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.recruited();\n\t            if (candidates.length >= 8) {\n\t                return _.without(candidates, _this.approach_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.approach_squadmate_1, this.approach_squadmate_pool_1);\n\t        this.bindToPool(this.approach_squadmate_2, this.approach_squadmate_pool_2);\n\t        this.approach_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.approach_squadmate_1() && _this.approach_squadmate_2() && _this.normandy_has_armour() !== undefined && _this.normandy_has_weapon() !== undefined && _this.normandy_has_shields() !== undefined);\n\t        });\n\t        this.approach_shields_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_shields()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2()).filter(\"shield_death_priority\").sortBy(\"shield_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_armour_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_armour()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2(), _this.approach_shields_death()).filter(\"armour_death_priority\").sortBy(\"armour_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_weapon_death = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable() && !_this.normandy_has_weapon()) {\n\t                var candidates = _.chain(_this.recruited()).without(_this.approach_squadmate_1(), _this.approach_squadmate_2(), _this.approach_shields_death(), _this.approach_armour_death()).filter(\"weapon_death_priority\").sortBy(\"weapon_death_priority\").value();\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.approach_survivors = ko.pureComputed(function () {\n\t            if (_this.approach_evaluatable()) {\n\t                return _.without(_this.recruited(), _this.approach_shields_death(), _this.approach_armour_death(), _this.approach_weapon_death());\n\t            }\n\t        });\n\t        this.vents_specialist = ko.observable(undefined);\n\t        this.vents_fireteam_leader = ko.observable(undefined);\n\t        this.vents_squadmate_1 = ko.observable(undefined);\n\t        this.vents_squadmate_2 = ko.observable(undefined);\n\t        this.vents_specialist_pool = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_vent_candidate\"), _this.vents_fireteam_leader(), _this.vents_squadmate_1(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_fireteam_leader_pool = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_leader_candidate\"), _this.vents_specialist(), _this.vents_squadmate_1(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.vents_specialist(), _this.vents_fireteam_leader(), _this.vents_squadmate_2());\n\t            }\n\t        });\n\t        this.vents_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.approach_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.vents_specialist(), _this.vents_fireteam_leader(), _this.vents_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.vents_specialist, this.vents_specialist_pool);\n\t        this.bindToPool(this.vents_fireteam_leader, this.vents_fireteam_leader_pool);\n\t        this.bindToPool(this.vents_squadmate_1, this.vents_squadmate_pool_1);\n\t        this.bindToPool(this.vents_squadmate_2, this.vents_squadmate_pool_2);\n\t        this.vents_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.vents_specialist() && _this.vents_fireteam_leader() && _this.vents_squadmate_1() && _this.vents_squadmate_2());\n\t        });\n\t        this.vents_death = ko.pureComputed(function () {\n\t            if (_this.vents_evaluatable()) {\n\t                var specialist = _this.vents_specialist();\n\t                var leader = _this.vents_fireteam_leader();\n\t                if (!specialist.is_good_vent_specialist() || !leader.is_good_vent_fireteam_leader()) {\n\t                    return specialist;\n\t                }\n\t            }\n\t        });\n\t        this.vents_survivors = ko.pureComputed(function () {\n\t            if (_this.vents_evaluatable()) {\n\t                return _.without(_this.approach_survivors(), _this.vents_death());\n\t            }\n\t        });\n\t        this.long_walk_specialist = ko.observable(undefined);\n\t        this.long_walk_fireteam_leader = ko.observable(undefined);\n\t        this.long_walk_escort = ko.observable(undefined);\n\t        this.long_walk_squadmate_1 = ko.observable(undefined);\n\t        this.long_walk_squadmate_2 = ko.observable(undefined);\n\t        this.long_walk_specialist_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_bubble_candidate\"), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_fireteam_leader_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_leader_candidate\"), _this.long_walk_specialist(), _this.long_walk_escort(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_escort_pool = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(_.filter(candidates, \"is_escort_candidate\"), _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_2());\n\t            }\n\t        });\n\t        this.long_walk_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_specialist(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.long_walk_specialist, this.long_walk_specialist_pool);\n\t        this.bindToPool(this.long_walk_fireteam_leader, this.long_walk_fireteam_leader_pool);\n\t        this.bindToPool(this.long_walk_escort, this.long_walk_escort_pool);\n\t        this.bindToPool(this.long_walk_squadmate_1, this.long_walk_squadmate_pool_1);\n\t        this.bindToPool(this.long_walk_squadmate_2, this.long_walk_squadmate_pool_2);\n\t        this.long_walk_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.long_walk_specialist() && _this.long_walk_fireteam_leader() && _this.long_walk_squadmate_1() && _this.long_walk_squadmate_2());\n\t        });\n\t        this.long_walk_escort_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var escort = _this.long_walk_escort();\n\t                if (escort && !escort.is_good_escort()) {\n\t                    return escort;\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_squadmate_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var specialist = _this.long_walk_specialist();\n\t                var squadmate_1 = _this.long_walk_squadmate_1();\n\t                var squadmate_2 = _this.long_walk_squadmate_2();\n\t                if (!specialist.is_good_long_walk_specialist()) {\n\t                    var candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n\t                    return _.last(candidates);\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_fireteam_leader_death = ko.pureComputed(function () {\n\t            if (_this.long_walk_evaluatable()) {\n\t                var leader = _this.long_walk_fireteam_leader();\n\t                if (!leader.is_good_long_walk_fireteam_leader()) {\n\t                    var long_walk_fireteam_followers = _.without(_this.vents_survivors(), _this.long_walk_fireteam_leader(), _this.long_walk_escort(), _this.long_walk_specialist(), _this.long_walk_squadmate_1(), _this.long_walk_squadmate_2());\n\t                    if (long_walk_fireteam_followers.length === 0 && !!_this.long_walk_squadmate_death()) {\n\t                        return undefined;\n\t                    }\n\t                    return leader;\n\t                }\n\t            }\n\t        });\n\t        this.long_walk_survivors = ko.pureComputed(function () {\n\t            var candidates = _this.vents_survivors();\n\t            if (_this.long_walk_evaluatable()) {\n\t                return _.without(candidates, _this.long_walk_escort_death(), _this.long_walk_squadmate_death(), _this.long_walk_escort_death());\n\t            }\n\t        });\n\t        this.boss_squadmate_1 = ko.observable(undefined);\n\t        this.boss_squadmate_2 = ko.observable(undefined);\n\t        this.boss_squadmate_pool_1 = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_2());\n\t            }\n\t        });\n\t        this.boss_squadmate_pool_2 = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (candidates) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_1());\n\t            }\n\t        });\n\t        this.bindToPool(this.boss_squadmate_1, this.boss_squadmate_pool_1);\n\t        this.bindToPool(this.boss_squadmate_2, this.boss_squadmate_pool_2);\n\t        this.boss_evaluatable = ko.pureComputed(function () {\n\t            return !!(_this.boss_squadmate_1() && _this.boss_squadmate_2());\n\t        });\n\t        this.boss_squadmate_deaths = ko.pureComputed(function () {\n\t            if (_this.boss_evaluatable()) {\n\t                var deaths = [];\n\t                var squadmate_1 = _this.boss_squadmate_1();\n\t                var squadmate_2 = _this.boss_squadmate_2();\n\t                if (!squadmate_1.is_good_boss_squadmate()) {\n\t                    deaths.push(squadmate_1);\n\t                }\n\t                if (!squadmate_2.is_good_boss_squadmate()) {\n\t                    deaths.push(squadmate_2);\n\t                }\n\t                return deaths;\n\t            }\n\t        });\n\t        this.boss_hold_the_line_candidates = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (_this.boss_evaluatable()) {\n\t                return _.without(candidates, _this.long_walk_escort(), _this.boss_squadmate_1(), _this.boss_squadmate_2());\n\t            }\n\t        });\n\t        this.boss_hold_the_line_total = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (candidates) {\n\t                return _.sum(_.map(candidates, function (teammate) { return teammate.hold_the_line_score(); }));\n\t            }\n\t        });\n\t        this.boss_hold_the_line_rating = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            var total = _this.boss_hold_the_line_total();\n\t            if (candidates) {\n\t                if (candidates.length > 0) {\n\t                    return total / candidates.length;\n\t                }\n\t                else {\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t        this.boss_hold_the_line_death_count = ko.pureComputed(function () {\n\t            var rating = _this.boss_hold_the_line_rating();\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (rating !== undefined) {\n\t                if (rating < 2.0) {\n\t                    if (candidates.length >= 5) {\n\t                        if (rating >= 1.5) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating >= 0.5) {\n\t                            return 2;\n\t                        }\n\t                        else {\n\t                            return 3;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 4) {\n\t                        if (rating >= 1.0) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating >= 0.5) {\n\t                            return 2;\n\t                        }\n\t                        else if (rating > 0) {\n\t                            return 3;\n\t                        }\n\t                        else {\n\t                            return 4;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 3) {\n\t                        if (rating >= 1) {\n\t                            return 1;\n\t                        }\n\t                        else if (rating > 0) {\n\t                            return 2;\n\t                        }\n\t                        else {\n\t                            return 3;\n\t                        }\n\t                    }\n\t                    else if (candidates.length === 2) {\n\t                        if (rating > 0) {\n\t                            return 1;\n\t                        }\n\t                        else {\n\t                            return 2;\n\t                        }\n\t                    }\n\t                    else {\n\t                        return 1;\n\t                    }\n\t                }\n\t                else {\n\t                    return 0;\n\t                }\n\t            }\n\t        });\n\t        this.boss_hold_the_line_deaths = ko.pureComputed(function () {\n\t            var death_count = _this.boss_hold_the_line_death_count();\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (death_count !== undefined) {\n\t                if (death_count === 0) {\n\t                    return [];\n\t                }\n\t                else {\n\t                    return _.sortBy(candidates, function (teammate) {\n\t                        return teammate.hold_the_line_death_priority + (!teammate.is_loyal() ? 100 : 0);\n\t                    }).slice(-death_count);\n\t                }\n\t            }\n\t        });\n\t        this.boss_survivors = ko.pureComputed(function () {\n\t            var candidates = _this.long_walk_survivors();\n\t            if (_this.boss_evaluatable()) {\n\t                return _.without.apply(_, [candidates].concat(_this.boss_hold_the_line_deaths(), _this.boss_squadmate_deaths()));\n\t            }\n\t        });\n\t        this.summary_defence_reporter = ko.pureComputed(function () {\n\t            var candidates = _this.boss_hold_the_line_candidates();\n\t            if (candidates) {\n\t                return _.last(_.sortBy(candidates, \"defence_report_priority\"));\n\t            }\n\t        });\n\t        this.summary_advocates_keeping_base = ko.pureComputed(function () {\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (s1 && s2) {\n\t                return _.last(_.sortBy([s1, s2], \"keep_base_priority\"));\n\t            }\n\t        });\n\t        this.summary_advocates_destroying_base = ko.pureComputed(function () {\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (s1 && s2) {\n\t                return _.last(_.sortBy([s1, s2], \"destroy_base_priority\"));\n\t            }\n\t        });\n\t        this.summary_shepard_lives = ko.pureComputed(function () {\n\t            return _this.boss_survivors().length > 2;\n\t        });\n\t        this.summary_catches_shepard = ko.pureComputed(function () {\n\t            var candidates = _this.boss_survivors();\n\t            var s1 = _this.boss_squadmate_1();\n\t            var s2 = _this.boss_squadmate_2();\n\t            if (candidates && candidates.length) {\n\t                candidates = _.sortBy(candidates, function (teammate) {\n\t                    var was_squadmate = teammate === s1 || teammate === s2;\n\t                    return teammate.cutscene_rescue_priority + (was_squadmate ? 100 : 0);\n\t                });\n\t                return _.last(candidates);\n\t            }\n\t        });\n\t        this.pool([\n\t            new Teammate(this, constants_1.HenchmanIDs.Garrus, \"Garrus Vakarian\", true, 3, 5, 0, 8, 11, 10, 3, 11, 8, 0, false, false, true, false, true, true, false, true, false, false, true),\n\t            new Teammate(this, constants_1.HenchmanIDs.Grunt, \"Grunt\", false, 3, 0, 0, 6, 9, 8, 5, 9, 12, 0, false, false, false, false, true, false, false, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Jack, \"Jack\", true, 0, 8, 12, 5, 8, 11, 2, 12, 0, 8, false, true, false, false, true, false, true, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Jacob, \"Jacob Taylor\", true, 1, 6, 0, 0, 0, 6, 8, 8, 0, 10, false, false, true, false, true, true, true, true, true, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Kasumi, \"Kasumi Goto\", false, 0, 9, 0, 12, 0, 3, 10, 4, 0, 9, true, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Legion, \"Legion\", false, 1, 3, 0, 11, 0, 9, 4, 10, 9, 0, true, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Miranda, \"Miranda Lawson\", true, 1, 7, 0, 0, 0, -1, 12, 2, 13, 0, false, false, true, true, false, false, true, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Mordin, \"Mordin Solus\", true, 0, 11, 0, 0, 0, 5, 7, 6, 10, 0, false, false, false, false, true, true, false, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Samara, \"Samara\", false, 1, 4, 0, 4, 7, 7, 6, 7, 0, 12, false, true, false, false, true, false, true, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Tali, \"Tali'zorah\", false, 0, 10, 0, 10, 0, 4, 9, 5, 0, 11, true, false, false, false, true, true, false, true, false, true, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Thane, \"Thane\", false, 1, 2, 0, 9, 12, 12, 1, 13, 0, 13, false, false, false, false, true, true, true, true, false, false, false),\n\t            new Teammate(this, constants_1.HenchmanIDs.Zaeed, \"Zaeed Masani\", false, 3, 1, 0, 7, 10, 2, 11, 3, 11, 0, false, false, false, false, true, false, false, true, false, false, false)\n\t        ]);\n\t        var serialisables = [\n\t            this.approach_squadmate_1,\n\t            this.approach_squadmate_2,\n\t            this.vents_specialist,\n\t            this.vents_fireteam_leader,\n\t            this.vents_squadmate_1,\n\t            this.vents_squadmate_2,\n\t            this.long_walk_specialist,\n\t            this.long_walk_fireteam_leader,\n\t            this.long_walk_escort,\n\t            this.long_walk_squadmate_1,\n\t            this.long_walk_squadmate_2,\n\t            this.boss_squadmate_1,\n\t            this.boss_squadmate_2\n\t        ];\n\t        this.serialised = ko.pureComputed({\n\t            read: function () {\n\t                var serialised = _.map(_this.pool(), function (teammate) {\n\t                    return ((teammate.is_recruited() ? 1 : 0)\n\t                        + (teammate.is_loyal() ? 2 : 0)\n\t                        + (teammate.is_upgraded() ? 4 : 0)).toString(16);\n\t                }).join(\"\");\n\t                serialised += _.map(serialisables, function (observable) {\n\t                    var teammate = observable();\n\t                    return (teammate ? teammate.id : 0).toString(16);\n\t                }).join(\"\");\n\t                return serialised;\n\t            },\n\t            write: function (serialised) {\n\t                var pool = _this.pool();\n\t                for (var i = 0, l = pool.length; i < l; ++i) {\n\t                    var flags = parseInt(serialised[i], 16);\n\t                    pool[i].is_recruited(!!(flags & 1));\n\t                    pool[i].is_loyal(!!(flags & 2));\n\t                    pool[i].is_upgraded(!!(flags & 4));\n\t                }\n\t                _.each(serialisables, function (observable, index) {\n\t                    var id = parseInt(serialised[pool.length + index], 16);\n\t                    if (id > 0) {\n\t                        observable(_.find(pool, function (teammate) {\n\t                            return teammate.id === id;\n\t                        }));\n\t                    }\n\t                    else {\n\t                        observable(undefined);\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    }\n\t    Logic.prototype.bindToPool = function (observable, pool) {\n\t        pool.subscribe(function (candidates) {\n\t            var teammate = observable();\n\t            if (!candidates) {\n\t                observable(undefined);\n\t            }\n\t            else if (teammate && !_.contains(candidates, teammate)) {\n\t                observable(undefined);\n\t            }\n\t        });\n\t    };\n\t    return Logic;\n\t}());\n\texports.Logic = Logic;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"pick-teammate\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            this.target = params.target;\n\t            this.pool = ko.pureComputed(function () {\n\t                var candidates = params.pool();\n\t                if (candidates) {\n\t                    candidates.unshift(undefined);\n\t                }\n\t                return candidates;\n\t            });\n\t            this.label = params.label;\n\t            this.id = params.id;\n\t        },\n\t        template: \"\\n        <div class=\\\"form-group\\\">\\n            <label data-bind=\\\"text: label, attr: {'for': id}\\\"></label>\\n            <select class=\\\"form-control\\\" id=\\\"test\\\" data-bind=\\\"attr: {'id': id}, options: pool, optionsText: function (teammate) { return teammate ? teammate.name : '-- None --'; }, value: target\\\"></select>\\n            </div>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-list\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            var _this = this;\n\t            this.pool = params.pool;\n\t            this.label = params.label;\n\t            this.rendered = ko.pureComputed(function () {\n\t                return _.map(_this.pool(), function (teammate) {\n\t                    return teammate.name;\n\t                }).join(\", \");\n\t            });\n\t        },\n\t        template: \"\\n        <div class=\\\"form-group\\\">\\n            <label data-bind=\\\"text: label\\\"></label>\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" data-bind=\\\"value: rendered\\\" />\\n        </div>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"role-toggle\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t            this.available = ko.pureComputed(function () {\n\t                return _.contains(params.pool(), params.teammate);\n\t            });\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            style: {\\n                visibility: $data.available() ? 'visible' : 'hidden'\\n            },\\n            css: {'text-muted': !$data.teammate.hasRole($data.role)},\\n            click: function () {\\n                if ($data.observable() === teammate) {\\n                    $data.observable(undefined);\\n                } else {\\n                    $data.observable(teammate);\\n                }\\n            }\\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"role-static\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t            this.classes = {};\n\t            this.classes[params.classes] = true;\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            if: $data.teammate.hasRole($data.role),\\n            css: $data.classes\\n            \\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"death-role-static\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <!-- ko component: { name: 'role-static', params: {\\n            teammate: teammate,\\n            role: role,\\n            supertext: supertext,\\n            icon: \\\"alert\\\",\\n            classes: \\\"text-danger\\\"\\n        } } --><!-- /ko -->\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"observable-toggle\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.glyphs = {\n\t                glyphicon: true\n\t            };\n\t            this.glyphs[\"glyphicon-\" + params.icon] = true;\n\t        },\n\t        template: \"\\n        <span data-bind=\\\"\\n            css: {'text-muted': !$data.observable()},\\n            click: function () {\\n                $data.observable(!$data.observable());\\n            }\\\">\\n            <span data-bind=\\\"css: $data.glyphs\\\" class=\\\"glyphicon\\\"></span><sup data-bind=\\\"text: $data.supertext\\\"></sup>\\n        </span>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-name\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\" data-bind=\\\"with: teammate\\\"><span data-bind=\\\"text: name\\\"></span></p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"teammate-row\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t        },\n\t        template: \"\\n        <tr data-bind=\\\"css: {'text-muted': !teammate.is_recruited() }\\\">\\n            <td>\\n                <a href=\\\"#view-profile\\\" data-bind=\\\"click: function () { modal_target(teammate); }\\\">\\n                    <span data-bind=\\\"text: teammate.name\\\"></span>\\n                </a>\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_recruited,\\n                    icon: \\\"ok\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <span data-bind=\\\"if: teammate.is_recruited\\\">\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_loyal,\\n                    icon: \\\"heart\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                </span>\\n            </td>\\n            <td>\\n                <span data-bind=\\\"if: teammate.is_loyal\\\">\\n                <!-- ko component: { name: 'observable-toggle', params: {\\n                    observable: teammate.is_upgraded,\\n                    icon: \\\"circle-arrow-up\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                </span>\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.approach_squadmate_1,\\n                    pool: logic.approach_squadmate_pool_1,\\n                    role: Role.ApproachSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.approach_squadmate_2,\\n                    pool: logic.approach_squadmate_pool_2,\\n                    role: Role.ApproachSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_specialist,\\n                    pool: logic.vents_specialist_pool,\\n                    role: Role.VentsSpecialist,\\n                    icon: \\\"star\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_fireteam_leader,\\n                    pool: logic.vents_fireteam_leader_pool,\\n                    role: Role.VentsFireteamLeader,\\n                    icon: \\\"fire\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_squadmate_1,\\n                    pool: logic.vents_squadmate_pool_1,\\n                    role: Role.VentsSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.vents_squadmate_2,\\n                    pool: logic.vents_squadmate_pool_2,\\n                    role: Role.VentsSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_specialist,\\n                    pool: logic.long_walk_specialist_pool,\\n                    role: Role.LongWalkSpecialist,\\n                    icon: \\\"star\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_fireteam_leader,\\n                    pool: logic.long_walk_fireteam_leader_pool,\\n                    role: Role.LongWalkFireteamLeader,\\n                    icon: \\\"fire\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_escort,\\n                    pool: logic.long_walk_escort_pool,\\n                    role: Role.LongWalkEscort,\\n                    icon: \\\"heart-empty\\\",\\n                    supertext: \\\"\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_squadmate_1,\\n                    pool: logic.long_walk_squadmate_pool_1,\\n                    role: Role.LongWalkSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.long_walk_squadmate_2,\\n                    pool: logic.long_walk_squadmate_pool_2,\\n                    role: Role.LongWalkSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.boss_squadmate_1,\\n                    pool: logic.boss_squadmate_pool_1,\\n                    role: Role.BossSquadmate1,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"1\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-toggle', params: {\\n                    teammate: teammate,\\n                    observable: logic.boss_squadmate_2,\\n                    pool: logic.boss_squadmate_pool_2,\\n                    role: Role.BossSquadmate2,\\n                    icon: \\\"user\\\",\\n                    supertext: \\\"2\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.BossHoldingTheLine,\\n                    supertext: \\\"\\\",\\n                    icon: \\\"flash\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n            <td>\\n                <span data-bind=\\\"\\n                    if: teammate.survives\\n                    \\\">\\n                    <span class=\\\"glyphicon glyphicon-ok-circle text-success\\\"></span>\\n                </span>\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachShieldsDeath,\\n                    supertext: \\\"Shield\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachArmorDeath,\\n                    supertext: \\\"Armour\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.ApproachWeaponDeath,\\n                    supertext: \\\"Weapon\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.VentsDeath,\\n                    supertext: \\\"Vents\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkSquadmateDeath,\\n                    supertext: \\\"LW Squadmate\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkFireteamLeaderDeath,\\n                    supertext: \\\"LW Leader\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.LongWalkEscortDeath,\\n                    supertext: \\\"Escort\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.BossSquadmateDeath,\\n                    supertext: \\\"Boss Squadmate\\\"\\n                } } --><!-- /ko -->\\n                <!-- ko component: { name: 'death-role-static', params: {\\n                    teammate: teammate,\\n                    role: Role.BossHoldingTheLineDeath,\\n                    supertext: \\\"HTL\\\"\\n                } } --><!-- /ko -->\\n            </td>\\n        </tr>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"yes-no\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            _.extend(this, params);\n\t            this.value = ko.observable(ko.unwrap(params.value));\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\" data-bind=\\\"text: value() ? 'Yes' : 'No'\\\"></p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.name = \"priority-rank\";\n\tvoid ((function () {\n\t    ko.components.register(exports.name, {\n\t        viewModel: function (params) {\n\t            this.value = ko.unwrap(params.value);\n\t        },\n\t        template: \"\\n        <p class=\\\"form-control-static\\\">\\n            <span data-bind=\\\"if: value !== undefined\\\">#<span data-bind=\\\"text: value\\\"></span></span>\\n            <span data-bind=\\\"if: value === undefined\\\"><span class=\\\"text-muted\\\">N/A</span></span>\\n        </p>\\n        \"\n\t    });\n\t})());\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar UI = (function () {\n\t    function UI(app) {\n\t        this.app = app;\n\t    }\n\t    UI.prototype.showRankPopover = function (event, field, title) {\n\t        var $target = $(event.target);\n\t        var $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n\t        var candidates = _.chain(this.app.logic.pool()).filter(function (teammate) {\n\t            var observable = teammate[field];\n\t            return !!observable();\n\t        }).sortBy(function (teammate) {\n\t            var observable = teammate[field];\n\t            return observable();\n\t        }).value();\n\t        _.each(candidates, function (teammate) {\n\t            $content.append($(\"<li />\")\n\t                .append(teammate.name));\n\t        });\n\t        $target.popover({\n\t            trigger: \"focus\",\n\t            title: title,\n\t            html: true,\n\t            content: $content\n\t        })\n\t            .on(\"hidden.bs.popover\", function () {\n\t            $target.popover(\"destroy\");\n\t        })\n\t            .popover(\"show\");\n\t    };\n\t    return UI;\n\t}());\n\texports.UI = UI;\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.1.0.0.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/cdn/bundle/assets\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7db060bbfddf2a9faf6f\n **/","/* tslint:disable:no-require-imports */\n\nimport { name as Modal } from \"./Knockout/Bindings/Modal\";\nimport { name as ForcibleComputed } from \"./Knockout/ForcibleComputed\";\nimport { name as PickTeammate } from \"./Knockout/Components/PickTeammate\";\nimport { name as TeammateList } from \"./Knockout/Components/TeammateList\";\nimport { name as RoleToggle } from \"./Knockout/Components/RoleToggle\";\nimport { name as RoleStatic } from \"./Knockout/Components/RoleStatic\";\nimport { name as DeathRoleStatic } from \"./Knockout/Components/DeathRoleStatic\";\nimport { name as ObservableToggle } from \"./Knockout/Components/ObservableToggle\";\nimport { name as TeammateName } from \"./Knockout/Components/TeammateName\";\nimport { name as TeammateRow } from \"./Knockout/Components/TeammateRow\";\nimport { name as YesNo } from \"./Knockout/Components/YesNo\";\nimport { name as PriorityRank } from \"./Knockout/Components/PriorityRank\";\nimport { Application } from \"./App/Application\";\nimport { StageIDs, TeammateRoles } from \"./App/constants\";\nimport * as Constants from \"./App/constants\";\nimport { Role } from \"./App/ME2/Logic\";\n\n// Load the CSS\nrequire(\"../scss/app.scss\");\n\nvoid([\n    Modal,\n    ForcibleComputed,\n    PickTeammate,\n    TeammateList,\n    RoleToggle,\n    RoleStatic,\n    DeathRoleStatic,\n    ObservableToggle,\n    TeammateName,\n    TeammateRow,\n    YesNo,\n    PriorityRank,\n    Constants\n].join(\",\"));\n\n_.extend(window, {\n    Application,\n    Role,\n    Constants: {\n        StageIDs,\n        TeammateRoles\n    }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/app.ts\n **/","export const name: string = \"modal\";\n\nvoid(((): void => {\n    ko.bindingHandlers[name] = {\n        init: (element: HTMLElement, value_accessor: KnockoutObservable<any>, all_bindings_accessor: KnockoutAllBindingsAccessor, data: any, context: any): any => {\n            const $element = $(element);\n\n            $element.modal({\n                show: false\n            });\n\n            ko.utils.domNodeDisposal.addDisposeCallback(element, () => {\n                $element.modal(\"destroy\");\n            });\n        },\n        update: (element: HTMLElement, value_accessor: KnockoutObservable<any>, all_bindings_accessor: KnockoutAllBindingsAccessor, data: any, context: any): void => {\n            const value = value_accessor();\n            const $element = $(element);\n\n            if (value) {\n                $element.modal(\"show\");\n            } else {\n                $element.modal(\"hide\");\n            }\n        }\n    };\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Bindings/Modal.ts\n **/","export const name: string = \"forcibleComputed\";\n\nvoid(((): void => {\n    ko[name] = <T>(func: () => T, context?: any, options?: any): KnockoutForcibleComputed<T> => {\n        const trigger: KnockoutObservable<T> = ko.observable<T>().extend({notify:'always'});\n        const target: KnockoutComputed<T> = ko.computed(function (): T {\n            trigger();\n            return func.call(context);\n        }, null, options);\n\n        target[\"evaluateImmediate\"] = function(): void {\n            trigger.valueHasMutated();\n        };\n\n        return <KnockoutForcibleComputed<T>> target;\n    };\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/ForcibleComputed.ts\n **/","import { Henchman } from \"./ME2/Henchman\";\nimport { Stager } from \"./ME2/Stages/Stager\";\nimport { State } from \"./ME2/State\";\nimport { Serialisation } from \"./ME2/Serialisation\";\nimport { Teammate } from \"./ME2/Teammate\";\nimport { Logic } from \"./ME2/Logic\";\nimport { UI } from \"./ME2/UI\";\nimport { SummaryCrewSurvivalOptions, HenchmanIDs, TeammateDeathCauses, NormandyDelayOptions } from \"./constants\";\n\nexport class Application {\n    public static ideal_symbol = \"✭\";\n    public stager: Stager;\n    public henchman: KnockoutObservable<Henchman>;\n    public share: KnockoutObservable<string>;\n    public state: State;\n    public serialisation: Serialisation;\n    public logic: Logic;\n    public ui: UI;\n    private henchmen: Henchman[];\n\n    public static renderYesNo (value: boolean): string {\n        return value ? \"Yes\" : \"No\";\n    }\n\n    public static renderRank (value: number): string {\n        if (value !== undefined) {\n            return \"#\" + (value + 1);\n        } else {\n            return \"<span class=\\\"text-muted\\\">N/A</span>\";\n        }\n    }\n\n    public static renderTeammateName (teammate: Teammate, highlight: boolean = false): string {\n        if (teammate) {\n            return teammate.henchman.name + (highlight ? \" \" + Application.ideal_symbol : \"\");\n        } else {\n            return \"N/A\";\n        }\n    }\n\n    public static renderTeammateNameVentVenter (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willBeEffectiveVentVenter());\n    }\n\n    public static renderTeammateNameVentLeader (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willBeEffectiveVentLeader());\n    }\n\n    public static renderTeammateNameLongWalkBubbler (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkBubbler());\n    }\n\n    public static renderTeammateNameLongWalkLeader (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkLeader());\n    }\n\n    public static renderTeammateNameLongWalkEscort (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willBeEffectiveLongWalkEscort());\n    }\n\n    public static renderTeammateNameBossSquadmate (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate.willSurviveBeingBossSquadmate());\n    }\n\n    public static renderTeammateNameKeepBaseAdvocate (teammate: Teammate): string {\n        return Application.renderTeammateName(teammate, teammate && teammate.henchman.id === HenchmanIDs.Miranda);\n    }\n\n    public static renderTeammateDeathCause (death_cause: TeammateDeathCauses): string {\n        switch (death_cause) {\n            case TeammateDeathCauses.ArmourFailure:\n                return \"Advanced Armour not acquired\";\n            case TeammateDeathCauses.ShieldingFailure:\n                return \"Advanced Shielding not acquired\";\n            case TeammateDeathCauses.CannonFailure:\n                return \"Thanix Cannon not acquired\";\n            case TeammateDeathCauses.VentsBadLeader:\n                return \"Bad vents leader\"; // Rocket to face\n            case TeammateDeathCauses.VentsBadVenter:\n                return \"Bad vents choice\"; // Rocket to face\n            case TeammateDeathCauses.Escort:\n                return \"Disloyal escort\";\n            case TeammateDeathCauses.LongWalkBadBubbler:\n                return \"Bad long walk bubbler\"; // Eaten by bees\n            case TeammateDeathCauses.LongWalkBadLeader:\n                return \"Bad long walk leader\"; // Gutshot\n            case TeammateDeathCauses.Boss:\n                return \"Disloyal Boss squadmate\";\n            case TeammateDeathCauses.HoldTheLine:\n                return \"Failed to hold the line\";\n            default:\n                return TeammateDeathCauses[death_cause];\n        }\n    }\n\n    public static renderCrewSurvival (crew_survival: SummaryCrewSurvivalOptions): string {\n        switch (crew_survival) {\n            case SummaryCrewSurvivalOptions.AllDied:\n                return \"All Died\";\n            case SummaryCrewSurvivalOptions.HalfSurvived:\n                return \"Half Survived\";\n            case SummaryCrewSurvivalOptions.AllSurvived:\n                return \"All Survived\";\n            default:\n                return SummaryCrewSurvivalOptions[crew_survival];\n        }\n    }\n\n    public static renderHTLScore (score: number): string {\n        switch (score) {\n            case 0:\n                return \"0\";\n            case 1:\n                return \"➊\";\n            case 2:\n                return \"➋\";\n            case 3:\n                return \"➌\";\n            case 4:\n                return \"➍\";\n            default:\n                return score.toString(10);\n        }\n\n    }\n\n    public static showArmourDeathRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Armour Deaths\", henchman, henchman.getHenchmenSortedByArmourDeathPriority());\n    }\n\n    public static showShieldingDeathRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Shielding Deaths\", henchman, henchman.getHenchmenSortedByShieldingDeathPriority());\n    }\n\n    public static showCannonDeathRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Cannon Deaths\", henchman, henchman.getHenchmenSortedByCannonDeathPriority());\n    }\n\n    public static showLongWalkDeathRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Long Walk Deaths\", henchman, henchman.getHenchmenSortedByLongWalkDeathPriority());\n    }\n\n    public static showHTMLDeathRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Hold the line Deaths\", henchman, henchman.getHenchmenSortedByHTLDeathPriority());\n    }\n\n    public static showDefenceReportRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Defence Reports\", henchman, henchman.getHenchmenSortedByDefenceReportPriority());\n    }\n\n    public static showKeepBaseAdvocateRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Keep Base Advocates\", henchman, henchman.getHenchmenSortedByKeepBasePriority());\n    }\n\n    public static showDestroyBaseAdvocateRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Destroy Base Advocates\", henchman, henchman.getHenchmenSortedByDestroyBasePriority());\n    }\n\n    public static showCutsceneRescueRankPopover (henchman: Henchman, event?: Event): void {\n        return Application.showRankPopover($(event.target), \"Catchs Shepard\", henchman, henchman.getHenchmenSortedByCutsceneRescuePriority());\n    }\n\n    public static getDelayCandidates (): number[] {\n        return [\n            NormandyDelayOptions.None,\n            NormandyDelayOptions.Few,\n            NormandyDelayOptions.Many\n        ];\n    }\n\n    public static renderDelayValue (value: NormandyDelayOptions): string {\n        switch (value) {\n            case NormandyDelayOptions.None:\n                return \"None\";\n            case NormandyDelayOptions.Few:\n                return \"1-3\";\n            case NormandyDelayOptions.Many:\n                return \"More than 3\";\n            default:\n                return \"\" + value;\n        }\n    }\n\n    public static showRankPopover ($target: JQuery, title: string, henchman: Henchman, list: Henchman[]): void {\n        const $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n        _.each(list, (list_henchman: Henchman) => {\n            $content.append(\n                $(\"<li />\")\n                .append(list_henchman.name)\n            );\n        });\n\n        $target.popover({\n            trigger: \"focus\",\n            title: title,\n            html: true,\n            content: $content\n        })\n        .on(\"hidden.bs.popover\", () => {\n            $target.popover(\"destroy\");\n        })\n        .popover(\"show\");\n    }\n\n    constructor () {\n        this.henchmen = [\n            //                  ID                     Name                    Ess     HTL     HTLD    AD      SD      CD      LWD     CRP     DRP     KBP         DPB     Tech    Biotic      Leader      SLd     EC      VC      BC      LC\n            new Henchman(this,  HenchmanIDs.Garrus,    \"Garrus Vakarian\",      true,   3,      5,      0,      8,      11,     10,     2,      11,     8,          0,      false,  false,      true,       false,  true,   true,   false,  true),\n            new Henchman(this,  HenchmanIDs.Grunt,     \"Grunt\",                false,  3,      0,      0,      6,      9,      8,      4,      9,      12,         0,      false,  false,      false,      false,  true,   false,  false,  true),\n            new Henchman(this,  HenchmanIDs.Jack,      \"Jack\",                 true,   0,      8,      12,     5,      8,      11,     1,      12,     0,          8,      false,  true,       false,      false,  true,   false,  true,   true),\n            new Henchman(this,  HenchmanIDs.Jacob,     \"Jacob Taylor\",         true,   1,      6,      0,      0,      0,      6,      7,      8,      0,          10,     false,  false,      true,       false,  true,   true,   true,   true),\n            new Henchman(this,  HenchmanIDs.Kasumi,    \"Kasumi Goto\",          false,  0,      9,      0,      12,     0,      3,      9,      4,      0,          9,      true,   false,      false,      false,  true,   true,   false,  true),\n            new Henchman(this,  HenchmanIDs.Legion,    \"Legion\",               false,  1,      3,      0,      11,     0,      9,      3,      10,     9,          0,      true,   false,      false,      false,  true,   true,   false,  true),\n            new Henchman(this,  HenchmanIDs.Miranda,   \"Miranda Lawson\",       true,   1,      7,      0,      0,      0,      -1,     11,     2,      13,         0,      false,  false,      true,       true,   false,  false,  true,   true),\n            new Henchman(this,  HenchmanIDs.Mordin,    \"Mordin Solus\",         true,   0,      11,     0,      0,      0,      5,      6,      6,      10,         0,      false,  false,      false,      false,  true,   true,   false,  true),\n            //new Henchman(this,  HenchmanIDs.Morinth,   \"Morinth\",            false,  1,      4,      0,      4,      7,      0,      5,      7,      0,          0,      false,  false,      false,      false,  true,   false,  true,   true),\n            new Henchman(this,  HenchmanIDs.Samara,    \"Samara\",               false,  1,      4,      0,      4,      7,      7,      5,      7,      0,          12,     false,  true,       false,      false,  true,   false,  true,   true),\n            new Henchman(this,  HenchmanIDs.Tali,      \"Tali'zorah\",           false,  0,      10,     0,      10,     0,      4,      8,      5,      0,          11,     true,   false,      false,      false,  true,   true,   false,  true),\n            new Henchman(this,  HenchmanIDs.Thane,     \"Thane\",                false,  1,      2,      0,      9,      12,     12,     0,      13,     0,          13,     false,  false,      false,      false,  true,   true,   true,   true),\n            new Henchman(this,  HenchmanIDs.Zaeed,     \"Zaeed Masani\",         false,  3,      1,      0,      7,      10,     2,      10,     3,      11,         0,      false,  false,      false,      false,  true,   false,  false,  true)\n        ];\n\n        this.serialisation = new Serialisation(this);\n        this.henchman = ko.observable<Henchman>(undefined);\n        this.state = new State(this);\n        this.share = ko.observable<string>(undefined);\n        this.stager = new Stager(this);\n\n        // If there is a request for a specific state\n        if (window.location.search.length > 2) {\n            this.state.applySerialisedState(window.location.search.substr(1));\n        }\n\n        this.logic = new Logic(this);\n        this.ui = new UI(this);\n    }\n\n    public getHenchmen (): Henchman[] {\n        return this.henchmen;\n    }\n\n    public getHenchman (id: HenchmanIDs): Henchman {\n        return _.find(this.henchmen, (henchman: Henchman): boolean => {\n            return henchman.id === id;\n        });\n    }\n\n    public predictedToBeDead (teammate: Teammate): boolean {\n        if (this.state.stage().is_evaluatable()) {\n            return !!this.state.stage().evaluate().find(teammate);\n        }\n\n        return false;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/Application.ts\n **/","import { HenchmanIDs } from \"../constants\";\nimport { Application } from \"../Application\";\n\nexport class Henchman {\n    public id: HenchmanIDs;\n    public name: string = \"\";\n    public is_essential: boolean;\n    public htl_value: number;\n    public htl_death_priority: number;\n    public armour_death_priority: number;\n    public shielding_death_priority: number;\n    public cannon_death_priority: number;\n    public long_walk_death_priority: number;\n    public cutscene_rescue_priority: number;\n    public defence_report_priority: number;\n    public keep_base_priority: number;\n    public destroy_base_priority: number;\n    public is_tech_expert: boolean;\n    public is_biotic_expert: boolean;\n    public is_leader: boolean;\n    public is_super_leader: boolean;\n    public is_escort_candidate: boolean;\n    public is_vent_candidate: boolean;\n    public is_bubble_candidate: boolean;\n    public is_leader_candidate: boolean;\n    private app: Application;\n\n    constructor (\n        app: Application,\n        id: HenchmanIDs = undefined,\n        name: string = \"\",\n        is_essential: boolean = false,\n        htl_value: number = 0,\n        htl_death_priority: number = 0,\n        armour_death_priority: number = 0,\n        shielding_death_priority: number = 0,\n        cannon_death_priority: number = 0,\n        long_walk_death_priority: number = 0,\n        cutscene_rescue_priority: number = 0,\n        defence_report_priority: number = 0,\n        keep_base_priority: number = 0,\n        destroy_base_priority: number = 0,\n        is_tech_expert: boolean = false,\n        is_biotic_expert: boolean = false,\n        is_leader: boolean = false,\n        is_super_leader: boolean = false,\n        is_escort_candidate: boolean = false,\n        is_vent_candidate: boolean = false,\n        is_bubble_candidate: boolean = false,\n        is_leader_candidate: boolean = false\n    ) {\n        this.app = app;\n        this.id = id;\n        this.name = name;\n        this.is_essential = is_essential;\n        this.htl_value = htl_value;\n        this.htl_death_priority = htl_death_priority;\n        this.armour_death_priority = armour_death_priority;\n        this.shielding_death_priority = shielding_death_priority;\n        this.cannon_death_priority = cannon_death_priority;\n        this.long_walk_death_priority = long_walk_death_priority;\n        this.cutscene_rescue_priority = cutscene_rescue_priority;\n        this.defence_report_priority = defence_report_priority;\n        this.keep_base_priority = keep_base_priority;\n        this.destroy_base_priority = destroy_base_priority;\n        this.is_tech_expert = is_tech_expert;\n        this.is_biotic_expert = is_biotic_expert;\n        this.is_leader = is_leader;\n        this.is_super_leader = is_super_leader;\n        this.is_escort_candidate = is_escort_candidate;\n        this.is_vent_candidate = is_vent_candidate;\n        this.is_bubble_candidate = is_bubble_candidate;\n        this.is_leader_candidate = is_leader_candidate;\n    }\n\n    public getHenchmenSortedByArmourDeathPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"armour_death_priority\");\n    }\n\n    public getHenchmenSortedByShieldingDeathPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"shielding_death_priority\");\n    }\n\n    public getHenchmenSortedByCannonDeathPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"cannon_death_priority\");\n    }\n\n    public getHenchmenSortedByHTLDeathPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"htl_death_priority\");\n    }\n\n    public getHenchmenSortedByLongWalkDeathPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"long_walk_death_priority\");\n    }\n\n    public getHenchmenSortedByCutsceneRescuePriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"cutscene_rescue_priority\");\n    }\n\n    public getHenchmenSortedByDefenceReportPriority (): Henchman[] {\n        return this.getHenchmenSortedBy(\"defence_report_priority\");\n    }\n\n    public getHenchmenSortedByKeepBasePriority (): Henchman[] {\n        return _.filter(this.getHenchmenSortedBy(\"keep_base_priority\"), (henchman: Henchman) => {\n            return henchman.keep_base_priority > 0;\n        });\n    }\n\n    public getHenchmenSortedByDestroyBasePriority (): Henchman[] {\n        return _.filter(this.getHenchmenSortedBy(\"destroy_base_priority\"), (henchman: Henchman) => {\n            return henchman.destroy_base_priority > 0;\n        });\n    }\n\n    public getHTLDeathPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByHTLDeathPriority(), this);\n    }\n\n    public getArmourDeathPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByArmourDeathPriority(), this);\n    }\n\n    public getShieldingDeathPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByShieldingDeathPriority(), this);\n    }\n\n    public getCannonDeathPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByCannonDeathPriority(), this);\n    }\n\n    public getLongWalkDeathPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByLongWalkDeathPriority(), this);\n    }\n\n    public getCutsceneRescuePriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByCutsceneRescuePriority(), this);\n    }\n\n    public getDefenceReportPriorityRank (): number {\n        return _.indexOf<Henchman>(this.getHenchmenSortedByDefenceReportPriority(), this);\n    }\n\n    public getKeepBasePriorityRank (): number {\n        return this.keep_base_priority > 0 ? _.indexOf<Henchman>(this.getHenchmenSortedByKeepBasePriority(), this) : undefined;\n    }\n\n    public getDestroyBasePriorityRank (): number {\n        return this.destroy_base_priority > 0 ? _.indexOf<Henchman>(this.getHenchmenSortedByDestroyBasePriority(), this) : undefined;\n    }\n\n    private getHenchmenSortedBy (field: string): Henchman[] {\n        return _.sortBy<Henchman, number>(this.app.getHenchmen(), (henchman: Henchman): number => {\n            return henchman[field];\n        }).reverse();\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Henchman.ts\n **/","import { Application } from \"../../Application\";\nimport { StageIDs } from \"../../constants\";\nimport { Stage } from \"./Stage\";\nimport { ISerialisationSerialised } from \"../Serialisation\";\nimport { Setup } from \"./Setup\";\nimport { Occulus } from \"./Occulus\";\nimport { Vents } from \"./Vents\";\nimport { LongWalk } from \"./LongWalk\";\nimport { Boss } from \"./Boss\";\nimport { Summary } from \"./Summary\";\n\nexport interface IStager {\n    app: Application;\n}\n\nexport class Stager implements IStager {\n    public app: Application;\n    public can_go_back: KnockoutObservable<boolean>;\n    private stages: Stage[];\n    private freezes: ISerialisationSerialised[];\n    private initial_freeze: ISerialisationSerialised;\n\n    constructor (app: Application) {\n        this.app = app;\n        this.freezes = [];\n\n        this.stages = _.sortBy<Stage, StageIDs>([\n            new Setup(this),\n            new Occulus(this),\n            new Vents(this),\n            new LongWalk(this),\n            new Boss(this),\n            new Summary(this)\n        ], (stage: Stage): StageIDs => {\n            return stage.id;\n        });\n\n        this.app.state.stage.subscribe((stage: Stage) => {\n            stage.setup();\n        });\n\n        this.can_go_back = ko.observable<boolean>(false);\n\n        // Apply the first stage\n        this.app.state.stage(this.getStage(0));\n\n        // Freeze an initial state for resetting\n        this.initial_freeze = this.app.state.serialise();\n    }\n\n    public getStage (id: StageIDs): Stage {\n        return this.stages[id];\n    }\n\n    public reset () {\n        this.app.state.applySerialisedState(this.initial_freeze);\n    }\n\n    public back () {\n        if (this.can_go_back()) {\n            this.app.state.applySerialisedState(this.freezes.pop());\n            this.can_go_back(!!this.freezes.length);\n        }\n    }\n\n    public next () {\n        const current_stage = this.app.state.stage();\n\n        if (current_stage.isEvaluatable()) {\n\n            // Freeze the current state\n            this.freeze();\n\n            current_stage.evaluateAndApply();\n\n            if (current_stage.id < this.stages.length - 1) {\n                this.app.state.stage(this.getStage(current_stage.id + 1));\n            }\n        }\n    }\n\n    private freeze () {\n        this.freezes.push(this.app.state.serialise());\n        this.can_go_back(true);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Stager.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs } from \"../../constants\";\nimport { Teammate } from \"../Teammate\";\nimport { Teammates } from \"../Teammates\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface ISetup {\n    all_recruited: KnockoutComputed<boolean>;\n    all_loyal: KnockoutComputed<boolean>;\n    is_evaluatable: KnockoutComputed<boolean>;\n}\n\nexport class Setup extends Stage implements ISetup {\n    public id: StageIDs = StageIDs.Setup;\n    public label: string = \"Set up\";\n    public all_recruited: KnockoutComputed<boolean>;\n    public all_loyal: KnockoutComputed<boolean>;\n    public is_evaluatable: KnockoutComputed<boolean>;\n\n    constructor (stager: Stager) {\n        super(stager);\n\n        this.all_recruited = ko.pureComputed({\n            read: (): boolean => {\n                return !this.getTeammates().find((teammate: Teammate): boolean => {\n                    return !teammate.is_recruited();\n                });\n            },\n            write: (all_recruited: boolean): void => {\n                this.getTeammates().each((teammate: Teammate) => {\n                    if (all_recruited || !teammate.henchman.is_essential) {\n                        teammate.is_recruited(all_recruited);\n                    }\n                });\n            },\n            owner: this\n        });\n\n        this.all_loyal = ko.pureComputed({\n            read: (): boolean => {\n                return !this.getTeammates().find((teammate: Teammate) => {\n                    return !teammate.is_loyal();\n                });\n            },\n            write: (all_loyal: boolean): void => {\n                if (all_loyal) {\n                    this.getTeammates().each((teammate: Teammate) => {\n                        teammate.is_recruited(true);\n                        teammate.is_loyal(true);\n                    });\n                } else {\n                    this.getTeammates().each((teammate: Teammate) => {\n                        teammate.is_loyal(false);\n                    });\n                }\n            },\n            owner: this\n        });\n\n        this.is_evaluatable = ko.pureComputed<boolean>((): boolean => {\n            const is_evaluatable = _.filter(this.getTeammates().value(), (teammate: Teammate): boolean => {\n                return teammate.is_recruited();\n            }).length >= 8;\n\n            return is_evaluatable;\n        });\n    }\n\n    public evaluate (): TeammateDeathList {\n        return new TeammateDeathList();\n    }\n\n    private getTeammates (): Teammates {\n        return this.stager.app.state.teammates();\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Setup.ts\n **/","import { Teammate } from \"../Teammate\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs } from \"../../constants\";\nimport { ITeammateFieldConfig, TeammateField } from \"../TeammateField\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\nimport { Henchman } from \"../Henchman\";\n\nexport abstract class Stage {\n    public static no_teammate: Teammate = new Teammate(new Henchman(undefined, undefined, \"— None —\"));\n\n    public stager: Stager;\n    public id: StageIDs;\n    public label: string;\n    public is_evaluatable: KnockoutObservable<boolean>;\n    private fields: TeammateField[];\n\n    // Generic filter only requires the teammate be alive\n    public static genericTeammateFieldFilter (teammate: Teammate): boolean {\n        return teammate.is_recruited() && !teammate.is_dead();\n    }\n\n    constructor (stager: Stager) {\n        this.stager = stager;\n    }\n\n    public evaluate (): TeammateDeathList {\n        return new TeammateDeathList();\n    }\n\n    public evaluateAndApply (): void {\n        this.evaluate().apply();\n    }\n\n    // Replaces bootstrapTeammatefields\n    public configureFields (configs: ITeammateFieldConfig[]): void {\n        this.fields = [];\n        this.fields = _.map<ITeammateFieldConfig, TeammateField>(configs, (config: ITeammateFieldConfig): TeammateField => {\n            return new TeammateField(this.stager.app.state, (): TeammateField[] => { return this.fields; }, config);\n        });\n\n        // Force a refresh\n        _.each(this.fields, (field: TeammateField): void => {\n            field.candidates.evaluateImmediate();\n        });\n\n        this.is_evaluatable = ko.forcibleComputed<boolean>(() => {\n            // Return false if there are any teammate fields with 'no teammate' values\n            const fields_missing = !!_.find(this.fields, (field: TeammateField): boolean => {\n                if (field.config.optional) {\n                    return false;\n                }\n\n                const teammate = field.observable();\n\n                return teammate ? (teammate.henchman.id === undefined) : true;\n            });\n\n            return !fields_missing;\n        });\n    }\n\n    public getField (name: string): TeammateField {\n        return _.find<TeammateField>(this.fields, (field: TeammateField): boolean => {\n            return field.config.name === name;\n        });\n    }\n\n    public getFieldObservable (name: string): KnockoutObservable<Teammate> {\n        return this.getField(name).observable;\n    }\n\n    public getFieldCandidates (name: string): KnockoutForcibleComputed<Teammate[]> {\n        return this.getField(name).candidates;\n    }\n\n    public getFieldValue (name: string): Teammate {\n        return this.getFieldObservable(name)();\n    }\n\n    public setup (): void {\n        // Attempt to apply the current values for each field\n        _.each(this.fields, (field: TeammateField): void => {\n\n            // Get teammate with the role this field is attached to\n            const state_teammate = this.stager.app.state.teammates().withRole(field.config.role).first();\n            const selector_teammate = field.observable();\n\n            if (state_teammate) {\n                if (selector_teammate === undefined || selector_teammate.henchman.id !== state_teammate.henchman.id) {\n                    field.observable(state_teammate);\n                }\n            }\n        });\n    }\n\n    public isEvaluatable (): boolean {\n        return this.is_evaluatable();\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Stage.ts\n **/","import { TeammateRoles, TeammateDeathCauses, StageIDs } from \"../constants\";\nimport { Henchman } from \"./Henchman\";\n\nexport class Teammate {\n    public death_cause: KnockoutObservable<TeammateDeathCauses>;\n    public death_stage_id: KnockoutObservable<StageIDs>;\n    public henchman: Henchman;\n    public is_recruited: KnockoutObservable<boolean>;\n    public is_loyal: KnockoutObservable<boolean>;\n    public is_dead: KnockoutObservable<boolean>;\n    public roles: KnockoutObservableArray<TeammateRoles>;\n\n    constructor (henchman: Henchman, is_recruited: boolean = false, is_loyal: boolean = false, is_dead: boolean = false, roles: TeammateRoles[] = []) {\n        this.henchman = henchman;\n        this.is_recruited = ko.observable<boolean>(is_recruited);\n        this.is_loyal = ko.observable<boolean>(is_recruited && is_loyal);\n        this.is_dead = ko.observable<boolean>(is_dead);\n        this.roles = ko.observableArray(roles);\n        this.death_cause = ko.observable<TeammateDeathCauses>(undefined);\n        this.death_stage_id = ko.observable<StageIDs>(undefined);\n\n        // If not recruited, can't be loyal either\n        this.is_recruited.subscribe((is_recruited: boolean) => {\n            if (!is_recruited && this.is_loyal()) {\n                this.is_loyal(false);\n            }\n        });\n    }\n\n    // Only does anything is the Teammate is still alive\n    public addRole (role: TeammateRoles): Teammate {\n        if (!this.hasRole(role)) {\n            if (!this.is_dead()) {\n                this.roles.push(role);\n            }\n        }\n        return this;\n    }\n\n    // Only does anything is the Teammate is still alive\n    public removeRole (role: TeammateRoles): Teammate {\n        if (!this.is_dead()) {\n            this.roles.remove(role);\n        }\n        return this;\n    }\n\n    public hasRole (role: TeammateRoles): boolean {\n        return this.roles.indexOf(role) > -1;\n    }\n\n    public hasAnyOfTheseRoles (...roles: TeammateRoles[]): boolean {\n        return _.some<TeammateRoles>(roles, (role: TeammateRoles): boolean => {\n            return this.hasRole(role);\n        });\n    }\n\n    public hasAllOfTheseRoles (...roles: TeammateRoles[]): boolean {\n        return _.every<TeammateRoles>(roles, (role: TeammateRoles): boolean => {\n            return this.hasRole(role);\n        });\n    }\n\n    public getHoldTheLineScore (): number {\n        return this.henchman.htl_value + (this.is_loyal() ? 1 : 0);\n    }\n\n    public willBeEffectiveLongWalkLeader (): boolean {\n        return this.henchman.is_leader && (this.is_loyal() || this.henchman.is_super_leader); // 'Super leader' (i.e. Miranda) will be effective even if not loyal\n    }\n\n    public willBeEffectiveLongWalkEscort (): boolean {\n        return this.is_loyal();\n    }\n\n    public willBeEffectiveLongWalkBubbler (): boolean {\n        return this.is_loyal() && this.henchman.is_biotic_expert;\n    }\n\n    public willSurviveBeingBossSquadmate (): boolean {\n        return this.is_loyal();\n    }\n\n    public willBeEffectiveVentVenter (): boolean {\n        return this.henchman.is_tech_expert && this.is_loyal();\n    }\n\n    public willBeEffectiveVentLeader (): boolean {\n        return this.henchman.is_leader && this.is_loyal();\n    }\n\n    public die (stage_id: StageIDs, death_cause: TeammateDeathCauses): Teammate {\n        this.death_stage_id(stage_id);\n        this.death_cause(death_cause);\n        this.is_dead(true);\n        return this;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Teammate.ts\n **/","import { Teammate } from \"./Teammate\";\nimport { Teammates } from \"./Teammates\";\nimport { TeammateRoles } from \"../constants\";\nimport { State } from \"./State\";\nimport { Stage } from \"./Stages/Stage\";\n\nexport interface ITeammateFieldFilter {\n    (teammate: Teammate, teammates: Teammates): boolean;\n}\n\nexport interface ITeammateFieldConfig {\n    name: string;\n    filter: ITeammateFieldFilter;\n    optional?: boolean;\n    role?: TeammateRoles;\n}\n\nexport interface ITeammateFieldSiblingGetter {\n    (): TeammateField[];\n}\n\nexport class TeammateField {\n    public config: ITeammateFieldConfig;\n    public observable: KnockoutObservable<Teammate>;\n    public candidates: KnockoutForcibleComputed<Teammate[]>;\n\n    constructor (state: State, siblings: ITeammateFieldSiblingGetter, config: ITeammateFieldConfig) {\n        this.config = config;\n\n        // The observable stores the selected teammate for this field\n        this.observable = ko.observable(undefined);\n\n        // Create the candidates observable that maintains a list of the possible candidates for this field.\n        // Candidates are all teammates who are not filtered out, and who are also not assigned to other sibling fields.\n        this.candidates = ko.forcibleComputed((): Teammate[] => {\n\n            // Candidates are those who fulfill the field's filter, and are not in use elsewhere\n            const candidates: Teammate[] = state.teammates().filter((teammate: Teammate) => {\n                return config.filter(teammate, state.teammates());\n            }).filter((candidate: Teammate): boolean => {\n                return !_.find(siblings(), (other_field: TeammateField): boolean => {\n\n                    // If not looking at self, and alternative has been instantiated\n                    if (other_field.config.name !== config.name && other_field.observable) {\n                        if (other_field.observable() === candidate) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }).value();\n\n            // Add a numpty candidate\n            candidates.unshift(Stage.no_teammate);\n\n            return candidates;\n        });\n\n        // Before the teammate changes, the previous teammate has the associated role removed\n        this.observable.subscribe((teammate: Teammate) => {\n            if (config.role !== undefined && teammate && teammate.henchman.id !== undefined) {\n                teammate.removeRole(config.role);\n            }\n        }, null, \"beforeChange\");\n\n        // After the teammate changes, assign them the role, and re-evaluate the sibling candidates list\n        this.observable.subscribe((teammate: Teammate): void => {\n            if (config.role !== undefined) {\n                teammate.addRole(config.role);\n            }\n\n            _.each(siblings(), (other_field: TeammateField) => {\n                if (other_field.config.name !== config.name) {\n                    other_field.candidates.evaluateImmediate();\n                }\n            });\n        });\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/TeammateField.ts\n **/","import { Teammate } from \"./Teammate\";\nimport { TeammateDeathCauses, StageIDs } from \"../constants\";\n\nexport interface ITeammateDeath {\n    teammate: Teammate;\n    death_cause: TeammateDeathCauses;\n    death_stage_id: StageIDs;\n}\n\nexport class TeammateDeathList {\n    private list: ITeammateDeath[];\n\n    constructor (...list: ITeammateDeath[]) {\n        this.list = list;\n    }\n\n    public apply (): TeammateDeathList {\n        _.each(this.list, (element: ITeammateDeath) => {\n            element.teammate.die(element.death_stage_id, element.death_cause);\n        });\n        return this;\n    }\n\n    public getAll (): ITeammateDeath[] {\n        return this.list;\n    }\n\n    public find (teammate: Teammate): ITeammateDeath {\n        return _.find(this.list, (death: ITeammateDeath): boolean => {\n            return death.teammate.henchman.id === teammate.henchman.id;\n        });\n    }\n\n    public add (death: ITeammateDeath): TeammateDeathList {\n        this.list.push(death);\n        return this;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/TeammateDeathList.ts\n **/","export enum HenchmanIDs {\n    Garrus = 1,\n    Grunt = 2,\n    Jack = 3,\n    Jacob = 4,\n    Kasumi = 5,\n    Legion = 6,\n    Miranda = 7,\n    Mordin = 8,\n    Morinth = 9,\n    Samara = 10,\n    Tali = 11,\n    Thane = 12,\n    Zaeed = 13\n}\n\nexport enum NormandyDelayOptions {\n    None = 0,\n    Few = 1,\n    Many = 2\n}\n\nexport enum SerialisedElements {\n    All = 0,\n    StageID = 1,\n    NormandyDelay = 2,\n    NormandyFlags = 3,\n    Teammates = 4\n}\n\nexport enum SerialisedTeammateElements {\n    All = 0,\n    HenchmanID = 1,\n    DeathCause = 2,\n    DeathStageID = 3,\n    Roles = 4\n}\n\nexport enum TeammateDeathCauses {\n    ArmourFailure,\n    ShieldingFailure,\n    CannonFailure,\n    VentsBadVenter,\n    VentsBadLeader,\n    LongWalkBadBubbler,\n    LongWalkBadLeader,\n    Escort,\n    Boss,\n    HoldTheLine\n}\n\nexport enum TeammateRoles {\n    OcculusSquadmate1 = 0,\n    OcculusSquadmate2 = 1,\n    VentsSquadmate1 = 2,\n    VentsSquadmate2 = 3,\n    VentsVenter = 4,\n    VentsLeader = 5,\n    LongWalkSquadmate1 = 6,\n    LongWalkSquadmate2 = 7,\n    LongWalkEscort = 8,\n    LongWalkBubbler = 9,\n    LongWalkLeader = 10,\n    BossSquadmate1 = 11,\n    BossSquadmate2 = 12,\n    HeldTheLine = 13\n}\n\nexport enum StageIDs {\n    Setup,\n    Occulus,\n    Vents,\n    LongWalk,\n    Boss,\n    Summary\n}\n\nexport enum SummaryCrewSurvivalOptions {\n    AllSurvived,\n    HalfSurvived,\n    AllDied\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/constants.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs, TeammateRoles, TeammateDeathCauses } from \"../../constants\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface IOcculus {\n}\n\nexport class Occulus extends Stage implements IOcculus {\n    public id: StageIDs = StageIDs.Occulus;\n    public label: string = \"Occulus\";\n\n    constructor (stager: Stager) {\n        super(stager);\n        //this.bootstrapTeammateFields();\n        this.configureFields([\n            {\n                name: \"occulus_squadmate_1\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.OcculusSquadmate1\n            },\n            {\n                name: \"occulus_squadmate_2\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.OcculusSquadmate2\n            }\n        ]);\n    }\n\n    public evaluate (): TeammateDeathList {\n        const death_list = new TeammateDeathList;\n\n        // Get candidates to die (that is, they were not Occulus Squadmates)\n        const dpt = this.stager.app.state.teammates().whoAreRecruited().withoutAnyOfTheseRoles(TeammateRoles.OcculusSquadmate1, TeammateRoles.OcculusSquadmate2);\n\n        // Apply deaths\n        if (!this.stager.app.state.normandy.has_shielding()) {\n            death_list.add({\n                teammate: dpt.whoAreAlive().sortByShieldingDeathPriority().last(),\n                death_cause: TeammateDeathCauses.ShieldingFailure,\n                death_stage_id: this.id\n            });\n\n            //dpt.whoAreAlive().sortByShieldingDeathPriority().last().die(this.id, TeammateDeathCauses.ShieldingFailure);\n        }\n\n        if (!this.stager.app.state.normandy.has_armour()) {\n            //dpt.whoAreAlive().sortByArmourDeathPriority().last().die(this.id, TeammateDeathCauses.ArmourFailure);\n            death_list.add({\n                teammate: dpt.whoAreAlive().sortByArmourDeathPriority().last(),\n                death_cause: TeammateDeathCauses.ArmourFailure,\n                death_stage_id: this.id\n            });\n        }\n\n        if (!this.stager.app.state.normandy.has_thanix_cannon()) {\n            //dpt.whoAreAlive().sortByCannonDeathPriority().last().die(this.id, TeammateDeathCauses.CannonFailure);\n            death_list.add({\n                teammate: dpt.whoAreAlive().sortByCannonDeathPriority().last(),\n                death_cause: TeammateDeathCauses.CannonFailure,\n                death_stage_id: this.id\n            });\n        }\n\n        return death_list;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Occulus.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs, TeammateRoles, TeammateDeathCauses } from \"../../constants\";\nimport { Teammate } from \"../Teammate\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface IVents {\n}\n\nexport class Vents extends Stage implements IVents {\n    public id: StageIDs = StageIDs.Vents;\n    public label: string = \"Vents\";\n\n    constructor (stager: Stager) {\n        super(stager);\n        //this.bootstrapTeammateFields();\n        this.configureFields([\n            {\n                name: \"vent_squadmate_1\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.VentsSquadmate1\n            },\n            {\n                name: \"vent_squadmate_2\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.VentsSquadmate2\n            },\n            {\n                name: \"vent_venter\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_vent_candidate;\n                },\n                role: TeammateRoles.VentsVenter\n            },\n            {\n                name: \"vent_leader\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_leader_candidate;\n                },\n                role: TeammateRoles.VentsLeader\n            }\n        ]);\n    }\n\n    public evaluate (): TeammateDeathList {\n        const death_list = new TeammateDeathList();\n\n        const venter = this.getFieldValue(\"vent_venter\");\n        const leader = this.getFieldValue(\"vent_leader\");\n\n        if (!venter.willBeEffectiveVentVenter()) {\n            //venter.die(this.id, TeammateDeathCauses.VentsBadVenter);\n            death_list.add({\n                teammate: venter,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.VentsBadVenter\n            });\n        } else if (!leader.willBeEffectiveVentLeader()) {\n            //venter.die(this.id, TeammateDeathCauses.VentsBadLeader);\n            death_list.add({\n                teammate: venter,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.VentsBadLeader\n            });\n        }\n\n        return death_list;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Vents.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs, TeammateRoles, TeammateDeathCauses } from \"../../constants\";\nimport { Teammate } from \"../Teammate\";\nimport { Teammates } from \"../Teammates\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface ILongWalk {}\n\nexport class LongWalk extends Stage implements ILongWalk {\n    public id: StageIDs = StageIDs.LongWalk;\n    public label: string = \"Long Walk\";\n\n    constructor (stager: Stager) {\n        super(stager);\n        this.configureFields([\n            {\n                name: \"long_walk_bubbler\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_bubble_candidate;\n                },\n                role: TeammateRoles.LongWalkBubbler\n            },\n            {\n                name: \"long_walk_leader\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_leader_candidate;\n                },\n                role: TeammateRoles.LongWalkLeader\n            },\n            {\n                name: \"long_walk_escort\",\n                filter: (teammate: Teammate, teammates: Teammates): boolean => {\n\n                    // If there are only 4 living teammates, no one can be escort\n                    if (teammates.whoAreAlive().length() <= 4) {\n                        return false;\n                    }\n\n                    return teammate.is_recruited() && !teammate.is_dead() && teammate.henchman.is_escort_candidate;\n                },\n                optional: true,\n                role: TeammateRoles.LongWalkEscort\n            },\n            {\n                name: \"long_walk_squadmate_1\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.LongWalkSquadmate1\n            },\n            {\n                name: \"long_walk_squadmate_2\",\n                filter: Stage.genericTeammateFieldFilter,\n                role: TeammateRoles.LongWalkSquadmate2\n            }\n        ]);\n    }\n\n    public evaluate (): TeammateDeathList {\n        const death_list = new TeammateDeathList();\n        const escort = this.getFieldValue(\"long_walk_escort\");\n        const bubbler = this.getFieldValue(\"long_walk_bubbler\");\n        const leader = this.getFieldValue(\"long_walk_leader\");\n\n        // If escort is not loyal, they will die\n        if (escort.henchman.id !== undefined && !escort.willBeEffectiveLongWalkEscort()) {\n            //escort.die(this.id, TeammateDeathCauses.Escort);\n            death_list.add({\n                teammate: escort,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.Escort\n            });\n        }\n\n        // If bubbler is not an expert, or is not loyal, one of the squadmates dies\n        if (!bubbler.willBeEffectiveLongWalkBubbler()) {\n            //this.stager.app.state.teammates().withAnyOfTheseRoles(TeammateRoles.LongWalkSquadmate1, TeammateRoles.LongWalkSquadmate2).sortByLongWalkDeathPriority().last().die(this.id, TeammateDeathCauses.LongWalkBadBubbler);\n            death_list.add({\n                teammate: this.stager.app.state.teammates().withAnyOfTheseRoles(TeammateRoles.LongWalkSquadmate1, TeammateRoles.LongWalkSquadmate2).sortByLongWalkDeathPriority().last(),\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.LongWalkBadBubbler\n            });\n        }\n\n        // If leader is not loyal and not\n        if (!leader.willBeEffectiveLongWalkLeader()) {\n            //leader.die(this.id, TeammateDeathCauses.LongWalkBadLeader);\n            death_list.add({\n                teammate: leader,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.LongWalkBadLeader\n            });\n        }\n\n        return death_list;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/LongWalk.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs, TeammateRoles, TeammateDeathCauses } from \"../../constants\";\nimport { Teammate } from \"../Teammate\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface IBoss {\n}\n\nexport class Boss extends Stage implements IBoss {\n    public id: StageIDs = StageIDs.Boss;\n    public label: string = \"Boss\";\n\n    constructor (stager: Stager) {\n        super(stager);\n        this.configureFields([\n            {\n                name: \"boss_squadmate_1\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && !teammate.hasRole(TeammateRoles.LongWalkEscort);\n                },\n                role: TeammateRoles.BossSquadmate1\n            },\n            {\n                name: \"boss_squadmate_2\",\n                filter: (teammate: Teammate): boolean => {\n                    return teammate.is_recruited() && !teammate.is_dead() && !teammate.hasRole(TeammateRoles.LongWalkEscort);\n                },\n                role: TeammateRoles.BossSquadmate2\n            }\n        ]);\n\n        this.getFieldObservable(\"boss_squadmate_1\").subscribe(() => {\n            this.updateHTLRoles();\n        });\n\n        this.getFieldObservable(\"boss_squadmate_2\").subscribe(() => {\n            this.updateHTLRoles();\n        });\n    }\n\n    public evaluate (): TeammateDeathList {\n        const death_list = new TeammateDeathList();\n        const squadmate_1 = this.getFieldValue(\"boss_squadmate_1\");\n        const squadmate_2 = this.getFieldValue(\"boss_squadmate_2\");\n\n        // The two squadmates survive if loyal\n        if (!squadmate_1.willSurviveBeingBossSquadmate()) {\n            //squadmate_1.die(this.id, TeammateDeathCauses.Boss);\n            death_list.add({\n                teammate: squadmate_1,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.Boss\n            });\n        }\n        if (!squadmate_2.willSurviveBeingBossSquadmate()) {\n            //squadmate_2.die(this.id, TeammateDeathCauses.Boss);\n            death_list.add({\n                teammate: squadmate_2,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.Boss\n            });\n        }\n\n        //this.stager.app.state.teammates().withRole(TeammateRoles.HeldTheLine).whoDieHoldingTheLine().die(this.id, TeammateDeathCauses.HoldTheLine);\n        this.stager.app.state.teammates().withRole(TeammateRoles.HeldTheLine).whoDieHoldingTheLine().each((teammate: Teammate) => {\n            death_list.add({\n                teammate: teammate,\n                death_stage_id: this.id,\n                death_cause: TeammateDeathCauses.HoldTheLine\n            });\n        });\n\n        return death_list;\n    }\n\n    private updateHTLRoles () {\n        const squadmates = this.stager.app.state.teammates().withAnyOfTheseRoles(TeammateRoles.BossSquadmate1, TeammateRoles.BossSquadmate2);\n        const candidates = this.stager.app.state.teammates().whoAreAlive().whoAreRecruited();\n\n        // If both Squadmates have been picked\n        squadmates.removeRole(TeammateRoles.HeldTheLine);\n        if (squadmates.length() === 2) {\n            candidates.removeRole(TeammateRoles.HeldTheLine).withoutAnyOfTheseRoles(TeammateRoles.BossSquadmate1, TeammateRoles.BossSquadmate2, TeammateRoles.LongWalkEscort).addRole(TeammateRoles.HeldTheLine);\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Boss.ts\n **/","import { Stage } from \"./Stage\";\nimport { Stager } from \"./Stager\";\nimport { StageIDs, TeammateRoles, SummaryCrewSurvivalOptions, NormandyDelayOptions } from \"../../constants\";\nimport { Teammate } from \"../Teammate\";\nimport { Teammates } from \"../Teammates\";\nimport { TeammateDeathList } from \"../TeammateDeathList\";\n\nexport interface ISummary {\n    shepard_lives: KnockoutObservable<boolean>;\n    shepard_pulled_up_by: KnockoutObservable<Teammate>;\n    defence_reporter: KnockoutObservable<Teammate>;\n    keep_base_advocate: KnockoutObservable<Teammate>;\n    destroy_base_advocate: KnockoutObservable<Teammate>;\n}\n\nexport class Summary extends Stage implements ISummary {\n    public id: StageIDs = StageIDs.Summary;\n    public label: string = \"Summary\";\n    public shepard_lives: KnockoutObservable<boolean>;\n    public shepard_pulled_up_by: KnockoutObservable<Teammate>;\n    public defence_reporter: KnockoutObservable<Teammate>;\n    public keep_base_advocate: KnockoutObservable<Teammate>;\n    public destroy_base_advocate: KnockoutObservable<Teammate>;\n    public crew_survival: KnockoutObservable<SummaryCrewSurvivalOptions>;\n    public htl_total: KnockoutObservable<number>;\n    public htl_score: KnockoutObservable<string>;\n    public htl_candidates_count: KnockoutObservable<number>;\n    public htl_death_count: KnockoutObservable<number>;\n\n    constructor (stager: Stager) {\n        super(stager);\n        this.shepard_lives = ko.observable(undefined);\n        this.shepard_pulled_up_by = ko.observable(undefined);\n        this.defence_reporter = ko.observable(undefined);\n        this.keep_base_advocate = ko.observable(undefined);\n        this.destroy_base_advocate = ko.observable(undefined);\n        this.crew_survival = ko.observable(undefined);\n        this.is_evaluatable = ko.observable(false);\n        this.htl_total = ko.observable<number>(undefined);\n        this.htl_score = ko.observable<string>(undefined);\n        this.htl_candidates_count = ko.observable<number>(undefined);\n        this.htl_death_count = ko.observable<number>(undefined);\n    }\n\n    public evaluate (): TeammateDeathList {\n        return new TeammateDeathList();\n    }\n\n    public setup (): void {\n        const htl_teammates = this.stager.app.state.teammates().withRole(TeammateRoles.HeldTheLine);\n\n        this.defence_reporter(this.getDefenceReporter());\n        this.shepard_lives(this.getShepardLives());\n        this.shepard_pulled_up_by(this.getShepardCatcher());\n        this.keep_base_advocate(this.getKeepBaseAdvocate());\n        this.destroy_base_advocate(this.getDestroyBaseAdvocate());\n        this.crew_survival(this.getCrewSurvival());\n\n        this.htl_total(htl_teammates.getHoldTheLineTotal());\n        this.htl_score(htl_teammates.getHoldTheLineScore().toFixed(2));\n        this.htl_candidates_count(htl_teammates.length());\n        this.htl_death_count(htl_teammates.getHoldTheLineDeathCount());\n    }\n\n    private getLivingTeammates (): Teammates {\n        return this.stager.app.state.teammates().whoAreAlive().whoAreRecruited();\n    }\n\n    private getShepardLives (): boolean {\n        return this.getLivingTeammates().length() > 1;\n    }\n\n    private getShepardCatcher (): Teammate {\n        const candidates = this.getLivingTeammates().sort((teammate: Teammate): number => {\n            let score = teammate.henchman.cutscene_rescue_priority + (teammate.hasAnyOfTheseRoles(TeammateRoles.BossSquadmate1, TeammateRoles.BossSquadmate2) ? 100 : 0);\n            return score;\n        });\n\n        return candidates.length() > 1 ? candidates.last() : undefined;\n    }\n\n    private getDefenceReporter (): Teammate {\n        return this.stager.app.state.teammates().withRole(TeammateRoles.HeldTheLine).sortByDefenceReportPriority().last();\n    }\n\n    private getKeepBaseAdvocate (): Teammate {\n        return this.stager.app.state.teammates().withAnyOfTheseRoles(TeammateRoles.BossSquadmate1, TeammateRoles.BossSquadmate2).whoAdvocateKeepingTheBase().sortByKeepBasePriority().last();\n    }\n\n    private getDestroyBaseAdvocate (): Teammate {\n        return this.stager.app.state.teammates().withAnyOfTheseRoles(TeammateRoles.BossSquadmate1, TeammateRoles.BossSquadmate2).whoAdvocateDestroyingTheBase().sortByDestroyBasePriority().last();\n    }\n\n    private getCrewSurvival (): SummaryCrewSurvivalOptions {\n\n        // If no escort, they die regardless\n        if (this.stager.app.state.teammates().withRole(TeammateRoles.LongWalkEscort).length() === 0) {\n            return SummaryCrewSurvivalOptions.AllDied;\n        }\n\n        if (this.stager.app.state.normandy.delay() === NormandyDelayOptions.None) {\n            return SummaryCrewSurvivalOptions.AllSurvived;\n        } else if (this.stager.app.state.normandy.delay() === NormandyDelayOptions.Few) {\n            return SummaryCrewSurvivalOptions.HalfSurvived;\n        } else {\n            return SummaryCrewSurvivalOptions.AllDied;\n        }\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Stages/Summary.ts\n **/","import { ISerialisationSerialised } from \"./Serialisation\";\nimport { Normandy } from \"./Normandy\";\nimport { Application } from \"../Application\";\nimport { Henchman } from \"./Henchman\";\nimport { Teammates } from \"./Teammates\";\nimport { Teammate } from \"./Teammate\";\nimport { Stage } from \"./Stages/Stage\";\n\nexport class State {\n    public teammates: KnockoutObservable<Teammates>;\n    public normandy: Normandy;\n    public stage: KnockoutObservable<Stage>;\n    public app: Application;\n    public serialised: KnockoutForcibleComputed<ISerialisationSerialised>;\n    private _teammates: Teammates;\n\n    constructor (app: Application) {\n        this.app = app;\n        this.normandy = new Normandy(true, true, true);\n        this.stage = ko.observable(undefined);\n        this.bootstrapTeammates();\n\n        this.serialised = ko.forcibleComputed<ISerialisationSerialised>(() => {\n            if (this.stage()) {\n                return this.serialise();\n            } else {\n                return \"\";\n            }\n        });\n    }\n\n    public serialise (): ISerialisationSerialised {\n        return this.app.serialisation.serialise(this);\n    }\n\n    public applySerialisedState (serialised: ISerialisationSerialised): void {\n        this.app.serialisation.applySerialisedState(this, serialised);\n    }\n\n    private bootstrapTeammates (): void {\n        this._teammates = new Teammates(_.chain<Henchman>(this.app.getHenchmen()).map<Teammate>((henchman: Henchman): Teammate => {\n            return new Teammate(henchman, henchman.is_essential, false, false);\n        }).sortBy((teammate: Teammate) => {\n            return teammate.henchman.name;\n        }).value());\n\n        this.teammates = ko.observable<Teammates>(this._teammates);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/State.ts\n **/","import { NormandyDelayOptions } from \"../constants\";\n\nexport class Normandy {\n    public has_armour: KnockoutObservable<boolean>;\n    public has_shielding: KnockoutObservable<boolean>;\n    public has_thanix_cannon: KnockoutObservable<boolean>;\n    public delay: KnockoutComputed<number>;\n    private _delay: KnockoutObservable<NormandyDelayOptions>;\n\n    constructor (\n        has_armor: boolean = false,\n        has_shielding: boolean = false,\n        has_thanix_cannon: boolean = false,\n        delay: number = 0\n    ) {\n        this.has_armour = ko.observable<boolean>(has_armor);\n        this.has_shielding = ko.observable<boolean>(has_shielding);\n        this.has_thanix_cannon = ko.observable<boolean>(has_thanix_cannon);\n        this._delay = ko.observable<number>(delay);\n\n        this.delay = ko.pureComputed<number>({\n            read: (): number => {\n                return this._delay();\n            },\n            write: (value: number): void => {\n                const delay = parseInt(\"\" + value, 10);\n\n                if (!_.isNaN(delay) && delay >= NormandyDelayOptions.None && delay <= NormandyDelayOptions.Many) {\n                    this._delay(delay);\n                }\n            }\n        });\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Normandy.ts\n **/","import { Teammate } from \"./Teammate\";\nimport { ObjectArray, IObjectArrayIterator } from \"../../Utilities/ObjectArray\";\nimport { Henchman } from \"./Henchman\";\nimport { TeammateRoles, TeammateDeathCauses, StageIDs, HenchmanIDs } from \"../constants\";\n\nexport class Teammates {\n\n    public oa: ObjectArray<Teammate>;\n\n    constructor (elements: Teammate[]) {\n        this.oa = new ObjectArray<Teammate>(elements);\n    }\n\n    public static fromObjectArray (oa: ObjectArray<Teammate>): Teammates {\n        return new Teammates(oa.elements);\n    }\n\n    public value (): Teammate[] {\n        return this.oa.elements;\n    }\n\n    public first (): Teammate {\n        return this.oa.first();\n    }\n\n    public last (): Teammate {\n        return this.oa.last();\n    }\n\n    public length (): number {\n        return this.oa.length();\n    }\n\n    public whoAreAlive (): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return !teammate.is_dead();\n        });\n    }\n\n    public die (stage_id: StageIDs, death_cause: TeammateDeathCauses): Teammates {\n        this.each((teammate: Teammate): void => {\n            teammate.die(stage_id, death_cause);\n        });\n        return this;\n    }\n\n    public whoAreRecruited (): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return teammate.is_recruited();\n        });\n    }\n\n    public addRole (role: TeammateRoles): Teammates {\n        this.each((teammate: Teammate): void => {\n            teammate.addRole(role);\n        });\n        return this;\n    }\n\n    public removeRole (role: TeammateRoles): Teammates {\n        this.each((teammate: Teammate): void => {\n            teammate.removeRole(role);\n        });\n        return this;\n    }\n\n    public withRole (role: TeammateRoles): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return teammate.hasRole(role);\n        });\n    }\n\n    public withAnyOfTheseRoles (...roles: TeammateRoles[]): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return teammate.hasAnyOfTheseRoles.apply(teammate, roles);\n        });\n    }\n\n    public withoutRole (role: TeammateRoles): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return !teammate.hasRole(role);\n        });\n    }\n\n    public withoutAnyOfTheseRoles (...roles: TeammateRoles[]): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return !teammate.hasAnyOfTheseRoles.apply(teammate, roles);\n        });\n    }\n\n    public sortByHenchmanProperty (property: string, ascending: boolean = true): Teammates {\n        return this.sort<number>((teammate: Teammate): number => {\n            return (ascending ? 1 : -1) * teammate.henchman[property];\n        });\n    }\n\n    public sortByShieldingDeathPriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"shielding_death_priority\", ascending);\n    }\n\n    public sortByArmourDeathPriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"armour_death_priority\", ascending);\n    }\n\n    public sortByCannonDeathPriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"cannon_death_priority\", ascending);\n    }\n\n    public sortByLongWalkDeathPriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"long_walk_death_priority\", ascending);\n    }\n\n    public sortByDefenceReportPriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"defence_report_priority\", ascending);\n    }\n\n    public sortByKeepBasePriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"keep_base_priority\", ascending);\n    }\n\n    public sortByDestroyBasePriority (ascending: boolean = true): Teammates {\n        return this.sortByHenchmanProperty(\"destroy_base_priority\", ascending);\n    }\n\n    public sortByIsRecruited (ascending: boolean = true): Teammates {\n        return this.sort<number>((teammate: Teammate): number => {\n            return teammate.is_recruited() ? 0 : 1;\n        });\n    }\n\n    public whoAdvocateKeepingTheBase (): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return teammate.henchman.keep_base_priority > 0;\n        });\n    }\n\n    public whoAdvocateDestroyingTheBase (): Teammates {\n        return this.filter((teammate: Teammate): boolean => {\n            return teammate.henchman.destroy_base_priority > 0;\n        });\n    }\n\n    public without (...teammates: Teammate[]): Teammates {\n        return Teammates.fromObjectArray(this.oa.without.apply(this.oa, teammates));\n    }\n\n    public filter (iterator: IObjectArrayIterator<Teammate, boolean>): Teammates {\n        return Teammates.fromObjectArray(this.oa.filter(iterator));\n    }\n\n    public map<TResult> (iterator: IObjectArrayIterator<Teammate, TResult>): TResult[] {\n        return this.oa.map(iterator);\n    }\n\n    public find (iterator: IObjectArrayIterator<Teammate, boolean>): Teammate {\n        return this.oa.find(iterator);\n    }\n\n    public findByHenchman (henchman: Henchman): Teammate {\n        return this.findByHenchmanID(henchman.id);\n    }\n\n    public findByHenchmanID (id: HenchmanIDs): Teammate {\n        return this.find((teammate: Teammate): boolean => {\n            return teammate.henchman.id === id;\n        });\n    }\n\n    public sort<TSort> (iterator: IObjectArrayIterator<Teammate, TSort>): Teammates {\n        return Teammates.fromObjectArray(this.oa.sort<TSort>(iterator));\n    }\n\n    public slice (start: number, end?: number): Teammates {\n        return Teammates.fromObjectArray(this.oa.slice(start, end));\n    }\n\n    public getHoldTheLineTotal (): number {\n        const scores: number[] = _.map(this.oa.elements, (teammate: Teammate): number => {\n            return teammate.getHoldTheLineScore();\n        });\n\n        return _.reduce(scores, (sum: number, score: number): number => {\n            return sum + score;\n        }, 0);\n    }\n\n    public getHoldTheLineScore (): number {\n        return this.getHoldTheLineTotal() / this.length();\n    }\n\n    public getHoldTheLineDeathCount (): number {\n        const pool_size = this.length();\n        const score = this.getHoldTheLineScore();\n\n        if (score < 2.0) {\n            if (pool_size >= 5) {\n                if (score >= 1.5) {\n                    return 1;\n                } else if (score >= 0.5) {\n                    return 2;\n                } else {\n                    return 3;\n                }\n            } else if (pool_size === 4) {\n                if (score >= 1.0) {\n                    return 1;\n                } else if (score >= 0.5) {\n                    return 2;\n                } else if (score > 0) {\n                    return 3;\n                } else {\n                    return 4;\n                }\n            } else if (pool_size === 3) {\n                if (score >= 1) {\n                    return 1;\n                } else if (score > 0) {\n                    return 2;\n                } else {\n                    return 3;\n                }\n            } else if (pool_size === 2) {\n                if (score > 0) {\n                    return 1;\n                } else {\n                    return 2;\n                }\n            } else {\n                return 1;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    public whoDieHoldingTheLine (): Teammates {\n        const death_count = this.getHoldTheLineDeathCount();\n\n        if (death_count > 0) {\n            return this.sort<number>((teammate: Teammate): number => {\n                return teammate.henchman.htl_death_priority + (!teammate.is_loyal() ? 100 : 0); // Unloyal team members are prioritised over loyal ones\n            }).slice(-death_count);\n        } else {\n            return new Teammates([]);\n        }\n    }\n\n    public each (iterator: IObjectArrayIterator<Teammate, void>): void {\n        this.oa.each(iterator);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Teammates.ts\n **/","export interface IObjectArrayIterator<T, TResult> {\n    (value: T, index: number, list: T[]): TResult;\n}\n\nexport interface IObjectArray<T> {\n    elements: T[];\n    first (): T;\n    last (): T;\n    length (): number;\n    push (element: T): IObjectArray<T>;\n    unshift (element: T): IObjectArray<T>;\n    sort<TSort> (iterator: IObjectArrayIterator<T, TSort>): IObjectArray<T>;\n    filter (iterator: IObjectArrayIterator<T, boolean>): IObjectArray<T>;\n    find (iterator: IObjectArrayIterator<T, boolean>): T;\n    map<TResult> (iterator: IObjectArrayIterator<T, TResult>): TResult[];\n    each (iterator: IObjectArrayIterator<T, void>): void;\n}\n\nexport class ObjectArray<T> implements IObjectArray<T> {\n    public elements: T[];\n\n    constructor (elements: T[]) {\n        this.elements = elements;\n    }\n\n    public first (): T {\n        return this.elements.length ? this.elements[0] : undefined;\n    }\n\n    public last (): T {\n        return this.elements.length ? this.elements[this.elements.length - 1] : undefined;\n    }\n\n    public length (): number {\n        return this.elements.length;\n    }\n\n    public push (element: T): ObjectArray<T> {\n        const elements = this.cloneElements();\n        elements.push(element);\n        return this.factory(elements);\n    }\n\n    public unshift (element: T): ObjectArray<T> {\n        const elements = this.cloneElements();\n        elements.unshift(element);\n        return this.factory(elements);\n    }\n\n    public slice (start: number, end?: number): ObjectArray<T> {\n        return this.factory(this.elements.slice(start, end));\n    }\n\n    public sort<TSort> (iterator: IObjectArrayIterator<T, TSort>): ObjectArray<T> {\n        const elements = _.sortBy<T, TSort>(this.cloneElements(), iterator);\n        return this.factory(elements);\n    }\n\n    public filter (iterator: IObjectArrayIterator<T, boolean>): ObjectArray<T> {\n        const elements = _.filter<T>(this.cloneElements(), iterator);\n        return this.factory(elements);\n    }\n\n    public without (...values: T[]) {\n        values.unshift(...this.cloneElements());\n        const elements = _.without.apply(_, values);\n        return this.factory(elements);\n    }\n\n    public find (iterator: IObjectArrayIterator<T, boolean>): T {\n        return _.find<T>(this.elements, iterator);\n    }\n\n    public map<TResult> (iterator: IObjectArrayIterator<T, TResult>): TResult[] {\n        return _.map<T, TResult>(this.elements, iterator);\n    }\n\n    public each (iterator: IObjectArrayIterator<T, void>): void {\n        _.each<T>(this.elements, iterator);\n    }\n\n    private cloneElements (): T[] {\n        return this.elements.slice(0);\n    }\n\n    private factory (elements: T[]): ObjectArray<T> {\n        return new ObjectArray<T>(elements);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Utilities/ObjectArray.ts\n **/","import { Application } from \"../Application\";\nimport { Normandy } from \"./Normandy\";\nimport { Teammate } from \"./Teammate\";\nimport { Teammates } from \"./Teammates\";\nimport { State } from \"./State\";\nimport { TeammateRoles, TeammateDeathCauses, SerialisedTeammateElements, SerialisedElements, StageIDs } from \"../constants\";\n\ninterface ISerialisedNormandy extends String {\n}\n\ninterface ISerialisedTeammate extends String {\n}\n\nexport interface ISerialisationSerialised extends String {\n}\n\nexport class Serialisation {\n    // Captures Henchman ID (1), Death Cause (1), Death Stage ID (1), Roles (5)\n    public static TeammateRegex: RegExp = /^([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f]{5})$/;\n    public static TeammatesRegex: RegExp = /[0-9a-f]{8}/g;\n\n    // Captures: StageID (1), Normandy Delay (2), Normandy Flags (1) ((Teammate Stuff) x 12)\n    public static SerialisedRegex: RegExp = /^([0-9a-f])([\\d]{2})([\\d])((?:[0-9a-f]{2}[0-9a-f][0-9a-f]{5}){12})$/;\n\n    private app: Application;\n\n    /// -------------------------------------------\n    /// Utility methods\n    /// -------------------------------------------\n\n    public static lpad (value: string, length: number = 2): string {\n        const value_str = value;\n        return value_str.length >= length ? value_str : new Array(length - value_str.length + 1).join(\"0\") + value_str;\n    }\n\n    public static indexesToFlags (indexes: number[]): number {\n        return _.reduce(indexes, (accumulator: number, index: number): number => {\n            return accumulator + Math.pow(2, index);\n        }, 0);\n    }\n\n    public static flagsToIndexes (flags: number): number[] {\n        const indexes: number[] = [];\n        let index = 0;\n        let flag = 1;\n        while (flag <= flags) {\n            if (flags & flag) {\n                indexes.push(index);\n            }\n\n            index++;\n            flag *= 2;\n        }\n\n        return indexes;\n    }\n\n    public static getRoleCount (): number {\n        return _.keys(TeammateRoles).length / 2;\n    }\n\n    constructor (app: Application) {\n        this.app = app;\n    }\n\n    /// -------------------------------------------\n    /// Public interfaces\n    /// -------------------------------------------\n\n    public serialise (state: State): ISerialisationSerialised {\n        const elements: any[] = [\n            Serialisation.lpad((<number>state.stage().id).toString(16), 1),\n            this.serialiseNormandy(state.normandy),\n            _.map<Teammate, ISerialisedTeammate>(state.teammates().value(), (teammate: Teammate): ISerialisedTeammate => {\n                return this.serialiseTeammate(teammate);\n            }).join(\"\")\n        ];\n\n        return <ISerialisationSerialised>elements.join(\"\");\n    }\n\n    public deserialise (serialised: ISerialisationSerialised): State {\n        const matches = serialised.match(Serialisation.SerialisedRegex);\n        if (matches) {\n\n            const deserialised = new State(this.app);\n            deserialised.stage(this.app.stager.getStage(parseInt(\"0x\" + matches[SerialisedElements.StageID], 16)));\n            deserialised.normandy = this.deserialiseNormandyElements(matches[SerialisedElements.NormandyDelay], matches[SerialisedElements.NormandyFlags]);\n            deserialised.teammates(new Teammates(_.map(matches[SerialisedElements.Teammates].match(Serialisation.TeammatesRegex), (serialised_teammate: ISerialisedTeammate): Teammate => {\n                return this.deserialiseTeammate(serialised_teammate);\n            })));\n\n            return deserialised;\n        } else {\n            throw new Error(\"Serialised data was malformed.\");\n        }\n    }\n\n    public applySerialisedState (state: State, serialised: ISerialisationSerialised): void {\n        const new_state = this.deserialise(serialised);\n\n        state.normandy.delay(new_state.normandy.delay());\n        state.normandy.has_armour(new_state.normandy.has_armour());\n        state.normandy.has_shielding(new_state.normandy.has_shielding());\n        state.normandy.has_thanix_cannon(new_state.normandy.has_thanix_cannon());\n\n        const new_teammates= new_state.teammates();\n\n        state.teammates().each((teammate: Teammate): void => {\n            const new_teammate = new_teammates.findByHenchman(teammate.henchman);\n\n            teammate.is_recruited(new_teammate.is_recruited());\n            teammate.is_loyal(new_teammate.is_loyal());\n            teammate.is_dead(new_teammate.is_dead());\n            teammate.roles.removeAll();\n            _.each(new_teammate.roles(), (role: TeammateRoles): void => {\n                teammate.addRole(role);\n            });\n\n            //teammate.roles = new_teammate.roles;\n            teammate.death_cause = new_teammate.death_cause;\n            teammate.death_stage_id = new_teammate.death_stage_id;\n        });\n\n        state.stage(new_state.stage());\n    }\n\n    /// -------------------------------------------\n    /// Teammates\n    /// -------------------------------------------\n\n    // Length 8\n    private serialiseTeammate (teammate: Teammate): ISerialisedTeammate {\n        const role_offset = Serialisation.getRoleCount();\n\n        const roles = teammate.roles().slice(0);\n        if (teammate.is_recruited()) {\n            roles.push(role_offset + 1);\n        }\n        if (teammate.is_loyal()) {\n            roles.push(role_offset + 2);\n        }\n        if (teammate.is_dead()) {\n            roles.push(role_offset + 3);\n        }\n\n        const elements = [\n            Serialisation.lpad((<number> teammate.henchman.id).toString(16), 1),\n            Serialisation.lpad((teammate.death_cause() === undefined ? 0 : teammate.death_cause() + 1).toString(16), 1),\n            Serialisation.lpad((teammate.death_stage_id() || 0).toString(16), 1),\n            Serialisation.lpad(Serialisation.indexesToFlags(roles).toString(16), 5)\n        ];\n\n        return <ISerialisedTeammate>elements.join(\"\");\n    }\n\n    private deserialiseTeammate (serialised: ISerialisedTeammate): Teammate {\n        const matches: string[] = serialised.match(Serialisation.TeammateRegex);\n        const henchman_id         = parseInt(\"0x\" + matches[SerialisedTeammateElements.HenchmanID], 16);\n        const death_cause: TeammateDeathCauses         = parseInt(\"0x\" + matches[SerialisedTeammateElements.DeathCause], 16);\n        const death_stage_id: StageIDs      = parseInt(\"0x\" + matches[SerialisedTeammateElements.DeathStageID], 16) || undefined;\n        let roles: TeammateRoles[]               = Serialisation.flagsToIndexes(parseInt(\"0x\" + matches[SerialisedTeammateElements.Roles], 16));\n        const role_offset         = Serialisation.getRoleCount();\n\n        const is_recruited = _.indexOf(roles, role_offset + 1) >= 0;\n        const is_loyal = _.indexOf(roles, role_offset + 2) >= 0;\n        const is_dead = _.indexOf(roles, role_offset + 3) >= 0;\n\n        roles = _.without(roles, role_offset + 1, role_offset + 2, role_offset + 3);\n\n        const deserialised = new Teammate(this.app.getHenchman(henchman_id), is_recruited, is_loyal, is_dead, roles);\n        if (is_dead) {\n            deserialised.die(death_stage_id, death_cause - 1);\n        }\n\n        return deserialised;\n    }\n\n    /// -------------------------------------------\n    /// Normandy\n    /// -------------------------------------------\n\n    private serialiseNormandy (normandy: Normandy): ISerialisedNormandy {\n        const flags = 0 + (normandy.has_armour() ? 1 : 0) + (normandy.has_shielding() ? 2 : 0) + (normandy.has_thanix_cannon() ? 4 : 0);\n        const elements: string[] = [\n            Serialisation.lpad(normandy.delay().toString(10), 2),\n            Serialisation.lpad(flags.toString(10), 1)\n        ];\n\n        return <ISerialisedNormandy>elements.join(\"\");\n    }\n\n    private deserialiseNormandyElements (serialised_delay: string, serialised_flags: string): Normandy {\n        const delay               = parseInt(serialised_delay, 10);\n        const flags               = parseInt(serialised_flags, 10);\n        const has_armour          = !!(flags & 1);\n        const has_shielding       = !!(flags & 2);\n        const has_thanix_cannon   = !!(flags & 4);\n\n        return new Normandy(has_armour, has_shielding, has_thanix_cannon, delay);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Serialisation.ts\n **/","import { Application } from \"../Application\";\nimport { HenchmanIDs } from \"../constants\";\n\nexport enum Role {\n    ApproachSquadmate1,\n    ApproachSquadmate2,\n    ApproachShieldsDeath,\n    ApproachArmorDeath,\n    ApproachWeaponDeath,\n    VentsSquadmate1,\n    VentsSquadmate2,\n    VentsSpecialist,\n    VentsFireteamLeader,\n    VentsDeath,\n    LongWalkSpecialist,\n    LongWalkFireteamLeader,\n    LongWalkEscort,\n    LongWalkSquadmate1,\n    LongWalkSquadmate2,\n    LongWalkSquadmateDeath,\n    LongWalkEscortDeath,\n    LongWalkFireteamLeaderDeath,\n    BossSquadmate1,\n    BossSquadmate2,\n    BossHoldingTheLine,\n    BossSquadmateDeath,\n    BossHoldingTheLineDeath\n}\n\nexport class Teammate {\n\n    // Derivatives\n    public is_recruited: KnockoutObservable<boolean>;\n    public is_loyal: KnockoutObservable<boolean>;\n    public is_upgraded: KnockoutObservable<boolean>;\n    public is_good_vent_specialist: KnockoutComputed<boolean>;\n    public is_good_vent_fireteam_leader: KnockoutComputed<boolean>;\n    public is_good_escort: KnockoutComputed<boolean>;\n    public is_good_long_walk_specialist: KnockoutComputed<boolean>;\n    public is_good_long_walk_fireteam_leader: KnockoutComputed<boolean>;\n    public is_good_boss_squadmate: KnockoutComputed<boolean>;\n    public hold_the_line_score: KnockoutComputed<number>;\n    public survives: KnockoutComputed<boolean>;\n\n    public armour_death_priority_rank: KnockoutComputed<number>;\n    public shield_death_priority_rank: KnockoutComputed<number>;\n    public weapon_death_priority_rank: KnockoutComputed<number>;\n    public long_walk_death_priority_rank: KnockoutComputed<number>;\n    public cutscene_rescue_priority_rank: KnockoutComputed<number>;\n    public defence_report_priority_rank: KnockoutComputed<number>;\n    public keep_base_priority_rank: KnockoutComputed<number>;\n    public destroy_base_priority_rank: KnockoutComputed<number>;\n    public hold_the_line_death_priority_rank: KnockoutComputed<number>;\n\n    public roles: KnockoutObservableArray<Role>;\n\n    constructor (\n        private logic: Logic,\n        public id: HenchmanIDs,\n        public name: string,\n        public is_essential: boolean,\n        public hold_the_line_baseline_score: number,\n\n        // Priorities\n        public hold_the_line_death_priority: number,\n        public armour_death_priority: number,\n        public shield_death_priority: number,\n        public weapon_death_priority: number,\n        public long_walk_death_priority: number,\n        public cutscene_rescue_priority: number,\n        public defence_report_priority: number,\n        public keep_base_priority: number,\n        public destroy_base_priority: number,\n\n        // Flags\n        public is_vent_ideal_candidate: boolean,\n        public is_bubble_ideal_candidate: boolean,\n        public is_leader_ideal_candidate: boolean,\n        public is_super_leader: boolean,\n        public is_escort_candidate: boolean,\n        public is_vent_candidate: boolean,\n        public is_bubble_candidate: boolean,\n        public is_leader_candidate: boolean,\n\n        public upgrade_unlocks_armour: boolean,\n        public upgrade_unlocks_shields: boolean,\n        public upgrade_unlocks_weapon: boolean\n    ) {\n        this.is_recruited = ko.observable(this.is_essential);\n        this.is_loyal = ko.observable(false);\n        this.is_upgraded = ko.observable(false);\n\n        this.is_recruited.subscribe((is_recruited: boolean): void => {\n            if (!is_recruited) {\n                if (this.is_essential) {\n                    this.is_recruited(true);\n                }\n\n                this.is_loyal(false);\n                this.is_upgraded(false);\n            }\n        });\n\n        this.is_loyal.subscribe((is_loyal: boolean): void => {\n            if (is_loyal) {\n                if (!this.is_recruited()) {\n                    this.is_loyal(false);\n                }\n            } else {\n                this.is_upgraded(false);\n            }\n        });\n\n        this.is_upgraded.subscribe((is_upgraded: boolean): void => {\n            if (is_upgraded) {\n                if (!this.is_loyal()) {\n                    this.is_upgraded(false);\n                }\n            }\n        });\n\n        this.is_good_vent_specialist = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_vent_ideal_candidate;\n        });\n        this.is_good_vent_fireteam_leader = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_leader_ideal_candidate;\n        });\n        this.is_good_escort = ko.pureComputed((): boolean => {\n            return this.is_loyal();\n        });\n        this.is_good_long_walk_specialist = ko.pureComputed((): boolean => {\n            return this.is_loyal() && this.is_bubble_ideal_candidate;\n        });\n        this.is_good_long_walk_fireteam_leader = ko.pureComputed((): boolean => {\n            return this.is_leader_ideal_candidate && (this.is_loyal() || this.is_super_leader);\n        });\n        this.is_good_boss_squadmate = ko.pureComputed((): boolean => {\n            return this.is_loyal();\n        });\n\n        this.hold_the_line_score = ko.pureComputed((): number => {\n            return this.hold_the_line_baseline_score + (this.is_loyal() ? 1 : 0);\n        });\n\n        this.roles = ko.observableArray([]);\n\n        // Roles\n        this\n        .syncRoleToObservable(logic.approach_squadmate_1, Role.ApproachSquadmate1)\n        .syncRoleToObservable(logic.approach_squadmate_2, Role.ApproachSquadmate2)\n        .syncRoleToObservable(logic.approach_armour_death, Role.ApproachArmorDeath)\n        .syncRoleToObservable(logic.approach_shields_death, Role.ApproachShieldsDeath)\n        .syncRoleToObservable(logic.approach_weapon_death, Role.ApproachWeaponDeath)\n        .syncRoleToObservable(logic.vents_specialist, Role.VentsSpecialist)\n        .syncRoleToObservable(logic.vents_fireteam_leader, Role.VentsFireteamLeader)\n        .syncRoleToObservable(logic.vents_squadmate_1, Role.VentsSquadmate1)\n        .syncRoleToObservable(logic.vents_squadmate_2, Role.VentsSquadmate2)\n        .syncRoleToObservable(logic.vents_death, Role.VentsDeath)\n        .syncRoleToObservable(logic.long_walk_specialist, Role.LongWalkSpecialist)\n        .syncRoleToObservable(logic.long_walk_fireteam_leader, Role.LongWalkFireteamLeader)\n        .syncRoleToObservable(logic.long_walk_escort, Role.LongWalkEscort)\n        .syncRoleToObservable(logic.long_walk_squadmate_1, Role.LongWalkSquadmate1)\n        .syncRoleToObservable(logic.long_walk_squadmate_2, Role.LongWalkSquadmate2)\n        .syncRoleToObservable(logic.long_walk_escort_death, Role.LongWalkEscortDeath)\n        .syncRoleToObservable(logic.long_walk_squadmate_death, Role.LongWalkSquadmateDeath)\n        .syncRoleToObservable(logic.long_walk_fireteam_leader_death, Role.LongWalkFireteamLeaderDeath)\n        .syncRoleToObservable(logic.boss_squadmate_1, Role.BossSquadmate1)\n        .syncRoleToObservable(logic.boss_squadmate_2, Role.BossSquadmate2)\n        .syncRoleToObservableSet(logic.boss_squadmate_deaths, Role.BossSquadmateDeath)\n        .syncRoleToObservableSet(logic.boss_hold_the_line_candidates, Role.BossHoldingTheLine)\n        .syncRoleToObservableSet(logic.boss_hold_the_line_deaths, Role.BossHoldingTheLineDeath);\n\n        this.survives = ko.pureComputed((): boolean => {\n            const candidates = logic.boss_survivors();\n            if (candidates) {\n                return _.contains(candidates, this);\n            }\n        });\n\n        this.armour_death_priority_rank = this.deriveRank(\"armour_death_priority\");\n        this.shield_death_priority_rank = this.deriveRank(\"shield_death_priority\");\n        this.weapon_death_priority_rank = this.deriveRank(\"weapon_death_priority\");\n        this.long_walk_death_priority_rank = this.deriveRank(\"long_walk_death_priority\");\n        this.cutscene_rescue_priority_rank = this.deriveRank(\"cutscene_rescue_priority\");\n        this.defence_report_priority_rank = this.deriveRank(\"defence_report_priority\");\n        this.keep_base_priority_rank = this.deriveRank(\"keep_base_priority\");\n        this.destroy_base_priority_rank = this.deriveRank(\"destroy_base_priority\");\n        this.hold_the_line_death_priority_rank = this.deriveRank(\"hold_the_line_death_priority\");\n    }\n\n    private deriveRank (field: string): KnockoutComputed<number> {\n        return ko.pureComputed((): number => {\n            const pool = this.logic.pool();\n            return this[field] > 0 ? (pool.length - _.indexOf<Teammate>(_.sortBy(pool, field), this)) : undefined;\n        });\n    }\n\n    private switchRole (role: Role, condition: boolean): void {\n        if (!condition) {\n            this.roles.remove(role);\n        } else if (!this.hasRole(role)) {\n            this.roles.push(role);\n        }\n        console.log(\"switch role\", this.name, Role[role], condition, this.roles());\n    }\n\n    // private syncRole (role: Role, candidate: Teammate): void {\n    //     return this.switchRole(role, candidate && (candidate.id === this.id));\n    // }\n\n    private syncRoleToObservable (observable: KnockoutObservable<Teammate>, role: Role): Teammate {\n        observable.subscribe((teammate: Teammate): void => {\n            return this.switchRole(role, teammate && (teammate.id === this.id));\n        });\n        return this;\n    }\n\n    private syncRoleToObservableSet (observable: KnockoutObservable<Teammate[]>, role: Role): Teammate {\n        observable.subscribe((teammates: Teammate[]): void => {\n            return this.switchRole(role, _.contains(teammates, this));\n            //this.syncRole(role, teammate);\n        });\n        return this;\n    }\n\n    private hasRole (role: Role): boolean {\n        return this.roles.indexOf(role) > -1;\n    }\n\n    // private removeRole (role: Role): void {\n    //     this.roles.remove(role);\n    // }\n}\n\nexport class Logic {\n    public pool: KnockoutObservableArray<Teammate>;\n\n    // Prep properties\n    public normandy_has_armour: KnockoutComputed<boolean>;\n    public normandy_has_shields: KnockoutComputed<boolean>;\n    public normandy_has_weapon: KnockoutComputed<boolean>;\n    public mission_delay: KnockoutObservable<number>;\n    public recruited: KnockoutComputed<Teammate[]>;\n    public loyal: KnockoutComputed<Teammate[]>;\n    public upgraded: KnockoutComputed<Teammate[]>;\n    public all_recruited: KnockoutComputed<boolean>;\n    public all_loyal: KnockoutComputed<boolean>;\n    public all_upgraded: KnockoutComputed<boolean>;\n\n    // Approach\n    public approach_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public approach_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public approach_squadmate_1: KnockoutObservable<Teammate>;\n    public approach_squadmate_2: KnockoutObservable<Teammate>;\n    public approach_evaluatable: KnockoutComputed<boolean>;\n    public approach_shields_death: KnockoutComputed<Teammate>;\n    public approach_armour_death: KnockoutComputed<Teammate>;\n    public approach_weapon_death: KnockoutComputed<Teammate>;\n    public approach_survivors: KnockoutComputed<Teammate[]>;\n\n    // Vents\n    public vents_specialist_pool: KnockoutComputed<Teammate[]>;\n    public vents_specialist: KnockoutObservable<Teammate>;\n    public vents_fireteam_leader_pool: KnockoutComputed<Teammate[]>;\n    public vents_fireteam_leader: KnockoutObservable<Teammate>;\n    public vents_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public vents_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public vents_squadmate_1: KnockoutObservable<Teammate>;\n    public vents_squadmate_2: KnockoutObservable<Teammate>;\n    public vents_evaluatable: KnockoutComputed<boolean>;\n    public vents_death: KnockoutComputed<Teammate>;\n    public vents_survivors: KnockoutComputed<Teammate[]>;\n\n    // Long Walk\n    public long_walk_specialist_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_specialist: KnockoutObservable<Teammate>;\n    public long_walk_fireteam_leader_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_fireteam_leader: KnockoutObservable<Teammate>;\n    public long_walk_escort_pool: KnockoutComputed<Teammate[]>;\n    public long_walk_escort: KnockoutObservable<Teammate>;\n    public long_walk_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public long_walk_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public long_walk_squadmate_1: KnockoutObservable<Teammate>;\n    public long_walk_squadmate_2: KnockoutObservable<Teammate>;\n    public long_walk_evaluatable: KnockoutComputed<boolean>;\n    public long_walk_escort_death: KnockoutComputed<Teammate>;\n    public long_walk_squadmate_death: KnockoutComputed<Teammate>;\n    public long_walk_fireteam_leader_death: KnockoutComputed<Teammate>;\n    public long_walk_survivors: KnockoutComputed<Teammate[]>;\n\n    // Boss\n    public boss_squadmate_pool_1: KnockoutComputed<Teammate[]>;\n    public boss_squadmate_pool_2: KnockoutComputed<Teammate[]>;\n    public boss_squadmate_1: KnockoutObservable<Teammate>;\n    public boss_squadmate_2: KnockoutObservable<Teammate>;\n    public boss_evaluatable: KnockoutComputed<boolean>;\n    public boss_squadmate_deaths: KnockoutComputed<Teammate[]>;\n    public boss_hold_the_line_candidates: KnockoutComputed<Teammate[]>;\n    public boss_hold_the_line_total: KnockoutComputed<number>;\n    public boss_hold_the_line_rating: KnockoutComputed<number>;\n    public boss_hold_the_line_death_count: KnockoutComputed<number>;\n    public boss_hold_the_line_deaths: KnockoutComputed<Teammate[]>;\n    public boss_survivors: KnockoutComputed<Teammate[]>;\n\n    // Summary\n    public summary_defence_reporter: KnockoutComputed<Teammate>;\n    public summary_advocates_keeping_base: KnockoutComputed<Teammate>;\n    public summary_advocates_destroying_base: KnockoutComputed<Teammate>;\n    public summary_shepard_lives: KnockoutComputed<boolean>;\n    public summary_catches_shepard: KnockoutComputed<Teammate>;\n\n    // Serialisation\n    public serialised: KnockoutComputed<string>;\n\n    constructor (app: Application) {\n\n        // Prep\n        this.normandy_has_armour = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_armour\").is_upgraded();\n            },\n            write: (has_armour: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_armour\").is_upgraded(has_armour);\n            }\n        });\n        this.normandy_has_shields = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_shields\").is_upgraded();\n            },\n            write: (has_shields: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_shields\").is_upgraded(has_shields);\n            }\n        });\n        this.normandy_has_weapon = ko.pureComputed({\n            read: (): boolean => {\n                return _.find(this.pool(), \"upgrade_unlocks_weapon\").is_upgraded();\n            },\n            write: (has_weapon: boolean): void => {\n                _.find(this.pool(), \"upgrade_unlocks_weapon\").is_upgraded(has_weapon);\n            }\n        });\n        this.mission_delay = ko.observable(undefined);\n        this.pool = ko.observableArray([]);\n\n        this.recruited = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_recruited();\n            });\n        });\n        this.loyal = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_loyal();\n            });\n        });\n        this.upgraded = ko.pureComputed((): Teammate[] => {\n            return _.filter(this.pool(), (teammate: Teammate): boolean => {\n                return teammate.is_upgraded();\n            });\n        });\n\n        this.all_recruited = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.pool(), (teammate: Teammate): boolean => {\n                    return teammate.is_recruited();\n                });\n            },\n            write: (all_recruited: boolean): void => {\n                _.each(this.pool(), (teammate: Teammate): void => {\n                    teammate.is_recruited(all_recruited);\n                });\n            }\n        });\n        this.all_loyal = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.recruited(), (teammate: Teammate): boolean => {\n                    return teammate.is_loyal();\n                });\n            },\n            write: (all_loyal: boolean): void => {\n                _.each(this.recruited(), (teammate: Teammate): void => {\n                    teammate.is_loyal(all_loyal);\n                });\n            }\n        });\n        this.all_upgraded = ko.pureComputed({\n            read: (): boolean => {\n                return _.all(this.loyal(), (teammate: Teammate): boolean => {\n                    return teammate.is_upgraded();\n                });\n            },\n            write: (all_upgraded: boolean): void => {\n                _.each(this.loyal(), (teammate: Teammate): void => {\n                    teammate.is_upgraded(all_upgraded);\n                });\n            }\n        });\n\n        // Approach\n        this.approach_squadmate_1 = ko.observable(undefined);\n        this.approach_squadmate_2 = ko.observable(undefined);\n        this.approach_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.recruited();\n            if (candidates.length >= 8) {\n                return _.without(candidates, this.approach_squadmate_2());\n            }\n        });\n        this.approach_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.recruited();\n            if (candidates.length >= 8) {\n                return _.without(candidates, this.approach_squadmate_1());\n            }\n        });\n        this.bindToPool(this.approach_squadmate_1, this.approach_squadmate_pool_1);\n        this.bindToPool(this.approach_squadmate_2, this.approach_squadmate_pool_2);\n        this.approach_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.approach_squadmate_1() && this.approach_squadmate_2() && this.normandy_has_armour() !== undefined && this.normandy_has_weapon() !== undefined && this.normandy_has_shields() !== undefined);\n        });\n        this.approach_shields_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_shields()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2()).filter(\"shield_death_priority\").sortBy(\"shield_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_armour_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_armour()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2(), this.approach_shields_death()).filter(\"armour_death_priority\").sortBy(\"armour_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_weapon_death = ko.pureComputed((): Teammate => {\n            if (this.approach_evaluatable() && !this.normandy_has_weapon()) {\n                const candidates = _.chain<Teammate>(this.recruited()).without(this.approach_squadmate_1(), this.approach_squadmate_2(), this.approach_shields_death(), this.approach_armour_death()).filter(\"weapon_death_priority\").sortBy(\"weapon_death_priority\").value();\n                return _.last(candidates);\n            }\n        });\n        this.approach_survivors = ko.pureComputed((): Teammate[] => {\n            if (this.approach_evaluatable()) {\n                return _.without(this.recruited(), this.approach_shields_death(), this.approach_armour_death(), this.approach_weapon_death());\n            }\n        });\n\n        // Vents\n        this.vents_specialist = ko.observable(undefined);\n        this.vents_fireteam_leader = ko.observable(undefined);\n        this.vents_squadmate_1 = ko.observable(undefined);\n        this.vents_squadmate_2 = ko.observable(undefined);\n        this.vents_specialist_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_vent_candidate\"), this.vents_fireteam_leader(), this.vents_squadmate_1(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_fireteam_leader_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_leader_candidate\"), this.vents_specialist(), this.vents_squadmate_1(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.vents_specialist(), this.vents_fireteam_leader(), this.vents_squadmate_2());\n            }\n        });\n        this.vents_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.approach_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.vents_specialist(), this.vents_fireteam_leader(), this.vents_squadmate_1());\n            }\n        });\n        this.bindToPool(this.vents_specialist, this.vents_specialist_pool);\n        this.bindToPool(this.vents_fireteam_leader, this.vents_fireteam_leader_pool);\n        this.bindToPool(this.vents_squadmate_1, this.vents_squadmate_pool_1);\n        this.bindToPool(this.vents_squadmate_2, this.vents_squadmate_pool_2);\n        this.vents_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.vents_specialist() && this.vents_fireteam_leader() && this.vents_squadmate_1() && this.vents_squadmate_2());\n        });\n        this.vents_death = ko.pureComputed((): Teammate => {\n            if (this.vents_evaluatable()) {\n                const specialist = this.vents_specialist();\n                const leader = this.vents_fireteam_leader();\n                if (!specialist.is_good_vent_specialist() || !leader.is_good_vent_fireteam_leader()) {\n                    return specialist;\n                }\n            }\n        });\n        this.vents_survivors = ko.pureComputed((): Teammate[] => {\n            if (this.vents_evaluatable()) {\n                return _.without(this.approach_survivors(), this.vents_death());\n            }\n        });\n\n        // Long Walk\n        this.long_walk_specialist = ko.observable(undefined);\n        this.long_walk_fireteam_leader = ko.observable(undefined);\n        this.long_walk_escort = ko.observable(undefined);\n        this.long_walk_squadmate_1 = ko.observable(undefined);\n        this.long_walk_squadmate_2 = ko.observable(undefined);\n        this.long_walk_specialist_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_bubble_candidate\"), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_fireteam_leader_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_leader_candidate\"), this.long_walk_specialist(), this.long_walk_escort(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_escort_pool = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(_.filter(candidates, \"is_escort_candidate\"), this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_2());\n            }\n        });\n        this.long_walk_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_specialist(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_squadmate_1());\n            }\n        });\n        this.bindToPool(this.long_walk_specialist, this.long_walk_specialist_pool);\n        this.bindToPool(this.long_walk_fireteam_leader, this.long_walk_fireteam_leader_pool);\n        this.bindToPool(this.long_walk_escort, this.long_walk_escort_pool);\n        this.bindToPool(this.long_walk_squadmate_1, this.long_walk_squadmate_pool_1);\n        this.bindToPool(this.long_walk_squadmate_2, this.long_walk_squadmate_pool_2);\n        this.long_walk_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.long_walk_specialist() && this.long_walk_fireteam_leader() && this.long_walk_squadmate_1() && this.long_walk_squadmate_2());\n        });\n        this.long_walk_escort_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const escort = this.long_walk_escort();\n                if (escort && !escort.is_good_escort()) {\n                    return escort;\n                }\n            }\n        });\n        this.long_walk_squadmate_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const specialist = this.long_walk_specialist();\n                const squadmate_1 = this.long_walk_squadmate_1();\n                const squadmate_2 = this.long_walk_squadmate_2();\n                if (!specialist.is_good_long_walk_specialist()) {\n                    const candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n                    return _.last(candidates);\n                }\n            }\n        });\n        this.long_walk_fireteam_leader_death = ko.pureComputed((): Teammate => {\n            if (this.long_walk_evaluatable()) {\n                const leader = this.long_walk_fireteam_leader();\n                if (!leader.is_good_long_walk_fireteam_leader()) {\n\n                    // Even if they are a bad leader, they will survive if:\n                    // a) They are alone &\n                    // b) A squadmate died\n                    const long_walk_fireteam_followers = _.without(this.vents_survivors(), this.long_walk_fireteam_leader(), this.long_walk_escort(), this.long_walk_specialist(), this.long_walk_squadmate_1(), this.long_walk_squadmate_2());\n                    if (long_walk_fireteam_followers.length === 0 && !!this.long_walk_squadmate_death()) {\n                        return undefined;\n                    }\n\n                    return leader;\n                }\n            }\n        });\n        this.long_walk_survivors = ko.pureComputed((): Teammate[] => {\n            const candidates = this.vents_survivors();\n            if (this.long_walk_evaluatable()) {\n                return _.without(candidates, this.long_walk_escort_death(), this.long_walk_squadmate_death(), this.long_walk_escort_death());\n            }\n        });\n\n        // Boss\n        this.boss_squadmate_1 = ko.observable(undefined);\n        this.boss_squadmate_2 = ko.observable(undefined);\n        this.boss_squadmate_pool_1 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_escort(), this.boss_squadmate_2());\n            }\n        });\n        this.boss_squadmate_pool_2 = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (candidates) {\n                return _.without<Teammate>(candidates, this.long_walk_escort(), this.boss_squadmate_1());\n            }\n        });\n        this.bindToPool(this.boss_squadmate_1, this.boss_squadmate_pool_1);\n        this.bindToPool(this.boss_squadmate_2, this.boss_squadmate_pool_2);\n        this.boss_evaluatable = ko.pureComputed((): boolean => {\n            return !!(this.boss_squadmate_1() && this.boss_squadmate_2());\n        });\n        this.boss_squadmate_deaths = ko.pureComputed((): Teammate[] => {\n            if (this.boss_evaluatable()) {\n                const deaths: Teammate[] = [];\n                const squadmate_1 = this.boss_squadmate_1();\n                const squadmate_2 = this.boss_squadmate_2();\n                if (!squadmate_1.is_good_boss_squadmate()) {\n                    deaths.push(squadmate_1);\n                }\n                if (!squadmate_2.is_good_boss_squadmate()) {\n                    deaths.push(squadmate_2);\n                }\n                return deaths;\n            }\n        });\n        this.boss_hold_the_line_candidates = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (this.boss_evaluatable()) {\n                return _.without(candidates, this.long_walk_escort(), this.boss_squadmate_1(), this.boss_squadmate_2());\n            }\n        });\n        this.boss_hold_the_line_total = ko.pureComputed((): number => {\n            const candidates = this.boss_hold_the_line_candidates();\n            if (candidates) {\n                return _.sum(_.map<Teammate, number>(candidates, (teammate: Teammate): number => { return teammate.hold_the_line_score(); }));\n            }\n        });\n        this.boss_hold_the_line_rating = ko.pureComputed((): number => {\n            const candidates = this.boss_hold_the_line_candidates();\n            const total = this.boss_hold_the_line_total();\n            if (candidates) {\n                if (candidates.length > 0) {\n                    return total / candidates.length;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        this.boss_hold_the_line_death_count = ko.pureComputed((): number => {\n            const rating = this.boss_hold_the_line_rating();\n            const candidates = this.boss_hold_the_line_candidates();\n            if (rating !== undefined) {\n                if (rating < 2.0) {\n                    if (candidates.length >= 5) {\n                        if (rating >= 1.5) {\n                            return 1;\n                        } else if (rating >= 0.5) {\n                            return 2;\n                        } else {\n                            return 3;\n                        }\n                    } else if (candidates.length === 4) {\n                        if (rating >= 1.0) {\n                            return 1;\n                        } else if (rating >= 0.5) {\n                            return 2;\n                        } else if (rating > 0) {\n                            return 3;\n                        } else {\n                            return 4;\n                        }\n                    } else if (candidates.length === 3) {\n                        if (rating >= 1) {\n                            return 1;\n                        } else if (rating > 0) {\n                            return 2;\n                        } else {\n                            return 3;\n                        }\n                    } else if (candidates.length === 2) {\n                        if (rating > 0) {\n                            return 1;\n                        } else {\n                            return 2;\n                        }\n                    } else {\n                        return 1;\n                    }\n                } else {\n                    return 0;\n                }\n            }\n        });\n        this.boss_hold_the_line_deaths = ko.pureComputed((): Teammate[] => {\n            const death_count = this.boss_hold_the_line_death_count();\n            const candidates = this.boss_hold_the_line_candidates();\n            if (death_count !== undefined) {\n                if (death_count === 0) {\n                    return [];\n                } else {\n                    return _.sortBy(candidates, (teammate: Teammate): number => {\n                        return teammate.hold_the_line_death_priority + (!teammate.is_loyal() ? 100 : 0); // Unloyal team members are prioritised over loyal ones\n                    }).slice(-death_count);\n\n                    //return _.sortBy(candidates, \"hold_the_line_death_priority\").slice(-death_count);\n                }\n            }\n        });\n        this.boss_survivors = ko.pureComputed((): Teammate[] => {\n            const candidates = this.long_walk_survivors();\n            if (this.boss_evaluatable()) {\n                return _.without(candidates, ...this.boss_hold_the_line_deaths(), ...this.boss_squadmate_deaths());\n            }\n        });\n\n        this.summary_defence_reporter = ko.pureComputed((): Teammate => {\n            const candidates = this.boss_hold_the_line_candidates();\n            if (candidates) {\n                //const candidates = _.sortBy([squadmate_1, squadmate_2], \"long_walk_death_priority\");\n                return _.last(_.sortBy(candidates, \"defence_report_priority\"));\n            }\n        });\n\n        this.summary_advocates_keeping_base = ko.pureComputed((): Teammate => {\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (s1 && s2) {\n                return _.last(_.sortBy([s1, s2], \"keep_base_priority\"));\n            }\n        });\n\n        this.summary_advocates_destroying_base = ko.pureComputed((): Teammate => {\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (s1 && s2) {\n                return _.last(_.sortBy([s1, s2], \"destroy_base_priority\"));\n            }\n        });\n\n        this.summary_shepard_lives = ko.pureComputed((): boolean => {\n            return this.boss_survivors().length > 2;\n        });\n\n        this.summary_catches_shepard = ko.pureComputed((): Teammate => {\n            let candidates = this.boss_survivors();\n            const s1 = this.boss_squadmate_1();\n            const s2 = this.boss_squadmate_2();\n            if (candidates && candidates.length) {\n                candidates = _.sortBy(candidates, (teammate: Teammate): number => {\n                    const was_squadmate = teammate === s1 || teammate === s2;\n                    return teammate.cutscene_rescue_priority + (was_squadmate ? 100 : 0);\n                });\n                return _.last(candidates);\n            }\n        });\n\n        this.pool([\n            //                 ID                     Name                    Ess     HTL     HTLD    AD      SD      WD      LWD     CRP     DRP     KBP         DPB     Tech    Biotic      Leader      SLd     EC      VC      BC      LC    Armour   Shield  Weapon\n            new Teammate(this, HenchmanIDs.Garrus,    \"Garrus Vakarian\",      true,   3,      5,      0,      8,      11,     10,     3,      11,     8,          0,      false,  false,      true,       false,  true,   true,   false,  true, false,   false,  true),\n            new Teammate(this, HenchmanIDs.Grunt,     \"Grunt\",                false,  3,      0,      0,      6,      9,      8,      5,      9,      12,         0,      false,  false,      false,      false,  true,   false,  false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Jack,      \"Jack\",                 true,   0,      8,      12,     5,      8,      11,     2,      12,     0,          8,      false,  true,       false,      false,  true,   false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Jacob,     \"Jacob Taylor\",         true,   1,      6,      0,      0,      0,      6,      8,      8,      0,          10,     false,  false,      true,       false,  true,   true,   true,   true, true,    false,  false),\n            new Teammate(this, HenchmanIDs.Kasumi,    \"Kasumi Goto\",          false,  0,      9,      0,      12,     0,      3,      10,     4,      0,          9,      true,   false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Legion,    \"Legion\",               false,  1,      3,      0,      11,     0,      9,      4,      10,     9,          0,      true,   false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Miranda,   \"Miranda Lawson\",       true,   1,      7,      0,      0,      0,      -1,     12,     2,      13,         0,      false,  false,      true,       true,   false,  false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Mordin,    \"Mordin Solus\",         true,   0,      11,     0,      0,      0,      5,      7,      6,      10,         0,      false,  false,      false,      false,  true,   true,   false,  true, false,   false,  false),\n            //new Teammate(HenchmanIDs.Morinth,   \"Morinth\",            false,  1,      4,      0,      4,      7,      0,      5,      8,      0,          0,      false,  false,      false,      false,  true,   false,  true,   true),\n            new Teammate(this, HenchmanIDs.Samara,    \"Samara\",               false,  1,      4,      0,      4,      7,      7,      6,      7,      0,          12,     false,  true,       false,      false,  true,   false,  true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Tali,      \"Tali'zorah\",           false,  0,      10,     0,      10,     0,      4,      9,      5,      0,          11,     true,   false,      false,      false,  true,   true,   false,  true, false,   true,   false),\n            new Teammate(this, HenchmanIDs.Thane,     \"Thane\",                false,  1,      2,      0,      9,      12,     12,     1,      13,     0,          13,     false,  false,      false,      false,  true,   true,   true,   true, false,   false,  false),\n            new Teammate(this, HenchmanIDs.Zaeed,     \"Zaeed Masani\",         false,  3,      1,      0,      7,      10,     2,      11,     3,      11,         0,      false,  false,      false,      false,  true,   false,  false,  true, false,   false,  false)\n        ]);\n\n        const serialisables: KnockoutObservable<Teammate>[] = [\n            this.approach_squadmate_1,\n            this.approach_squadmate_2,\n            this.vents_specialist,\n            this.vents_fireteam_leader,\n            this.vents_squadmate_1,\n            this.vents_squadmate_2,\n            this.long_walk_specialist,\n            this.long_walk_fireteam_leader,\n            this.long_walk_escort,\n            this.long_walk_squadmate_1,\n            this.long_walk_squadmate_2,\n            this.boss_squadmate_1,\n            this.boss_squadmate_2\n        ];\n\n        this.serialised = ko.pureComputed({\n            read: (): string => {\n                let serialised: string = _.map(this.pool(), (teammate: Teammate): string => {\n                    return (\n                        (teammate.is_recruited() ? 1 : 0)\n                        + (teammate.is_loyal() ? 2 : 0)\n                        + (teammate.is_upgraded() ? 4 : 0)\n                    ).toString(16);\n                }).join(\"\");\n\n                serialised += _.map<KnockoutObservable<Teammate>, string>(serialisables, (observable: KnockoutObservable<Teammate>): string => {\n                    const teammate = observable();\n                    return (teammate ? teammate.id : 0).toString(16);\n                }).join(\"\");\n\n                return serialised;\n            },\n            write: (serialised: string): void => {\n                const pool = this.pool();\n                for (let i = 0, l = pool.length; i < l; ++i) {\n                    const flags = parseInt(serialised[i], 16);\n                    pool[i].is_recruited(!!(flags & 1));\n                    pool[i].is_loyal(!!(flags & 2));\n                    pool[i].is_upgraded(!!(flags & 4));\n                }\n\n                _.each(serialisables, (observable: KnockoutObservable<Teammate>, index: number): void => {\n                    const id = parseInt(serialised[pool.length + index], 16);\n                    if (id > 0) {\n                        observable(_.find(pool, (teammate: Teammate): boolean => {\n                            return teammate.id === id;\n                        }));\n                    } else {\n                        observable(undefined);\n                    }\n                });\n            }\n        });\n    }\n\n    private bindToPool (observable: KnockoutObservable<Teammate>, pool: KnockoutComputed<Teammate[]>): void {\n\n        // When the pool changes, ensure that the selected observable's value (if set) is still present in the new pool\n        pool.subscribe((candidates: Teammate[]): void => {\n            const teammate = observable();\n\n            // If candidate pool is not valid, nor is the observable\n            if (!candidates) {\n                observable(undefined);\n\n            // If pool IS valid, but does not contain the observable, observable is not valid\n            } else if (teammate && !_.contains(candidates, teammate)) {\n                observable(undefined);\n            }\n        });\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/Logic.ts\n **/","import { Teammate } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"pick-teammate\";\n\ninterface IParams {\n    target: KnockoutObservable<Teammate>;\n    pool: KnockoutComputed<Teammate[]>;\n    label?: string;\n    id?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.target = params.target;\n            this.pool = ko.pureComputed((): Teammate[] => {\n                const candidates = params.pool();\n                if (candidates) {\n                    candidates.unshift(undefined);\n                }\n                return candidates;\n            });\n            this.label = params.label;\n            this.id = params.id;\n        },\n        template: `\n        <div class=\"form-group\">\n            <label data-bind=\"text: label, attr: {'for': id}\"></label>\n            <select class=\"form-control\" id=\"test\" data-bind=\"attr: {'id': id}, options: pool, optionsText: function (teammate) { return teammate ? teammate.name : '-- None --'; }, value: target\"></select>\n            </div>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/PickTeammate.ts\n **/","import { Teammate } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"teammate-list\";\n\ninterface IParams {\n    pool: KnockoutComputed<Teammate[]>;\n    label?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.pool = params.pool;\n            this.label = params.label;\n            this.rendered = ko.pureComputed((): string => {\n                return _.map<Teammate, string>(this.pool(), (teammate: Teammate): string => {\n                    return teammate.name;\n                }).join(\", \");\n            });\n        },\n        template: `\n        <div class=\"form-group\">\n            <label data-bind=\"text: label\"></label>\n            <input class=\"form-control\" type=\"text\" data-bind=\"value: rendered\" />\n        </div>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateList.ts\n **/","import { Teammate, Role } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"role-toggle\";\n\ninterface IParams {\n    teammate: Teammate;\n    observable: KnockoutObservable<Teammate>;\n    pool: KnockoutObservable<Teammate[]>;\n    role: Role;\n    icon: string;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n            this.available = ko.pureComputed((): boolean => {\n                return _.contains(params.pool(), params.teammate);\n            });\n        },\n        template: `\n        <span data-bind=\"\n            style: {\n                visibility: $data.available() ? 'visible' : 'hidden'\n            },\n            css: {'text-muted': !$data.teammate.hasRole($data.role)},\n            click: function () {\n                if ($data.observable() === teammate) {\n                    $data.observable(undefined);\n                } else {\n                    $data.observable(teammate);\n                }\n            }\">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/RoleToggle.ts\n **/","import { Teammate, Role } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"role-static\";\n\ninterface IParams {\n    teammate: Teammate;\n    role: Role;\n    supertext?: string;\n    icon: string;\n    classes?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n            this.classes = {};\n            this.classes[params.classes] = true;\n        },\n        template: `\n        <span data-bind=\"\n            if: $data.teammate.hasRole($data.role),\n            css: $data.classes\n            \">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/RoleStatic.ts\n **/","import { Teammate, Role } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"death-role-static\";\n\ninterface IParams {\n    teammate: Teammate;\n    role: Role;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <!-- ko component: { name: 'role-static', params: {\n            teammate: teammate,\n            role: role,\n            supertext: supertext,\n            icon: \"alert\",\n            classes: \"text-danger\"\n        } } --><!-- /ko -->\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/DeathRoleStatic.ts\n **/","export const name: string = \"observable-toggle\";\n\ninterface IParams {\n    observable: KnockoutObservable<boolean>;\n    icon: string;\n    supertext?: string;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.glyphs = {\n                glyphicon: true\n            };\n            this.glyphs[\"glyphicon-\" + params.icon] = true;\n        },\n        template: `\n        <span data-bind=\"\n            css: {'text-muted': !$data.observable()},\n            click: function () {\n                $data.observable(!$data.observable());\n            }\">\n            <span data-bind=\"css: $data.glyphs\" class=\"glyphicon\"></span><sup data-bind=\"text: $data.supertext\"></sup>\n        </span>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/ObservableToggle.ts\n **/","import { Teammate } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"teammate-name\";\n\ninterface IParams {\n    teammate: KnockoutObservable<Teammate>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <p class=\"form-control-static\" data-bind=\"with: teammate\"><span data-bind=\"text: name\"></span></p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateName.ts\n **/","import { Teammate } from \"../../App/ME2/Logic\";\nimport { Logic } from \"../../App/ME2/Logic\";\n\nexport const name: string = \"teammate-row\";\n\ninterface IParams {\n    teammate: Teammate;\n    logic: Logic;\n    modal_target: KnockoutObservable<Teammate>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n        },\n        template: `\n        <tr data-bind=\"css: {'text-muted': !teammate.is_recruited() }\">\n            <td>\n                <a href=\"#view-profile\" data-bind=\"click: function () { modal_target(teammate); }\">\n                    <span data-bind=\"text: teammate.name\"></span>\n                </a>\n            </td>\n            <td>\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_recruited,\n                    icon: \"ok\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind=\"if: teammate.is_recruited\">\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_loyal,\n                    icon: \"heart\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <span data-bind=\"if: teammate.is_loyal\">\n                <!-- ko component: { name: 'observable-toggle', params: {\n                    observable: teammate.is_upgraded,\n                    icon: \"circle-arrow-up\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                </span>\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_1,\n                    pool: logic.approach_squadmate_pool_1,\n                    role: Role.ApproachSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.approach_squadmate_2,\n                    pool: logic.approach_squadmate_pool_2,\n                    role: Role.ApproachSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_specialist,\n                    pool: logic.vents_specialist_pool,\n                    role: Role.VentsSpecialist,\n                    icon: \"star\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_fireteam_leader,\n                    pool: logic.vents_fireteam_leader_pool,\n                    role: Role.VentsFireteamLeader,\n                    icon: \"fire\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_1,\n                    pool: logic.vents_squadmate_pool_1,\n                    role: Role.VentsSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.vents_squadmate_2,\n                    pool: logic.vents_squadmate_pool_2,\n                    role: Role.VentsSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_specialist,\n                    pool: logic.long_walk_specialist_pool,\n                    role: Role.LongWalkSpecialist,\n                    icon: \"star\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_fireteam_leader,\n                    pool: logic.long_walk_fireteam_leader_pool,\n                    role: Role.LongWalkFireteamLeader,\n                    icon: \"fire\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_escort,\n                    pool: logic.long_walk_escort_pool,\n                    role: Role.LongWalkEscort,\n                    icon: \"heart-empty\",\n                    supertext: \"\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_1,\n                    pool: logic.long_walk_squadmate_pool_1,\n                    role: Role.LongWalkSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.long_walk_squadmate_2,\n                    pool: logic.long_walk_squadmate_pool_2,\n                    role: Role.LongWalkSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_1,\n                    pool: logic.boss_squadmate_pool_1,\n                    role: Role.BossSquadmate1,\n                    icon: \"user\",\n                    supertext: \"1\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-toggle', params: {\n                    teammate: teammate,\n                    observable: logic.boss_squadmate_2,\n                    pool: logic.boss_squadmate_pool_2,\n                    role: Role.BossSquadmate2,\n                    icon: \"user\",\n                    supertext: \"2\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'role-static', params: {\n                    teammate: teammate,\n                    role: Role.BossHoldingTheLine,\n                    supertext: \"\",\n                    icon: \"flash\"\n                } } --><!-- /ko -->\n            </td>\n            <td>\n                <span data-bind=\"\n                    if: teammate.survives\n                    \">\n                    <span class=\"glyphicon glyphicon-ok-circle text-success\"></span>\n                </span>\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachShieldsDeath,\n                    supertext: \"Shield\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachArmorDeath,\n                    supertext: \"Armour\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.ApproachWeaponDeath,\n                    supertext: \"Weapon\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.VentsDeath,\n                    supertext: \"Vents\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkSquadmateDeath,\n                    supertext: \"LW Squadmate\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkFireteamLeaderDeath,\n                    supertext: \"LW Leader\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.LongWalkEscortDeath,\n                    supertext: \"Escort\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.BossSquadmateDeath,\n                    supertext: \"Boss Squadmate\"\n                } } --><!-- /ko -->\n                <!-- ko component: { name: 'death-role-static', params: {\n                    teammate: teammate,\n                    role: Role.BossHoldingTheLineDeath,\n                    supertext: \"HTL\"\n                } } --><!-- /ko -->\n            </td>\n        </tr>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/TeammateRow.ts\n **/","export const name: string = \"yes-no\";\n\ninterface IParams {\n    value: KnockoutObservable<boolean> | boolean;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            _.extend(this, params);\n            this.value = ko.observable(ko.unwrap(params.value));\n        },\n        template: `\n        <p class=\"form-control-static\" data-bind=\"text: value() ? 'Yes' : 'No'\"></p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/YesNo.ts\n **/","export const name: string = \"priority-rank\";\n\ninterface IParams {\n    value: number | KnockoutObservable<number>;\n}\n\nvoid(((): void => {\n    ko.components.register(name, {\n        viewModel: function (params: IParams): void {\n            this.value = ko.unwrap(params.value);\n        },\n        template: `\n        <p class=\"form-control-static\">\n            <span data-bind=\"if: value !== undefined\">#<span data-bind=\"text: value\"></span></span>\n            <span data-bind=\"if: value === undefined\"><span class=\\\"text-muted\\\">N/A</span></span>\n        </p>\n        `\n    });\n})());\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/Knockout/Components/PriorityRank.ts\n **/","import { Application } from \"../Application\";\nimport { Teammate } from \"./Logic\";\n\nexport class UI {\n    private app: Application;\n\n    constructor (app: Application) {\n        this.app = app;\n    }\n\n    public showRankPopover (event: Event, field: string, title: string): void {\n        const $target = $(event.target);\n        const $content = $(\"<ol />\").addClass(\"rank-popover-list\");\n        const candidates = _.chain(this.app.logic.pool()).filter((teammate: Teammate): boolean => {\n            const observable: KnockoutObservable<number> = teammate[field];\n            return !!observable();\n        }).sortBy((teammate: Teammate): number => {\n            const observable: KnockoutObservable<number> = teammate[field];\n            return observable();\n        }).value();\n        _.each(candidates, (teammate: Teammate) => {\n            $content.append(\n                $(\"<li />\")\n                .append(teammate.name)\n            );\n        });\n\n        $target.popover({\n            trigger: \"focus\",\n            title: title,\n            html: true,\n            content: $content\n        })\n        .on(\"hidden.bs.popover\", () => {\n            $target.popover(\"destroy\");\n        })\n        .popover(\"show\");\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/tslint-loader!./source/typescript/App/ME2/UI.ts\n **/"],"sourceRoot":""}